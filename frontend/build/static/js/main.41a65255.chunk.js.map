{"version":3,"sources":["Context/ChatProvider.js","components/reminders/notificationUtils.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/reminders/ReminderModal.js","components/reminders/ReminderButton.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/reminders/ReminderSidebar.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","config/socket.js","components/MyChats.js","components/reminders/ReminderSnoozeModal.js","components/reminders/ReminderListModal.js","components/miscellaneous/SideDrawer.js","utils/notificationService.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","socket","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","toast","useToast","useEffect","userInfo","JSON","parse","localStorage","getItem","push","io","emit","on","reminder","console","log","window","Notification","permission","navigator","serviceWorker","ready","then","registration","showNotification","concat","title","body","message","icon","badge","tag","_id","renotify","requireInteraction","actions","action","data","id","token","showReminderNotification","_objectSpread","description","status","duration","isClosable","off","_jsx","Provider","value","Login","show","setShow","email","setEmail","password","setPassword","loading","setLoading","_jsxs","VStack","spacing","FormControl","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","color","onClick","handleClick","colorScheme","borderRadius","style","marginTop","async","position","config","headers","axios","post","setItem","stringify","error","response","isLoading","variant","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","p","accept","pics","undefined","FormData","append","fetch","method","res","json","url","toString","catch","err","postDetails","files","Homepage","Box","minH","w","bgGradient","display","justifyContent","alignItems","px","Container","maxW","bg","backdropFilter","border","boxShadow","Flex","direction","align","mb","Text","fontSize","fontWeight","fontFamily","Tabs","isFitted","TabList","Tab","_selected","TabPanels","TabPanel","isSameSenderMargin","messages","m","i","userId","length","sender","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","isOpen","onOpen","onClose","useDisclosure","bgGlass","useColorModeValue","borderGlass","_Fragment","cursor","IconButton","d","base","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","background","ModalHeader","textAlign","ModalCloseButton","ModalBody","flexDirection","pb","Image","boxSize","src","alt","shadow","ReminderModal","reminderText","setReminderText","dueAt","setDueAt","setType","Textarea","RadioGroup","Stack","Radio","ModalFooter","mr","Authorization","payload","chatId","delay","Date","getTime","now","setTimeout","_error$response","_error$response2","_error$response2$data","ReminderButton","selectedMessage","setSelectedMessage","Menu","isLazy","MenuButton","as","BellIcon","_hover","aria-label","MenuList","zIndex","MenuItem","EditIcon","handleSetReminder","ScrollableChat","ScrollableFeed","map","isOwnMessage","className","gap","marginBottom","Tooltip","label","placement","hasArrow","Avatar","mt","backgroundColor","WebkitBackdropFilter","padding","marginLeft","whiteSpace","wordBreak","maxWidth","content","createdAt","toLocaleTimeString","hour","minute","UserBadgeItem","handleFunction","admin","Badge","py","CloseIcon","pl","UserListItem","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","put","handleRemove","chatName","flexDir","flexWrap","ml","query","get","handleSearch","Spinner","ReminderSidebar","z","reminders","setReminders","snoozeDate","setSnoozeDate","activeReminderId","setActiveReminderId","activeTab","setActiveTab","showSidebar","setShowSidebar","fetchReminders","_error$response$data","formatDueTime","timestamp","moment","format","top","right","height","maxHeight","md","borderLeft","overflow","borderBottom","flexShrink","borderTopRadius","HStack","justify","RepeatIcon","isDisabled","flex","overflowY","updatedAt","fromNow","RepeatClockIcon","newDate","setMinutes","getMinutes","_err$response2","_err$response2$data","handleQuickSnooze","CheckIcon","_err$response","_err$response$data","handleMarkDone","DeleteIcon","confirm","delete","_err$response4","_err$response4$data","handleDelete","_err$response3","_err$response3$data","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","isSidebarOpen","setIsSidebarOpen","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","role","alignSelf","margin","onKeyDown","event","key","Lottie","options","_placeholder","lastTypingTime","getSenderFull","Chatbox","ChatLoading","Skeleton","GroupChatModal","selectedUsers","setSelectedUsers","refinedResults","filter","toLowerCase","startsWith","delUser","sel","slice","handleGroup","userToAdd","transports","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","otherUser","latestMessage","noOfLines","substring","snoozeOptions","ReminderSnoozeModal","onResnooze","min","newDueAt","minutes","handleSnooze","ReminderListModal","isSnoozeOpen","onSnoozeOpen","onSnoozeClose","selectedReminder","setSelectedReminder","activeReminders","r","isDone","sort","a","b","doneReminders","borderWidth","toLocaleString","remindAgainCount","handleSnoozeClick","handleMarkAsDone","Divider","my","borderColor","ReminderList","endpoint","_reminder$sender","handleRemindAgain","SideDrawer","showReminderSidebar","setShowReminderSidebar","reminderType","setReminderType","loadingChat","setLoadingChat","isSearchOpen","onSearchOpen","onSearchClose","isReminderModalOpen","onReminderModalOpen","onReminderModalClose","isReminderListOpen","onReminderListOpen","onReminderListClose","glassBg","SearchIcon","FaBrain","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","trim","filteredResults","searchUser","c","accessChat","NotificationBadge","count","effect","Effect","SCALE","Portal","notif","_notif$chat$users$fin","n","_active","minW","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","requestNotificationPermission","warn","currentPermission","requestPermission","Chatpage","setVh","vh","innerHeight","document","documentElement","setProperty","addEventListener","removeEventListener","sx","App","register","waiting","postMessage","granted","init","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","getElementById"],"mappings":"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","file":"static/js/main.41a65255.chunk.js","sourcesContent":["// import React, { createContext, useContext, useEffect, useState } from \"react\";\n// import { useHistory } from \"react-router-dom\";\n\n// const ChatContext = createContext();\n\n// const ChatProvider = ({ children }) => {\n//   const [selectedChat, setSelectedChat] = useState();\n//   const [user, setUser] = useState();\n//   const [notification, setNotification] = useState([]);\n//   const [chats, setChats] = useState();\n\n//   const history = useHistory();\n\n//   useEffect(() => {\n//     const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n//     setUser(userInfo);\n\n//     if (!userInfo) history.push(\"/\");\n//     // eslint-disable-next-line react-hooks/exhaustive-deps\n//   }, [history]);\n\n//   return (\n//     <ChatContext.Provider\n//       value={{\n//         selectedChat,\n//         setSelectedChat,\n//         user,\n//         setUser,\n//         notification,\n//         setNotification,\n//         chats,\n//         setChats,\n//       }}\n//     >\n//       {children}\n//     </ChatContext.Provider>\n//   );\n// };\n\n// export const ChatState = () => {\n//   return useContext(ChatContext);\n// };\n\n// export default ChatProvider;\n// import React, { createContext, useContext, useEffect, useState } from \"react\";\n// import { useHistory } from \"react-router-dom\";\n// import { useToast } from \"@chakra-ui/react\";\n// import io from \"socket.io-client\";\n// import { triggerReminderNotification } from \"../utils/notificationService\";\n// const ChatContext = createContext();\n// let socket;\n\n// const ENDPOINT = \"http://localhost:5000\"; // 🔁 Update if hosted elsewhere\n\n// const ChatProvider = ({ children }) => {\n//   const [selectedChat, setSelectedChat] = useState();\n//   const [user, setUser] = useState();\n//   const [notification, setNotification] = useState([]);\n//   const [chats, setChats] = useState();\n\n//   const history = useHistory();\n//   const toast = useToast();\n\n//   useEffect(() => {\n//     const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n//     setUser(userInfo);\n\n//     if (!userInfo) history.push(\"/\");\n//   }, [history]);\n\n//   useEffect(() => {\n//     if (!user) return;\n\n//     // ✅ Initialize socket\n//     socket = io(ENDPOINT);\n//     socket.emit(\"setup\", user);\n\n//     // ✅ Listen for due reminders\n//     socket.on(\"reminderDue\", (reminder) => {\n//       console.log(\"🔔 Reminder received:\", reminder);\n// \t  triggerReminderNotification(reminder.message);\n// \t\t// ✅ Show browser notification (if permission is granted)\n// \t\t// if (\"Notification\" in window && Notification.permission === \"granted\") {\n// \t\t// \tnew Notification(\"⏰ Reminder Due\", {\n// \t\t// \t  body: reminder.message,\n// \t\t// \t  //icon: \"/reminder-icon.png\", // Optional: place in public folder\n// \t\t// \t});\n// \t\t//   }\n\n//       toast({\n//         title: \"⏰ Reminder Due\",\n//         description: reminder.message,\n//         status: \"info\",\n//         duration: 5000,\n//         isClosable: true,\n//       });\n//     });\n\n//     return () => {\n//       socket.off(\"reminderDue\");\n//     };\n//   }, [user, toast]);\n\n//   return (\n//     <ChatContext.Provider\n//       value={{\n//         selectedChat,\n//         setSelectedChat,\n//         user,\n//         setUser,\n//         notification,\n//         setNotification,\n//         chats,\n//         setChats,\n//         socket, // optionally share socket to other components\n//       }}\n//     >\n//       {children}\n//     </ChatContext.Provider>\n//   );\n// };\n\n// export const ChatState = () => {\n//   return useContext(ChatContext);\n// };\n\n// export default ChatProvider;//college\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useToast } from \"@chakra-ui/react\";\nimport io from \"socket.io-client\";\nimport { showReminderNotification } from \"../components/reminders/notificationUtils\"; // ✅ Adjust path as needed\n\nconst ChatContext = createContext();\nlet socket;\n\nconst ENDPOINT = \"http://localhost:5000\"; // 🔁 Update if hosted elsewhere\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n  const toast = useToast();\n\n  // ✅ Load user from localStorage on app start\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n  }, [history]);\n\n  // ✅ Connect socket and listen to reminder notifications\n  useEffect(() => {\n    if (!user) return;\n\n    // Initialize socket\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n\n    // 🔔 Listen for due reminders from backend\n    socket.on(\"reminderDue\", (reminder) => {\n\t\tconsole.log(\"Reminder Due:\", reminder);\n      console.log(\"🔔 Reminder received:\", reminder);\n\n      // ✅ Show system notification with actions\n      showReminderNotification({\n        ...reminder,\n        token: user.token, // for backend API call in actions\n        title: reminder.title || \"Reminder Due\",\n      });\n\n      // ✅ Also show a toast inside the app\n      toast({\n        title: \"⏰ Reminder Due\",\n        description: reminder.message,\n        status: \"info\",\n        duration: 5000,\n        isClosable: true,\n      });\n    });\n\n    return () => {\n      socket.off(\"reminderDue\");\n    };\n  }, [user, toast]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n        socket, // optionally expose socket\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => useContext(ChatContext);\n\nexport default ChatProvider;\n\n","// components/reminder/notificationUtils.js\r\n\r\nexport const showReminderNotification = (reminder) => {\r\n\tif (!(\"Notification\" in window) || Notification.permission !== \"granted\") return;\r\n  \r\n\tnavigator.serviceWorker.ready.then((registration) => {\r\n\t  registration.showNotification(`🔔 ${reminder.title || \"Reminder Due\"}`, {\r\n\t\tbody: reminder.message,\r\n\t\ticon: \"/favicon.ico\",\r\n\t\tbadge: \"/favicon.ico\",\r\n\t\ttag: \"reminder-\" + reminder._id,\r\n\t\trenotify: true,\r\n\t\trequireInteraction: true, // Keeps notification on screen until dismissed\r\n\t\tactions: [\r\n\t\t  { action: \"mark-done\", title: \"✅ Mark Done\" },\r\n\t\t  { action: \"remind-again\", title: \"⏰ Remind Later\" },\r\n\t\t],\r\n\t\tdata: {\r\n\t\t  id: reminder._id,\r\n\t\t  message: reminder.message,\r\n\t\t  token: reminder.token,\r\n\t\t},\r\n\t  });\r\n\t});\r\n  };\r\n  ","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" color=\"black\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"50%\"\n\t\tborderRadius=\"25px\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n\t  \n      <Button\n        variant=\"solid\"\n        colorScheme=\"red\"\n        width=\"100%\"\n\t\tborderRadius=\"25px\"\n        onClick={() => {\n          setEmail(\"guest@example.com\");\n          setPassword(\"123456\");\n        }}\n      >\n        Get Guest User Credentials\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\"  color=\"black\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" color=\"black\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n  useToast,\n  Flex,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n  const toast = useToast();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Box\n      minH=\"100vh\"\n      w=\"100%\"\n      bgGradient=\"linear(to-r, purple.800, blue.500)\"\n      display=\"flex\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      px={4}\n    >\n      <Container\n        maxW=\"sm\"\n        bg=\"whiteAlpha.100\"\n        backdropFilter=\"blur(10px)\"\n        border=\"1px solid rgba(255,255,255,0.2)\"\n        borderRadius=\"lg\"\n        boxShadow=\"xl\"\n        p={6}\n        color=\"white\"\n      >\n        <Flex direction=\"column\" align=\"center\" mb={4}>\n          <Text fontSize=\"3xl\" fontWeight=\"bold\" fontFamily=\"Work sans\">\n            sawCollab\n          </Text>\n        </Flex>\n\n        <Tabs isFitted variant=\"soft-rounded\" colorScheme=\"purple\">\n          <TabList mb=\"1em\">\n            <Tab _selected={{ bg: \"whiteAlpha.900\" }}>Login</Tab>\n            <Tab _selected={{ bg: \"whiteAlpha.900\" }}>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Container>\n    </Box>\n  );\n}\n\nexport default Homepage;\n\n// import {\n// \tBox,\n// \tContainer,\n// \tTab,\n// \tTabList,\n// \tTabPanel,\n// \tTabPanels,\n// \tTabs,\n// \tText,\n// \tButton,\n// \tFlex,\n// \tuseToast\n//   } from \"@chakra-ui/react\";\n//   import { useEffect } from \"react\";\n//   import { useHistory } from \"react-router\";\n//   import Login from \"../components/Authentication/Login\";\n//   import Signup from \"../components/Authentication/Signup\";\n  \n//   function Homepage() {\n// \tconst history = useHistory();\n// \tconst toast = useToast();\n  \n// \tuseEffect(() => {\n// \t  const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n// \t  if (user) history.push(\"/chats\");\n// \t}, [history]);\n  \n// \tconst showTestNotification = async () => {\n// \t  if (!(\"Notification\" in window)) {\n// \t\ttoast({\n// \t\t  title: \"Browser not supported\",\n// \t\t  description: \"Your browser doesn't support desktop notifications\",\n// \t\t  status: \"error\",\n// \t\t  duration: 5000,\n// \t\t  isClosable: true,\n// \t\t});\n// \t\treturn;\n// \t  }\n  \n// \t  // Step 1: Ask for permission if not already granted\n// \t  if (Notification.permission === \"default\") {\n// \t\tconst permission = await Notification.requestPermission();\n// \t\tif (permission !== \"granted\") {\n// \t\t  toast({\n// \t\t\ttitle: \"Permission required\",\n// \t\t\tdescription: \"Please enable notifications to receive reminders\",\n// \t\t\tstatus: \"warning\",\n// \t\t\tduration: 5000,\n// \t\t\tisClosable: true,\n// \t\t  });\n// \t\t  return;\n// \t\t}\n// \t  }\n  \n// \t  // Step 2: Show notification if granted\n// \t  if (Notification.permission === \"granted\") {\n// \t\tconst notification = new Notification(\"🔔 sawCollab Test\", {\n// \t\t  body: \"Notification system is working perfectly!\",\n// \t\t  icon: \"/favicon.ico\",\n// \t\t});\n  \n// \t\tnotification.onclick = () => {\n// \t\t  window.focus();\n// \t\t  notification.close();\n// \t\t};\n// \t  } else {\n// \t\ttoast({\n// \t\t  title: \"Notifications blocked\",\n// \t\t  description: \"Please enable notifications in your browser settings\",\n// \t\t  status: \"error\",\n// \t\t  duration: 5000,\n// \t\t  isClosable: true,\n// \t\t});\n// \t  }\n// \t};\n  \n// \treturn (\n// \t  <Container maxW=\"xl\" centerContent>\n// \t\t<Box\n// \t\t  d=\"flex\"\n// \t\t  justifyContent=\"center\"\n// \t\t  p={3}\n// \t\t  bg=\"white\"\n// \t\t  w=\"100%\"\n// \t\t  m=\"40px 0 15px 0\"\n// \t\t  borderRadius=\"lg\"\n// \t\t  borderWidth=\"1px\"\n// \t\t>\n// \t\t  <Flex direction=\"column\" align=\"center\">\n// \t\t\t<Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n// \t\t\t  sawCollab\n// \t\t\t</Text>\n// \t\t\t{/*\n// \t\t\t// test button - remove after testing\n// \t\t\t<Button \n// \t\t\t  onClick={showTestNotification}\n// \t\t\t  colorScheme=\"teal\"\n// \t\t\t  size=\"sm\"\n// \t\t\t  mt={2}\n// \t\t\t  isLoading={Notification.permission === \"default\"}\n// \t\t\t  loadingText=\"Requesting...\"\n// \t\t\t>\n// \t\t\t  Test Notifications\n// \t\t\t</Button> */}\n// \t\t  </Flex>\n// \t\t</Box>\n// \t\t<Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n// \t\t  <Tabs isFitted variant=\"soft-rounded\">\n// \t\t\t<TabList mb=\"1em\">\n// \t\t\t  <Tab>Login</Tab>\n// \t\t\t  <Tab>Sign Up</Tab>\n// \t\t\t</TabList>\n// \t\t\t<TabPanels>\n// \t\t\t  <TabPanel>\n// \t\t\t\t<Login />\n// \t\t\t  </TabPanel>\n// \t\t\t  <TabPanel>\n// \t\t\t\t<Signup />\n// \t\t\t  </TabPanel>\n// \t\t\t</TabPanels>\n// \t\t  </Tabs>\n// \t\t</Box>\n// \t  </Container>\n// \t);\n//   }\n  \n//   export default Homepage;\n// // import {\n// //   Box,\n// //   Container,\n// //   Tab,\n// //   TabList,\n// //   TabPanel,\n// //   TabPanels,\n// //   Button,\n// //   Tabs,\n// //   Text,\n// // } from \"@chakra-ui/react\";\n// // import { useEffect } from \"react\";\n// // import { useHistory } from \"react-router\";\n// // import Login from \"../components/Authentication/Login\";\n// // import Signup from \"../components/Authentication/Signup\";\n\n// // function Homepage() {\n// //   const history = useHistory();\n\n// //   useEffect(() => {\n// //     const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n// //     if (user) history.push(\"/chats\");\n// //   }, [history]);\n\n// //   const showTestNotification = () => {\n// // \tif (\"Notification\" in window && Notification.permission === \"granted\") {\n// // \t  const notification = new Notification(\"🔔 Reminder\", {\n// // \t\tbody: \"This is a test notification!\",\n// // \t\ticon: \"/icon.png\", // optional, you can add your own app icon\n// // \t  });\n  \n// // \t  // Optional: Add click handler\n// // \t  notification.onclick = () => {\n// // \t\tconsole.log(\"Notification clicked!\");\n// // \t\twindow.focus(); // bring app into focus\n// // \t  };\n// // \t}\n// //   };\n  \n// //   return (\n// //     <Container maxW=\"xl\" centerContent>\n// //       <Box\n// //         d=\"flex\"\n// //         justifyContent=\"center\"\n// //         p={3}\n// //         bg=\"white\"\n// //         w=\"100%\"\n// //         m=\"40px 0 15px 0\"\n// //         borderRadius=\"lg\"\n// //         borderWidth=\"1px\"\n// //       >\n// //         <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n// //           Talk-A-Tive\n// //         </Text>\n// // \t\t {/* Temporary test button - remove after testing */}\n// // \t\t <Button \n// //             onClick={showTestNotification}\n// //             colorScheme=\"teal\"\n// //             size=\"sm\"\n// //             mt={2}\n// //           >\n// //             Test Notifications\n// //           </Button>\n// //       </Box>\n// //       <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n// //         <Tabs isFitted variant=\"soft-rounded\">\n// //           <TabList mb=\"1em\">\n// //             <Tab>Login</Tab>\n// //             <Tab>Sign Up</Tab>\n// //           </TabList>\n// //           <TabPanels>\n// //             <TabPanel>\n// //               <Login />\n// //             </TabPanel>\n// //             <TabPanel>\n// //               <Signup />\n// //             </TabPanel>\n// //           </TabPanels>\n// //         </Tabs>\n// //       </Box>\n// //     </Container>\n// //   );\n// // }\n\n// // export default Homepage;\n// import {\n// \tBox,\n// \tContainer,\n// \tTab,\n// \tTabList,\n// \tTabPanel,\n// \tTabPanels,\n// \tTabs,\n// \tText,\n// \tButton,\n// \tFlex\n//   } from \"@chakra-ui/react\";\n//   import { useEffect } from \"react\";\n//   import { useHistory } from \"react-router\";\n//   import Login from \"../components/Authentication/Login\";\n//   import Signup from \"../components/Authentication/Signup\";\n  \n//   function Homepage() {\n// \tconst history = useHistory();\n  \n// \tuseEffect(() => {\n// \t  const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n// \t  if (user) history.push(\"/chats\");\n// \t}, [history]);\n  \n// \tconst showTestNotification = () => {\n// \t  if (\"Notification\" in window && Notification.permission === \"granted\") {\n// \t\tnew Notification(\"🔔 Talk-A-Tive Test\", {\n// \t\t  body: \"Notifications are working perfectly!\",\n// \t\t  icon: \"/favicon.ico\",\n// \t\t});\n// \t  } else {\n// \t\talert(\"Please enable notifications first!\");\n// \t  }\n// \t};\n  \n// \treturn (\n// \t  <Container maxW=\"xl\" centerContent>\n// \t\t<Box\n// \t\t  d=\"flex\"\n// \t\t  justifyContent=\"center\"\n// \t\t  p={3}\n// \t\t  bg=\"white\"\n// \t\t  w=\"100%\"\n// \t\t  m=\"40px 0 15px 0\"\n// \t\t  borderRadius=\"lg\"\n// \t\t  borderWidth=\"1px\"\n// \t\t>\n// \t\t  <Flex direction=\"column\" align=\"center\">\n// \t\t\t<Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n// \t\t\t  Talk-A-Tive\n// \t\t\t</Text>\n// \t\t\t{/* Temporary test button - remove after testing */}\n// \t\t\t<Button \n// \t\t\t  onClick={showTestNotification}\n// \t\t\t  colorScheme=\"teal\"\n// \t\t\t  size=\"sm\"\n// \t\t\t  mt={2}\n// \t\t\t>\n// \t\t\t  Test Notifications\n// \t\t\t</Button>\n// \t\t  </Flex>\n// \t\t</Box>\n// \t\t<Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n// \t\t  <Tabs isFitted variant=\"soft-rounded\">\n// \t\t\t<TabList mb=\"1em\">\n// \t\t\t  <Tab>Login</Tab>\n// \t\t\t  <Tab>Sign Up</Tab>\n// \t\t\t</TabList>\n// \t\t\t<TabPanels>\n// \t\t\t  <TabPanel>\n// \t\t\t\t<Login />\n// \t\t\t  </TabPanel>\n// \t\t\t  <TabPanel>\n// \t\t\t\t<Signup />\n// \t\t\t  </TabPanel>\n// \t\t\t</TabPanels>\n// \t\t  </Tabs>\n// \t\t</Box>\n// \t  </Container>\n// \t);\n//   }\n  \n//   export default Homepage;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","// File: ProfileModal.js\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  Text,\n  Image,\n  useDisclosure,\n  IconButton,\n  Box,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport { ViewIcon } from \"@chakra-ui/icons\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const bgGlass = useColorModeValue(\n    \"rgba(255, 255, 255, 0.4)\",\n    \"rgba(32, 32, 35, 0.35)\"\n  );\n  const borderGlass = useColorModeValue(\n    \"1px solid rgba(0, 0, 0, 0.15)\",\n    \"1px solid rgba(255, 255, 255, 0.1)\"\n  );\n\n  return (\n    <>\n      {children ? (\n        <Box onClick={onOpen} cursor=\"pointer\">\n          {children}\n        </Box>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n\n      <Modal isOpen={isOpen} onClose={onClose} isCentered size=\"sm\">\n        <ModalOverlay />\n        <ModalContent\n          backdropFilter=\"blur(12px)\"\n          background={bgGlass}\n          border={borderGlass}\n          borderRadius=\"2xl\"\n          boxShadow=\"lg\"\n        >\n          <ModalHeader\n            fontSize=\"2xl\"\n            fontFamily=\"Work sans\"\n            textAlign=\"center\"\n            color={useColorModeValue(\"gray.800\", \"whiteAlpha.900\")}\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody display=\"flex\" flexDirection=\"column\" alignItems=\"center\" pb={6}>\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n              mb={4}\n              border=\"4px solid white\"\n              shadow=\"md\"\n            />\n            <Text fontSize=\"lg\" fontFamily=\"Work sans\">\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import {\r\n\tModal,\r\n\tModalOverlay,\r\n\tModalContent,\r\n\tModalHeader,\r\n\tModalFooter,\r\n\tModalBody,\r\n\tModalCloseButton,\r\n\tButton,\r\n\tInput,\r\n\tTextarea,\r\n\tRadio,\r\n\tRadioGroup,\r\n\tStack,\r\n\tuseToast,\r\n  } from \"@chakra-ui/react\";\r\n  import { useEffect, useState } from \"react\";\r\n  import axios from \"axios\";\r\n  import { ChatState } from \"../../Context/ChatProvider\";\r\n  \r\n  const ReminderModal = ({ isOpen, onClose, message }) => {\r\n\tconst { selectedChat, user } = ChatState();\r\n\tconst toast = useToast();\r\n  \r\n\tconst [reminderText, setReminderText] = useState(message || \"\");\r\n\tconst [dueAt, setDueAt] = useState(\"\");\r\n\tconst [type, setType] = useState(\"me\");\r\n\tconst [loading, setLoading] = useState(false);\r\n  \r\n\tuseEffect(() => {\r\n\t  setReminderText(message || \"\");\r\n\t}, [message]);\r\n  \r\n\t// const handleSubmit = async () => {\r\n\t//   if (!reminderText || !dueAt) {\r\n\t// \ttoast({\r\n\t// \t  title: \"All fields required\",\r\n\t// \t  status: \"warning\",\r\n\t// \t  duration: 3000,\r\n\t// \t  isClosable: true,\r\n\t// \t});\r\n\t// \treturn;\r\n\t//   }\r\n  \r\n\t//   try {\r\n\t// \tsetLoading(true);\r\n\t// \tconst config = {\r\n\t// \t  headers: {\r\n\t// \t\tAuthorization: `Bearer ${user.token}`,\r\n\t// \t  },\r\n\t// \t};\r\n  \r\n\t// \tawait axios.post(\r\n\t// \t  \"/api/reminders\", // ✅ Corrected route\r\n\t// \t  {\r\n\t// \t\tmessage: reminderText,\r\n\t// \t\tdueAt,\r\n\t// \t\ttype,\r\n\t// \t\tchatId: selectedChat._id, // ✅ Corrected key name\r\n\t// \t  },\r\n\t// \t  config\r\n\t// \t);\r\n\t// \t   // ✅ Schedule local notification\r\n\t// \t   if (\r\n\t// \t\t\"Notification\" in window &&\r\n\t// \t\tNotification.permission === \"granted\" &&\r\n\t// \t\t\"serviceWorker\" in navigator\r\n\t// \t  ) {\r\n\t// \t\tconst delay = new Date(dueAt).getTime() - Date.now();\r\n\t// \t\tif (delay > 0) {\r\n\t// \t\t  setTimeout(async () => {\r\n\t// \t\t\tconst registration = await navigator.serviceWorker.ready;\r\n\t// \t\t\tregistration.showNotification(\"🔔 Reminder\", {\r\n\t// \t\t\t  body: reminderText,\r\n\t// \t\t\t  icon: \"https://cdn-icons-png.flaticon.com/512/786/786197.png\",\r\n\t// \t\t\t  tag: `reminder-${Date.now()}`,\r\n\t// \t\t\t  renotify: true,\r\n\t// \t\t\t  actions: [\r\n\t// \t\t\t\t{ action: \"mark-done\", title: \"✔️ Mark as Done\" },\r\n\t// \t\t\t\t{ action: \"remind-again\", title: \"🔁 Remind Me Again\" },\r\n\t// \t\t\t  ],\r\n\t// \t\t\t  data: {\r\n\t// \t\t\t\ttoken: user.token,\r\n\t// \t\t\t\treminderText,\r\n\t// \t\t\t  },\r\n\t// \t\t\t});\r\n\t// \t\t  }, delay);\r\n\t// \t\t}\r\n\t// \t  }\r\n  \r\n\t// \ttoast({\r\n\t// \t  title: \"Reminder created\",\r\n\t// \t  status: \"success\",\r\n\t// \t  duration: 3000,\r\n\t// \t  isClosable: true,\r\n\t// \t});\r\n  \r\n\t// \tsetReminderText(\"\");\r\n\t// \tsetDueAt(\"\");\r\n\t// \tsetType(\"me\");\r\n\t// \tonClose();\r\n\t//   } catch (error) {\r\n\t// \ttoast({\r\n\t// \t  title: \"Error\",\r\n\t// \t  description:\r\n\t// \t\terror.response?.data?.message || \"Could not set reminder\",\r\n\t// \t  status: \"error\",\r\n\t// \t  duration: 3000,\r\n\t// \t  isClosable: true,\r\n\t// \t});\r\n\t//   } finally {\r\n\t// \tsetLoading(false);\r\n\t//   }\r\n\t// };\r\n\t// const handleSubmit = async () => {\r\n\t// \tif (!reminderText || !dueAt) {\r\n\t// \t  toast({\r\n\t// \t\ttitle: \"All fields required\",\r\n\t// \t\tstatus: \"warning\",\r\n\t// \t\tduration: 3000,\r\n\t// \t\tisClosable: true,\r\n\t// \t  });\r\n\t// \t  return;\r\n\t// \t}\r\n\t  \r\n\t// \ttry {\r\n\t// \t  setLoading(true);\r\n\t// \t  const config = {\r\n\t// \t\theaders: {\r\n\t// \t\t  Authorization: `Bearer ${user.token}`,\r\n\t// \t\t},\r\n\t// \t  };\r\n\t  \r\n\t// \t  console.log({\r\n\t// \t\treminderText,\r\n\t// \t\tdueAt,\r\n\t// \t\ttype,\r\n\t// \t\tchatId: selectedChat?._id,\r\n\t// \t  });\r\n\t  \r\n\t// \t  await axios.post(\r\n\t// \t\t\"/api/reminders\",\r\n\t// \t\t{\r\n\t// \t\t  message: reminderText,\r\n\t// \t\t  dueAt,\r\n\t// \t\t  type,\r\n\t// \t\t  chatId: selectedChat._id,\r\n\t// \t\t},\r\n\t// \t\tconfig\r\n\t// \t  );\r\n\t  \r\n\t// \t  // Local notification logic...\r\n\t// \t  if (\r\n\t// \t\t\"Notification\" in window &&\r\n\t// \t\tNotification.permission === \"granted\" &&\r\n\t// \t\t\"serviceWorker\" in navigator\r\n\t// \t  ) {\r\n\t// \t\tconst delay = new Date(dueAt).getTime() - Date.now();\r\n\t// \t\tif (delay > 0) {\r\n\t// \t\t  setTimeout(async () => {\r\n\t// \t\t\tconst registration = await navigator.serviceWorker.ready;\r\n\t// \t\t\tregistration.showNotification(\"🔔 Reminder\", {\r\n\t// \t\t\t  body: reminderText,\r\n\t// \t\t\t  icon: \"https://cdn-icons-png.flaticon.com/512/786/786197.png\",\r\n\t// \t\t\t  tag: `reminder-${Date.now()}`,\r\n\t// \t\t\t  renotify: true,\r\n\t// \t\t\t  actions: [\r\n\t// \t\t\t\t{ action: \"mark-done\", title: \"✔️ Mark as Done\" },\r\n\t// \t\t\t\t{ action: \"remind-again\", title: \"🔁 Remind Me Again\" },\r\n\t// \t\t\t  ],\r\n\t// \t\t\t  data: {\r\n\t// \t\t\t\ttoken: user.token,\r\n\t// \t\t\t\treminderText,\r\n\t// \t\t\t  },\r\n\t// \t\t\t});\r\n\t// \t\t  }, delay);\r\n\t// \t\t}\r\n\t// \t  }\r\n\t  \r\n\t// \t  toast({\r\n\t// \t\ttitle: \"Reminder created\",\r\n\t// \t\tstatus: \"success\",\r\n\t// \t\tduration: 3000,\r\n\t// \t\tisClosable: true,\r\n\t// \t  });\r\n\t  \r\n\t// \t  setReminderText(\"\");\r\n\t// \t  setDueAt(\"\");\r\n\t// \t  setType(\"me\");\r\n\t// \t  onClose();\r\n\t// \t} catch (error) {\r\n\t// \t  console.error(\"Reminder creation error:\", error.response?.data || error);\r\n\t// \t  toast({\r\n\t// \t\ttitle: \"Error\",\r\n\t// \t\tdescription:\r\n\t// \t\t  error.response?.data?.message || \"Could not set reminder\",\r\n\t// \t\tstatus: \"error\",\r\n\t// \t\tduration: 3000,\r\n\t// \t\tisClosable: true,\r\n\t// \t  });\r\n\t// \t} finally {\r\n\t// \t  setLoading(false);\r\n\t// \t}\r\n\t//   };\r\n\tconst handleSubmit = async () => {\r\n\t\tif (!reminderText || !dueAt || (type === \"us\" && !selectedChat?._id)) {\r\n\t\t  toast({\r\n\t\t\ttitle: \"All fields required\",\r\n\t\t\tstatus: \"warning\",\r\n\t\t\tduration: 3000,\r\n\t\t\tisClosable: true,\r\n\t\t  });\r\n\t\t  return;\r\n\t\t}\r\n\t  \r\n\t\ttry {\r\n\t\t  setLoading(true);\r\n\t  \r\n\t\t  const config = {\r\n\t\t\theaders: {\r\n\t\t\t  Authorization: `Bearer ${user.token}`,\r\n\t\t\t},\r\n\t\t  };\r\n\t  \r\n\t\t  const payload = {\r\n\t\t\tmessage: reminderText,\r\n\t\t\tdueAt,\r\n\t\t\ttype,\r\n\t\t\tchatId: type === \"us\" ? selectedChat._id : undefined,\r\n\t\t  };\r\n\t  \r\n\t\t  await axios.post(\"/api/reminders\", payload, config);\r\n\t  \r\n\t\t  // ✅ Schedule local notification if permission is granted\r\n\t\t  if (\r\n\t\t\t\"Notification\" in window &&\r\n\t\t\tNotification.permission === \"granted\" &&\r\n\t\t\t\"serviceWorker\" in navigator\r\n\t\t  ) {\r\n\t\t\tconst delay = new Date(dueAt).getTime() - Date.now();\r\n\t\t\tif (delay > 0) {\r\n\t\t\t  setTimeout(async () => {\r\n\t\t\t\tconst registration = await navigator.serviceWorker.ready;\r\n\t\t\t\tregistration.showNotification(\"🔔 Reminder\", {\r\n\t\t\t\t  body: reminderText,\r\n\t\t\t\t  icon: \"https://cdn-icons-png.flaticon.com/512/786/786197.png\",\r\n\t\t\t\t  tag: `reminder-${Date.now()}`,\r\n\t\t\t\t  renotify: true,\r\n\t\t\t\t  actions: [\r\n\t\t\t\t\t{ action: \"mark-done\", title: \"✔️ Mark as Done\" },\r\n\t\t\t\t\t{ action: \"remind-again\", title: \"🔁 Remind Me Again\" },\r\n\t\t\t\t  ],\r\n\t\t\t\t  data: {\r\n\t\t\t\t\ttoken: user.token,\r\n\t\t\t\t\treminderText,\r\n\t\t\t\t  },\r\n\t\t\t\t});\r\n\t\t\t  }, delay);\r\n\t\t\t}\r\n\t\t  }\r\n\t  \r\n\t\t  toast({\r\n\t\t\ttitle: \"Reminder created\",\r\n\t\t\tstatus: \"success\",\r\n\t\t\tduration: 3000,\r\n\t\t\tisClosable: true,\r\n\t\t  });\r\n\t  \r\n\t\t  // Reset form\r\n\t\t  setReminderText(\"\");\r\n\t\t  setDueAt(\"\");\r\n\t\t  setType(\"me\");\r\n\t\t  onClose();\r\n\t\t} catch (error) {\r\n\t\t  console.error(\"Reminder creation error:\", error.response?.data || error);\r\n\t\t  toast({\r\n\t\t\ttitle: \"Error\",\r\n\t\t\tdescription:\r\n\t\t\t  error.response?.data?.message || \"Could not set reminder\",\r\n\t\t\tstatus: \"error\",\r\n\t\t\tduration: 3000,\r\n\t\t\tisClosable: true,\r\n\t\t  });\r\n\t\t} finally {\r\n\t\t  setLoading(false);\r\n\t\t}\r\n\t  };\r\n\t\t\r\n  \r\n\treturn (\r\n\t  <Modal isOpen={isOpen} onClose={onClose} size=\"md\" isCentered>\r\n\t\t<ModalOverlay />\r\n\t\t<ModalContent>\r\n\t\t  <ModalHeader>Set a Reminder</ModalHeader>\r\n\t\t  <ModalCloseButton />\r\n\t\t  <ModalBody>\r\n\t\t\t<Textarea\r\n\t\t\t  placeholder=\"Reminder message...\"\r\n\t\t\t  value={reminderText}\r\n\t\t\t  onChange={(e) => setReminderText(e.target.value)}\r\n\t\t\t  mb={3}\r\n\t\t\t/>\r\n\t\t\t<Input\r\n\t\t\t  type=\"datetime-local\"\r\n\t\t\t  value={dueAt}\r\n\t\t\t  onChange={(e) => setDueAt(e.target.value)}\r\n\t\t\t  mb={3}\r\n\t\t\t/>\r\n\t\t\t<RadioGroup onChange={setType} value={type}>\r\n\t\t\t  <Stack direction=\"row\">\r\n\t\t\t\t<Radio value=\"me\">Private</Radio>\r\n\t\t\t\t<Radio value=\"us\">Public</Radio>\r\n\t\t\t  </Stack>\r\n\t\t\t</RadioGroup>\r\n\t\t  </ModalBody>\r\n  \r\n\t\t  <ModalFooter>\r\n\t\t\t<Button variant=\"ghost\" mr={3} onClick={onClose}>\r\n\t\t\t  Cancel\r\n\t\t\t</Button>\r\n\t\t\t<Button\r\n\t\t\t  colorScheme=\"teal\"\r\n\t\t\t  onClick={handleSubmit}\r\n\t\t\t  isLoading={loading}\r\n\t\t\t>\r\n\t\t\t  Save\r\n\t\t\t</Button>\r\n\t\t  </ModalFooter>\r\n\t\t</ModalContent>\r\n\t  </Modal>\r\n\t);\r\n  };\r\n  \r\n  export default ReminderModal;\r\n\r\n\r\n// import {\r\n// \tModal,\r\n// \tModalOverlay,\r\n// \tModalContent,\r\n// \tModalHeader,\r\n// \tModalBody,\r\n// \tModalCloseButton,\r\n// \tuseDisclosure,\r\n// \tButton,\r\n// \tBox,\r\n// \tText,\r\n// \tStack,\r\n// \tIconButton,\r\n// \tFlex,\r\n// \tDivider,\r\n//   } from \"@chakra-ui/react\";\r\n//   import { CheckIcon, RepeatIcon, DeleteIcon } from \"@chakra-ui/icons\";\r\n//   import { useEffect, useState } from \"react\";\r\n//   import axios from \"axios\";\r\n//   import { ChatState } from \"../../Context/ChatProvider\";\r\n  \r\n//   const ReminderListModal = () => {\r\n// \tconst { isOpen, onOpen, onClose } = useDisclosure();\r\n// \tconst { user } = ChatState();\r\n// \tconst [reminders, setReminders] = useState([]);\r\n  \r\n// \tconst fetchReminders = async () => {\r\n// \t  try {\r\n// \t\tconst config = {\r\n// \t\t  headers: { Authorization: `Bearer ${user.token}` },\r\n// \t\t};\r\n// \t\tconst { data } = await axios.get(\"/api/reminders/user\", config);\r\n// \t\tsetReminders(data);\r\n// \t  } catch (error) {\r\n// \t\tconsole.error(\"Error fetching reminders\", error);\r\n// \t  }\r\n// \t};\r\n  \r\n// \tconst handleMarkAsDone = async (id) => {\r\n// \t  try {\r\n// \t\tawait axios.put(`/api/reminder/${id}/mark-done`, {}, {\r\n// \t\t  headers: { Authorization: `Bearer ${user.token}` },\r\n// \t\t});\r\n// \t\tfetchReminders();\r\n// \t  } catch (err) {\r\n// \t\tconsole.error(\"Error marking as done\", err);\r\n// \t  }\r\n// \t};\r\n  \r\n// \tconst handleRemindAgain = async (id) => {\r\n// \t  try {\r\n// \t\tawait axios.put(`/api/reminder/${id}/snooze`, {}, {\r\n// \t\t  headers: { Authorization: `Bearer ${user.token}` },\r\n// \t\t});\r\n// \t\tfetchReminders();\r\n// \t  } catch (err) {\r\n// \t\tconsole.error(\"Error snoozing reminder\", err);\r\n// \t  }\r\n// \t};\r\n  \r\n// \tconst handleDelete = async (id) => {\r\n// \t  try {\r\n// \t\tawait axios.delete(`/api/reminder/${id}`, {\r\n// \t\t  headers: { Authorization: `Bearer ${user.token}` },\r\n// \t\t});\r\n// \t\tfetchReminders();\r\n// \t  } catch (err) {\r\n// \t\tconsole.error(\"Error deleting reminder\", err);\r\n// \t  }\r\n// \t};\r\n  \r\n// \tuseEffect(() => {\r\n// \t  if (isOpen) fetchReminders();\r\n// \t}, [isOpen]);\r\n  \r\n// \treturn (\r\n// \t  <>\r\n\t\t\r\n  \r\n// \t\t<Modal isOpen={isOpen} onClose={onClose} size=\"md\" isCentered>\r\n// \t\t  <ModalOverlay />\r\n// \t\t  <ModalContent>\r\n\t\t\t\r\n// \t\t\t<ModalCloseButton />\r\n// \t\t\t<ModalBody>\r\n// \t\t\t  <Stack spacing={3}>\r\n// \t\t\t\t{reminders.length === 0 ? (\r\n// \t\t\t\t  <Text>No reminders found</Text>\r\n// \t\t\t\t) : (\r\n// \t\t\t\t  reminders.map((reminder) => (\r\n// \t\t\t\t\t<Box\r\n// \t\t\t\t\t  key={reminder._id}\r\n// \t\t\t\t\t  p={3}\r\n// \t\t\t\t\t  borderWidth=\"1px\"\r\n// \t\t\t\t\t  borderRadius=\"md\"\r\n// \t\t\t\t\t>\r\n// \t\t\t\t\t  <Text fontWeight=\"bold\">{reminder.message}</Text>\r\n// \t\t\t\t\t  <Text fontSize=\"sm\" color=\"gray.500\">\r\n// \t\t\t\t\t\t{new Date(reminder.dueAt).toLocaleString()} ·{\" \"}\r\n// \t\t\t\t\t\t{reminder.type === \"me\" ? \"Private\" : \"Public\"}\r\n// \t\t\t\t\t  </Text>\r\n  \r\n// \t\t\t\t\t  {/* Action Buttons */}\r\n// \t\t\t\t\t  <Flex mt={2} gap={3}>\r\n// \t\t\t\t\t\t<IconButton\r\n// \t\t\t\t\t\t  size=\"sm\"\r\n// \t\t\t\t\t\t  colorScheme=\"green\"\r\n// \t\t\t\t\t\t  icon={<CheckIcon />}\r\n// \t\t\t\t\t\t  onClick={() => handleMarkAsDone(reminder._id)}\r\n// \t\t\t\t\t\t  aria-label=\"Mark as done\"\r\n// \t\t\t\t\t\t/>\r\n// \t\t\t\t\t\t<IconButton\r\n// \t\t\t\t\t\t  size=\"sm\"\r\n// \t\t\t\t\t\t  colorScheme=\"blue\"\r\n// \t\t\t\t\t\t  icon={<RepeatIcon />}\r\n// \t\t\t\t\t\t  onClick={() => handleRemindAgain(reminder._id)}\r\n// \t\t\t\t\t\t  aria-label=\"Remind me again\"\r\n// \t\t\t\t\t\t/>\r\n// \t\t\t\t\t\t<IconButton\r\n// \t\t\t\t\t\t  size=\"sm\"\r\n// \t\t\t\t\t\t  colorScheme=\"red\"\r\n// \t\t\t\t\t\t  icon={<DeleteIcon />}\r\n// \t\t\t\t\t\t  onClick={() => handleDelete(reminder._id)}\r\n// \t\t\t\t\t\t  aria-label=\"Delete reminder\"\r\n// \t\t\t\t\t\t/>\r\n// \t\t\t\t\t  </Flex>\r\n// \t\t\t\t\t</Box>\r\n// \t\t\t\t  ))\r\n// \t\t\t\t)}\r\n// \t\t\t  </Stack>\r\n// \t\t\t</ModalBody>\r\n// \t\t  </ModalContent>\r\n// \t\t</Modal>\r\n// \t  </>\r\n// \t);\r\n//   };\r\n  \r\n//   export default ReminderListModal;\r\n  ","import { useState } from \"react\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  MenuItem,\r\n  IconButton,\r\n  useDisclosure,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { BellIcon, EditIcon } from \"@chakra-ui/icons\";\r\nimport { AddIcon } from \"@chakra-ui/icons\";\r\nimport ReminderModal from \"./ReminderModal\";\r\n\r\nconst ReminderButton = ({ message }) => {\r\n  const [selectedMessage, setSelectedMessage] = useState(null);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const toast = useToast();\r\n\r\n  const handleSetReminder = () => {\r\n    setSelectedMessage(message);\r\n    onOpen();\r\n  };\r\n\r\n  const handleCustomReminder = () => {\r\n    setSelectedMessage(null); // no pre-filled message\r\n    onOpen();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Menu isLazy>\r\n  <MenuButton\r\n    as={IconButton}\r\n    icon={<BellIcon />}\r\n    size=\"sm\"\r\n    variant=\"ghost\"\r\n    _hover={{ bg: \"gray.100\" }}\r\n    aria-label=\"Set Reminder\"\r\n  />\r\n  <MenuList zIndex={9999} >\r\n    <MenuItem icon={<EditIcon />} onClick={handleSetReminder}>\r\n      Set Reminder from Message\r\n    </MenuItem>\r\n  </MenuList>\r\n</Menu>\r\n\r\n      <ReminderModal\r\n        isOpen={isOpen}\r\n        onClose={onClose}\r\n        message={selectedMessage}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReminderButton;\r\n","// // // // // // import { Avatar } from \"@chakra-ui/avatar\";\n// // // // // // import { Tooltip } from \"@chakra-ui/tooltip\";\n// // // // // // import ScrollableFeed from \"react-scrollable-feed\";\n// // // // // // import {\n// // // // // //   isLastMessage,\n// // // // // //   isSameSender,\n// // // // // //   isSameSenderMargin,\n// // // // // //   isSameUser,\n// // // // // // } from \"../config/ChatLogics\";\n// // // // // // import { ChatState } from \"../Context/ChatProvider\";\n// // // // // // import ReminderButton from \"./reminders/ReminderButton\"; // Make sure this path is correct\n\n// // // // // // const ScrollableChat = ({ messages }) => {\n// // // // // //   const { user } = ChatState();\n\n// // // // // //   return (\n// // // // // //     <ScrollableFeed>\n// // // // // //       {messages &&\n// // // // // //         messages.map((m, i) => (\n// // // // // //           <div style={{ display: \"flex\", alignItems: \"center\" }} key={m._id}>\n// // // // // //             {(isSameSender(messages, m, i, user._id) ||\n// // // // // //               isLastMessage(messages, i, user._id)) && (\n// // // // // //               <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n// // // // // //                 <Avatar\n// // // // // //                   mt=\"7px\"\n// // // // // //                   mr={1}\n// // // // // //                   size=\"sm\"\n// // // // // //                   cursor=\"pointer\"\n// // // // // //                   name={m.sender.name}\n// // // // // //                   src={m.sender.pic}\n// // // // // //                 />\n// // // // // //               </Tooltip>\n// // // // // //             )}\n\n// // // // // //             {/* Message Bubble with Reminder Icon */}\n// // // // // //             <div\n// // // // // //               style={{\n// // // // // //                 position: \"relative\",\n// // // // // //                 display: \"flex\",\n// // // // // //                 alignItems: \"center\",\n\t\t\t\t\n// // // // // //               }}\n// // // // // //             >\n// // // // // //               <span\n// // // // // //                 style={{\n// // // // // //                   backgroundColor: `${\n// // // // // //                     m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n// // // // // //                   }`,\n// // // // // //                   marginLeft: isSameSenderMargin(messages, m, i, user._id),\n// // // // // //                   marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n// // // // // //                   borderRadius: \"20px\",\n// // // // // //                   padding: \"5px 15px\",\n// // // // // //                   maxWidth: \"75%\",\n// // // // // //                   position: \"relative\",\n// // // // // //                 }}\n// // // // // //               >\n// // // // // //                 {m.content}\n\n// // // // // //                 {/* 🔔 Reminder Button */}\n// // // // // //                 <div style={{ position: \"absolute\", top: \"4px\", right: \"6px\" }}>\n// // // // // //                   <ReminderButton message={m.content} />\n// // // // // //                 </div>\n// // // // // //               </span>\n// // // // // //             </div>\n// // // // // //           </div>\n// // // // // //         ))}\n// // // // // //     </ScrollableFeed>\n// // // // // //   );\n// // // // // // };\n\n// // // // // // export default ScrollableChat;\n// // // // // import { Avatar } from \"@chakra-ui/avatar\";\n// // // // // import { Tooltip } from \"@chakra-ui/tooltip\";\n// // // // // import ScrollableFeed from \"react-scrollable-feed\";\n// // // // // import {\n// // // // //   isLastMessage,\n// // // // //   isSameSender,\n// // // // //   isSameSenderMargin,\n// // // // //   isSameUser,\n// // // // // } from \"../config/ChatLogics\";\n// // // // // import { ChatState } from \"../Context/ChatProvider\";\n// // // // // import ReminderButton from \"./reminders/ReminderButton\"; // Ensure this path is correct\n\n// // // // // const ScrollableChat = ({ messages }) => {\n// // // // //   const { user } = ChatState();\n\n// // // // //   return (\n// // // // //     <ScrollableFeed>\n// // // // //       {messages &&\n// // // // //         messages.map((m, i) => (\n// // // // //           <div style={{ display: \"flex\", alignItems: \"center\" }} key={m._id}>\n// // // // //             {(isSameSender(messages, m, i, user._id) ||\n// // // // //               isLastMessage(messages, i, user._id)) && (\n// // // // //               <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n// // // // //                 <Avatar\n// // // // //                   mt=\"7px\"\n// // // // //                   mr={1}\n// // // // //                   size=\"sm\"\n// // // // //                   cursor=\"pointer\"\n// // // // //                   name={m.sender.name}\n// // // // //                   src={m.sender.pic}\n// // // // //                 />\n// // // // //               </Tooltip>\n// // // // //             )}\n\n// // // // //             {/* Message bubble and reminder button */}\n// // // // //             <div\n// // // // //               style={{\n// // // // //                 position: \"relative\",\n// // // // //                 display: \"flex\",\n// // // // //                 alignItems: \"center\",\n// // // // //                 width: \"100%\", // helps maintain layout\n// // // // //               }}\n// // // // //             >\n// // // // //               <div\n// // // // //                 style={{\n// // // // //                   backgroundColor: `${\n// // // // //                     m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n// // // // //                   }`,\n// // // // //                   marginLeft: isSameSenderMargin(messages, m, i, user._id),\n// // // // //                   marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n// // // // //                   borderRadius: \"20px\",\n// // // // //                   padding: \"5px 35px 5px 15px\", // extra right padding for reminder icon\n// // // // //                   maxWidth: \"75%\",\n// // // // //                   position: \"relative\",\n// // // // //                   wordBreak: \"break-word\",\n// // // // //                 }}\n// // // // //               >\n// // // // //                 {m.content}\n\n// // // // //                 {/* 🔔 Reminder Button */}\n// // // // //                 <div\n// // // // //                   style={{\n// // // // //                     position: \"absolute\",\n// // // // //                     top: \"4px\",\n// // // // //                     right: \"8px\",\n// // // // //                     zIndex: 1,\n// // // // //                   }}\n// // // // //                 >\n// // // // //                   <ReminderButton message={m.content} />\n// // // // //                 </div>\n// // // // //               </div>\n// // // // //             </div>\n// // // // //           </div>\n// // // // //         ))}\n// // // // //     </ScrollableFeed>\n// // // // //   );\n// // // // // };\n\n// // // // // export default ScrollableChat;\n// // // // //\n\n// // // // // \n// // // // import { Avatar } from \"@chakra-ui/avatar\";\n// // // // import { Tooltip } from \"@chakra-ui/tooltip\";\n// // // // import ScrollableFeed from \"react-scrollable-feed\";\n// // // // import {\n// // // //   isLastMessage,\n// // // //   isSameSender,\n// // // //   isSameSenderMargin,\n// // // //   isSameUser,\n// // // // } from \"../config/ChatLogics\";\n// // // // import { ChatState } from \"../Context/ChatProvider\";\n// // // // import ReminderButton from \"./reminders/ReminderButton\"; // Ensure path is correct\n\n// // // // const ScrollableChat = ({ messages }) => {\n// // // //   const { user } = ChatState();\n\n// // // //   return (\n// // // //     <ScrollableFeed>\n// // // //       {messages &&\n// // // //         messages.map((m, i) => (\n// // // //           <div\n// // // //             key={m._id}\n// // // //             style={{\n// // // //               display: \"flex\",\n// // // //               alignItems: \"flex-start\",\n// // // //               marginBottom: \"5px\",\n// // // //               overflowWrap: \"anywhere\",\n// // // //               wordBreak: \"break-word\",\n// // // //               maxWidth: \"100%\",\n// // // //             }}\n// // // //           >\n// // // //             {(isSameSender(messages, m, i, user._id) ||\n// // // //               isLastMessage(messages, i, user._id)) && (\n// // // //               <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n// // // //                 <Avatar\n// // // //                   mt=\"7px\"\n// // // //                   mr={1}\n// // // //                   size=\"sm\"\n// // // //                   cursor=\"pointer\"\n// // // //                   name={m.sender.name}\n// // // //                   src={m.sender.pic}\n// // // //                 />\n// // // //               </Tooltip>\n// // // //             )}\n\n// // // //             <div\n// // // //               style={{\n// // // //                 position: \"relative\",\n// // // //                 display: \"flex\",\n// // // //                 alignItems: \"center\",\n// // // //                 maxWidth: \"100%\",\n// // // //               }}\n// // // //             >\n// // // //               <span\n// // // //                 style={{\n// // // //                   backgroundColor: `${\n// // // //                     m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n// // // //                   }`,\n// // // //                   marginLeft: isSameSenderMargin(messages, m, i, user._id),\n// // // //                   marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n// // // //                   borderRadius: \"20px\",\n// // // //                   padding: \"5px 15px\",\n// // // //                   maxWidth: \"100%\",\n// // // //                   position: \"relative\",\n// // // //                   overflowWrap: \"anywhere\",\n// // // //                   wordBreak: \"break-word\",\n// // // //                   whiteSpace: \"pre-wrap\",\n// // // //                 }}\n// // // //               >\n// // // //                 {m.content}\n\n// // // //                 {/* 🔔 Reminder Button */}\n// // // //                 <div\n// // // //                   style={{\n// // // //                     position: \"absolute\",\n// // // //                     top: \"4px\",\n// // // //                     right: \"6px\",\n// // // //                   }}\n// // // //                 >\n// // // //                   <ReminderButton message={m.content} />\n// // // //                 </div>\n// // // //               </span>\n// // // //             </div>\n// // // //           </div>\n// // // //         ))}\n// // // //     </ScrollableFeed>\n// // // //   );\n// // // // };\n\n// // // // export default ScrollableChat;\n\n\n\n// // // import { Avatar } from \"@chakra-ui/avatar\";\n// // // import { Tooltip } from \"@chakra-ui/tooltip\";\n// // // import ScrollableFeed from \"react-scrollable-feed\";\n// // // import {\n// // //   isLastMessage,\n// // //   isSameSender,\n// // //   isSameSenderMargin,\n// // //   isSameUser,\n// // // } from \"../config/ChatLogics\";\n// // // import { ChatState } from \"../Context/ChatProvider\";\n// // // import ReminderButton from \"./reminders/ReminderButton\"; // Ensure path is correct\n\n// // // const ScrollableChat = ({ messages }) => {\n// // //   const { user } = ChatState();\n\n// // //   return (\n// // //     <ScrollableFeed>\n// // //       {messages &&\n// // //         messages.map((m, i) => {\n// // //           const isOwnMessage = m.sender._id === user._id;\n\n// // //           return (\n// // //             <div\n// // //               key={m._id}\n// // //               style={{\n// // //                 display: \"flex\",\n// // //                 justifyContent: isOwnMessage ? \"flex-end\" : \"flex-start\",\n// // //                 marginBottom: \"5px\",\n// // //                 overflowWrap: \"anywhere\",\n// // //               }}\n// // //             >\n// // //               {!isOwnMessage &&\n// // //                 (isSameSender(messages, m, i, user._id) ||\n// // //                   isLastMessage(messages, i, user._id)) && (\n// // //                   <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n// // //                     <Avatar\n// // //                       mt=\"7px\"\n// // //                       mr={1}\n// // //                       size=\"sm\"\n// // //                       cursor=\"pointer\"\n// // //                       name={m.sender.name}\n// // //                       src={m.sender.pic}\n// // //                     />\n// // //                   </Tooltip>\n// // //               )}\n\n// // //               <div\n// // //                 style={{\n// // //                   position: \"relative\",\n// // //                   maxWidth: \"75%\",\n// // //                   display: \"flex\",\n// // //                   flexDirection: \"column\",\n// // //                   alignItems: isOwnMessage ? \"flex-end\" : \"flex-start\",\n// // //                 }}\n// // //               >\n// // //                 <span\n// // //                   style={{\n// // //                     backgroundColor: isOwnMessage ? \"#BEE3F8\" : \"#B9F5D0\",\n// // //                     borderRadius: \"20px\",\n// // //                     padding: \"5px 15px\",\n// // //                     marginLeft: isSameSenderMargin(messages, m, i, user._id),\n// // //                     marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n// // //                     position: \"relative\",\n// // //                     overflowWrap: \"anywhere\",\n// // //                     wordBreak: \"break-word\",\n// // //                     whiteSpace: \"pre-wrap\",\n// // //                   }}\n// // //                 >\n// // //                   {m.content}\n\n// // //                   {/* 🔔 Reminder Button */}\n// // //                   <div\n// // //                     style={{\n// // //                       position: \"absolute\",\n// // //                       top: \"4px\",\n// // //                       right: \"6px\",\n// // //                     }}\n// // //                   >\n// // //                     <ReminderButton message={m.content} />\n// // //                   </div>\n// // //                 </span>\n// // //               </div>\n// // //             </div>\n// // //           );\n// // //         })}\n// // //     </ScrollableFeed>\n// // //   );\n// // // };\n\n// // // export default ScrollableChat;\n// // import { Avatar } from \"@chakra-ui/avatar\";\n// // import { Tooltip } from \"@chakra-ui/tooltip\";\n// // import ScrollableFeed from \"react-scrollable-feed\";\n// // import {\n// //   isLastMessage,\n// //   isSameSender,\n// //   isSameSenderMargin,\n// //   isSameUser,\n// // } from \"../config/ChatLogics\";\n// // import { ChatState } from \"../Context/ChatProvider\";\n// // import ReminderButton from \"./reminders/ReminderButton\";\n\n// // const ScrollableChat = ({ messages }) => {\n// //   const { user } = ChatState();\n\n// //   return (\n// //     <ScrollableFeed>\n// //       {messages &&\n// //         messages.map((m, i) => {\n// //           const isOwnMessage = m.sender._id === user._id;\n\n// //           return (\n// //             <div\n// //               key={m._id}\n// //               style={{\n// //                 display: \"flex\",\n// //                 justifyContent: isOwnMessage ? \"flex-end\" : \"flex-start\",\n// //                 marginBottom: \"6px\",\n// //               }}\n// //             >\n// //               {!isOwnMessage &&\n// //                 (isSameSender(messages, m, i, user._id) ||\n// //                   isLastMessage(messages, i, user._id)) && (\n// //                   <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n// //                     <Avatar\n// //                       mt=\"7px\"\n// //                       mr={1}\n// //                       size=\"sm\"\n// //                       cursor=\"pointer\"\n// //                       name={m.sender.name}\n// //                       src={m.sender.pic}\n// //                     />\n// //                   </Tooltip>\n// //               )}\n\n// //               {/* Bubble Container */}\n// //               <div\n// //                 style={{\n// //                   position: \"relative\",\n// //                   maxWidth: \"75%\",\n// //                   display: \"flex\",\n// //                   flexDirection: \"column\",\n// //                   alignItems: isOwnMessage ? \"flex-end\" : \"flex-start\",\n// //                 }}\n// //               >\n// //                 {/* Message Bubble with Hoverable Bell */}\n// //                 <div\n// //                   className=\"message-bubble\"\n// //                   style={{\n// //                     backgroundColor: isOwnMessage ? \"#BEE3F8\" : \"#B9F5D0\",\n// //                     borderRadius: \"20px\",\n// //                     padding: \"8px 15px\",\n// //                     marginLeft: isSameSenderMargin(messages, m, i, user._id),\n// //                     marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n// //                     position: \"relative\",\n// //                     overflowWrap: \"anywhere\",\n// //                     wordBreak: \"break-word\",\n// //                     whiteSpace: \"pre-wrap\",\n// //                   }}\n// //                 >\n// //                   {m.content}\n\n// //                   {/* Bell Icon on Hover */}\n// //                   <div\n// //                     className=\"reminder-icon\"\n// //                     style={{\n// //                       position: \"absolute\",\n// //                       top: \"6px\",\n// //                       right: \"8px\",\n// //                       display: \"none\",\n// //                     }}\n// //                   >\n// //                     <ReminderButton message={m.content} />\n// //                   </div>\n// //                 </div>\n// //               </div>\n// //             </div>\n// //           );\n// //         })}\n// //       <style>\n// //         {`\n// //           .message-bubble:hover .reminder-icon {\n// //             display: block;\n// //           }\n// //         `}\n// //       </style>\n// //     </ScrollableFeed>\n// //   );\n// // };\n\n// // export default ScrollableChat;\n// import { Avatar } from \"@chakra-ui/avatar\";\n// import { Tooltip } from \"@chakra-ui/tooltip\";\n// import ScrollableFeed from \"react-scrollable-feed\";\n// import {\n//   isLastMessage,\n//   isSameSender,\n//   isSameSenderMargin,\n//   isSameUser,\n// } from \"../config/ChatLogics\";\n// import { ChatState } from \"../Context/ChatProvider\";\n// import ReminderButton from \"./reminders/ReminderButton\";\n// import \"./ScrollableChat.css\"; // ✅ CSS file for hover styling\n\n// const ScrollableChat = ({ messages }) => {\n//   const { user } = ChatState();\n\n//   return (\n//     <ScrollableFeed>\n//       {messages &&\n//         messages.map((m, i) => {\n//           const isOwnMessage = m.sender._id === user._id;\n\n//           return (\n//             <div\n//               key={m._id}\n//               style={{\n//                 display: \"flex\",\n//                 justifyContent: isOwnMessage ? \"flex-end\" : \"flex-start\",\n//                 marginBottom: \"6px\",\n//               }}\n//             >\n//               {!isOwnMessage &&\n//                 (isSameSender(messages, m, i, user._id) ||\n//                   isLastMessage(messages, i, user._id)) && (\n//                   <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n//                     <Avatar\n//                       mt=\"7px\"\n//                       mr={1}\n//                       size=\"sm\"\n//                       cursor=\"pointer\"\n//                       name={m.sender.name}\n//                       src={m.sender.pic}\n//                     />\n//                   </Tooltip>\n//               )}\n\n//               <div\n//                 className=\"message-container\"\n//                 style={{\n//                   maxWidth: \"75%\",\n//                   position: \"relative\",\n//                 }}\n//               >\n//                 <span\n//                   className=\"message-bubble\"\n//                   style={{\n//                     backgroundColor: isOwnMessage ? \"#BEE3F8\" : \"#B9F5D0\",\n//                     borderRadius: \"20px\",\n//                     padding: \"8px 15px\",\n//                     marginLeft: isSameSenderMargin(messages, m, i, user._id),\n//                     marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n//                     display: \"inline-block\",\n//                     whiteSpace: \"pre-wrap\",\n//                     wordBreak: \"break-word\",\n//                   }}\n//                 >\n//                   {m.content}\n\n//                   <div className=\"reminder-icon\">\n//                     <ReminderButton message={m.content} />\n//                   </div>\n//                 </span>\n//               </div>\n//             </div>\n//           );\n//         })}\n//     </ScrollableFeed>\n//   );\n// };\n\n// export default ScrollableChat;\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport ReminderButton from \"./reminders/ReminderButton\";\nimport \"./ScrollableChat.css\"; // for hover styling\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => {\n          const isOwnMessage = m.sender._id === user._id;\n\n          return (\n            <div\n              className=\"chat-message-wrapper\"\n              key={m._id}\n              style={{\n                display: \"flex\",\n                justifyContent: isOwnMessage ? \"flex-end\" : \"flex-start\",\n                alignItems: \"center\",\n                gap: \"6px\",\n                marginBottom: \"6px\",\n              }}\n            >\n              {!isOwnMessage &&\n                (isSameSender(messages, m, i, user._id) ||\n                  isLastMessage(messages, i, user._id)) && (\n                  <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                    <Avatar\n                      mt=\"7px\"\n                      mr={1}\n                      size=\"sm\"\n                      cursor=\"pointer\"\n                      name={m.sender.name}\n                      src={m.sender.pic}\n                    />\n                  </Tooltip>\n              )}\n\n              <div className=\"chat-bubble-wrapper\">\n        <span\n  className=\"message-bubble\"\n style={{\n  backgroundColor: \"rgba(255, 255, 255, 0.15)\",\n  backdropFilter: \"blur(12px)\",\n  WebkitBackdropFilter: \"blur(12px)\",\n  border: \"1px solid rgba(255, 255, 255, 0.2)\",\n    color: isOwnMessage ? \"#f0f9ff\" : \"#e6fff2\",  // ✅ more visible\n  borderRadius: \"20px\",\n  padding: \"8px 12px\",\n  marginLeft: isSameSenderMargin(messages, m, i, user._id),\n  marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n  display: \"inline-block\",\n  whiteSpace: \"pre-wrap\",\n  wordBreak: \"break-word\",\n  fontSize: \"14px\",\n  maxWidth: \"75%\",\n  position: \"relative\",\n}}\n\n>\n  {m.content}\n\n  {/* Very small timestamp below message */}\n  <div\n    style={{\n      fontSize: \"9px\",\n      color: \"#666\",\n      textAlign: \"right\",\n      marginTop: \"4px\",\n    }}\n  >\n    {new Date(m.createdAt).toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    })}\n  </div>\n</span>\n\t\t\t\t\n\n                {/* Bell icon outside the message bubble */}\n                <div className=\"reminder-button-hover\">\n                  <ReminderButton message={m.content} />\n                </div>\n              </div>\n            </div>\n          );\n        })}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","// import { Avatar } from \"@chakra-ui/avatar\";\n// import { Box, Text } from \"@chakra-ui/layout\";\n// import { ChatState } from \"../../Context/ChatProvider\";\n\n// const UserListItem = ({ handleFunction }) => {\n//   const { user } = ChatState();\n\n//   return (\n//     <Box\n//       onClick={handleFunction}\n//       cursor=\"pointer\"\n//       bg=\"#E8E8E8\"\n//       _hover={{\n//         background: \"#38B2AC\",\n//         color: \"white\",\n//       }}\n//       w=\"100%\"\n//       d=\"flex\"\n//       alignItems=\"center\"\n//       color=\"black\"\n//       px={3}\n//       py={2}\n//       mb={2}\n//       borderRadius=\"lg\"\n//     >\n//       <Avatar\n//         mr={2}\n//         size=\"sm\"\n//         cursor=\"pointer\"\n//         name={user.name}\n//         src={user.pic}\n//       />\n//       <Box>\n//         <Text>{user.name}</Text>\n//         <Text fontSize=\"xs\">\n//           <b>Email : </b>\n//           {user.email}\n//         </Text>\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default UserListItem;\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\n\n// 🧼 NO need to import ChatState here\n// import { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ user, handleFunction }) => {\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      display=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email:</b> {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { useEffect, useState } from \"react\";\r\nimport {  RepeatClockIcon } from \"@chakra-ui/icons\";\r\n\r\nimport { CloseIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Box,\r\n  Text,\r\n  VStack,\r\n  Spinner,\r\n  useToast,\r\n  IconButton,\r\n  HStack,\r\n  Tooltip,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  Input,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  BellIcon,\r\n  RepeatIcon,\r\n  CheckIcon,\r\n  DeleteIcon,\r\n} from \"@chakra-ui/icons\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst ReminderSidebar = (z) => {\r\n  const { selectedChat, user } = ChatState();\r\n  const [reminders, setReminders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [snoozeDate, setSnoozeDate] = useState(\"\");\r\n  const [activeReminderId, setActiveReminderId] = useState(null);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [activeTab, setActiveTab] = useState(\"active\");\r\n  const [showSidebar, setShowSidebar] = useState(true);\r\n\r\n  const toast = useToast();\r\n\r\n const fetchReminders = async () => {\r\n  try {\r\n    setLoading(true);\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${user.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.get(\r\n    `/api/reminders/chat/${selectedChat._id}?status=${activeTab}`,\r\n      config\r\n    );\r\n\r\n    setReminders(data);\r\n  } catch (error) {\r\n    toast({\r\n      title: \"Failed to load reminders\",\r\n      description: error.response?.data?.message || error.message,\r\n      status: \"error\",\r\n      duration: 4000,\r\n      isClosable: true,\r\n    });\r\n    setReminders([]);\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n};\r\n\r\n\r\n  const handleMarkDone = async (id) => {\r\n  try {\r\n    const config = { headers: { Authorization: `Bearer ${user.token}` } };\r\n    await axios.put(`/api/reminders/${id}/toggle-done`, {}, config); // ✅ UPDATED ENDPOINT\r\n    fetchReminders(); // ✅ Refresh reminder list\r\n  } catch (err) {\r\n    toast({\r\n      title: \"Error\",\r\n      description: err.response?.data?.message || \"Could not toggle done status.\",\r\n      status: \"error\",\r\n      duration: 3000,\r\n      isClosable: true,\r\n    });\r\n  }\r\n};\r\n\r\n  const handleQuickSnooze = async (id) => {\r\n    try {\r\n      const config = { headers: { Authorization: `Bearer ${user.token}` } };\r\n      const newDate = new Date();\r\n      newDate.setMinutes(newDate.getMinutes() + 10);\r\n      await axios.put(`/api/reminders/${id}/reschedule`, { dueAt: newDate }, config);\r\n      fetchReminders();\r\n      toast({\r\n        title: \"Snoozed +10 minutes\",\r\n        status: \"success\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    } catch (err) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: err.response?.data?.message || \"Could not snooze reminder.\",\r\n        status: \"error\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleCustomSnooze = async () => {\r\n    if (!snoozeDate || !activeReminderId) return;\r\n    try {\r\n      const config = { headers: { Authorization: `Bearer ${user.token}` } };\r\n      await axios.put(\r\n        `/api/reminders/${activeReminderId}/reschedule`,\r\n        { dueAt: snoozeDate },\r\n        config\r\n      );\r\n      fetchReminders();\r\n      onClose();\r\n      setSnoozeDate(\"\");\r\n      setActiveReminderId(null);\r\n      toast({\r\n        title: \"Reminder snoozed\",\r\n        description: `New time set for ${moment(snoozeDate).format(\"lll\")}`,\r\n        status: \"success\",\r\n        duration: 4000,\r\n        isClosable: true,\r\n      });\r\n    } catch (err) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: err.response?.data?.message || \"Could not snooze.\",\r\n        status: \"error\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    if (!window.confirm(\"Are you sure you want to delete this reminder?\")) return;\r\n    try {\r\n      const config = { headers: { Authorization: `Bearer ${user.token}` } };\r\n      await axios.delete(`/api/reminders/${id}`, config);\r\n      fetchReminders();\r\n    } catch (err) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: err.response?.data?.message || \"Could not delete reminder.\",\r\n        status: \"error\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  const formatTimeAgo = (timestamp) => moment(timestamp).fromNow();\r\n  const formatDueTime = (timestamp) => moment(timestamp).format(\"LT\");\r\n\r\n useEffect(() => {\r\n  if (selectedChat) fetchReminders();\r\n}, [selectedChat, activeTab]);\r\nreturn showSidebar ? (\r\n  <Box\r\n    position=\"fixed\"\r\n    top=\"0\"\r\n    right=\"0\"\r\n    height=\"90vh\"\r\n    maxHeight=\"100vh\"\r\n    width={{ base: \"100%\", md: \"350px\" }}\r\n    bg=\"rgba(0, 102, 204, 0.83)\"\r\n    backdropFilter=\"blur(16px) saturate(180%)\"\r\n    borderLeft=\"1px solid rgba(0, 128, 0, 0.3)\"\r\n    boxShadow=\"lg\"\r\n    border=\"1px solid rgba(255, 255, 255, 0.2)\"\r\n    zIndex=\"30\"\r\n    display=\"flex\"\r\n    flexDirection=\"column\"\r\n    borderRadius=\"md\"\r\n    overflow=\"hidden\"\r\n  >\r\n    {/* 🔵 Top Controls */}\r\n    <Box\r\n      bg=\"white\"\r\n      borderBottom=\"1px solid #eee\"\r\n      flexShrink={0}\r\n      p={3}\r\n      borderTopRadius=\"md\"\r\n    >\r\n      <HStack justify=\"space-between\" w=\"100%\" spacing={2}>\r\n        <Text fontSize=\"l\" fontWeight=\"bold\" color=\"black\">\r\n          Reminders\r\n        </Text>\r\n\r\n        <HStack>\r\n          <Button\r\n            size=\"sm\"\r\n            variant={activeTab === \"active\" ? \"solid\" : \"ghost\"}\r\n            colorScheme=\"green\"\r\n            onClick={() => setActiveTab(\"active\")}\r\n          >\r\n            Active\r\n          </Button>\r\n          <Button\r\n            size=\"sm\"\r\n            variant={activeTab === \"done\" ? \"solid\" : \"ghost\"}\r\n            colorScheme=\"gray\"\r\n            onClick={() => setActiveTab(\"done\")}\r\n          >\r\n            Done\r\n          </Button>\r\n        </HStack>\r\n\r\n        <HStack spacing={1}>\r\n          <Tooltip label=\"Refresh\">\r\n            <IconButton\r\n              icon={<RepeatIcon />}\r\n              size=\"sm\"\r\n              variant=\"outline\"\r\n              colorScheme=\"gray\"\r\n              onClick={fetchReminders}\r\n              isDisabled={loading}\r\n              aria-label=\"Refresh\"\r\n            />\r\n          </Tooltip>\r\n          <Tooltip label=\"Close\">\r\n            <IconButton\r\n              icon={<CloseIcon />}\r\n              size=\"sm\"\r\n              variant=\"ghost\"\r\n              colorScheme=\"red\"\r\n              onClick={() => setShowSidebar(false)} // ✅ FIXED\r\n              aria-label=\"Close Reminder Panel\"\r\n            />\r\n          </Tooltip>\r\n        </HStack>\r\n      </HStack>\r\n    </Box>\r\n\r\n    {/* 🟦 Scrollable Reminder List */}\r\n    <Box flex=\"1\" overflowY=\"auto\" px={3} py={2}>\r\n      {loading ? (\r\n        <Spinner size=\"lg\" />\r\n      ) : reminders.length === 0 ? (\r\n        <Text>No reminders found for this group.</Text>\r\n      ) : (\r\n        <VStack spacing={3} align=\"stretch\">\r\n          {reminders.map((reminder) => (\r\n            <Box\r\n              key={reminder._id}\r\n              bg=\"whiteAlpha.300\"\r\n              p={3}\r\n              borderRadius=\"md\"\r\n              shadow=\"sm\"\r\n            >\r\n              <Text fontWeight=\"bold\">{reminder.message}</Text>\r\n              <HStack justify=\"space-between\" mt={2}>\r\n                <Text fontSize=\"sm\" color=\"gray.700\">\r\n                  {activeTab === \"done\"\r\n                    ? `✅ Done ${formatTimeAgo(reminder.updatedAt)}`\r\n                    : `⏰ Due at ${formatDueTime(reminder.dueAt)}`}\r\n                </Text>\r\n                <HStack spacing={1}>\r\n                  {activeTab === \"active\" && (\r\n                    <>\r\n                      <Tooltip label=\"Custom Snooze\">\r\n                        <IconButton\r\n                          icon={<RepeatIcon />}\r\n                          size=\"xs\"\r\n                          colorScheme=\"yellow\"\r\n                          onClick={() => {\r\n                            setActiveReminderId(reminder._id);\r\n                            onOpen();\r\n                          }}\r\n                          aria-label=\"Custom Snooze\"\r\n                        />\r\n                      </Tooltip>\r\n                      <Tooltip label=\"Snooze +10 min\">\r\n                        <IconButton\r\n                          icon={<RepeatClockIcon />}\r\n                          size=\"xs\"\r\n                          colorScheme=\"yellow\"\r\n                          onClick={() => handleQuickSnooze(reminder._id)}\r\n                          aria-label=\"Quick Snooze\"\r\n                        />\r\n                      </Tooltip>\r\n                    </>\r\n                  )}\r\n                  <Tooltip label=\"Mark Done\">\r\n                    <IconButton\r\n                      icon={<CheckIcon />}\r\n                      size=\"xs\"\r\n                      colorScheme=\"green\"\r\n                      onClick={() => handleMarkDone(reminder._id)}\r\n                      isDisabled={activeTab === \"done\"}\r\n                      aria-label=\"Mark Done\"\r\n                    />\r\n                  </Tooltip>\r\n                  <Tooltip label=\"Delete Reminder\">\r\n                    <IconButton\r\n                      icon={<DeleteIcon />}\r\n                      size=\"xs\"\r\n                      colorScheme=\"red\"\r\n                      onClick={() => handleDelete(reminder._id)}\r\n                      aria-label=\"Delete Reminder\"\r\n                    />\r\n                  </Tooltip>\r\n                </HStack>\r\n              </HStack>\r\n            </Box>\r\n          ))}\r\n        </VStack>\r\n      )}\r\n    </Box>\r\n\r\n    {/* 🟡 Snooze Modal */}\r\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\r\n      <ModalOverlay />\r\n      <ModalContent>\r\n        <ModalHeader>Snooze Reminder</ModalHeader>\r\n        <ModalCloseButton />\r\n        <ModalBody>\r\n          <Input\r\n            type=\"datetime-local\"\r\n            value={snoozeDate}\r\n            onChange={(e) => setSnoozeDate(e.target.value)}\r\n          />\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button colorScheme=\"yellow\" mr={3} onClick={handleCustomSnooze}>\r\n            Snooze\r\n          </Button>\r\n          <Button variant=\"ghost\" onClick={onClose}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n  </Box>\r\n): null;\r\n\r\n\r\n};\r\n\r\nexport default ReminderSidebar;\r\n","// // \n\n// //yha se alag hai \n// import { FormControl } from \"@chakra-ui/form-control\";\n// import { Input } from \"@chakra-ui/input\";\n// import { Box, Text } from \"@chakra-ui/layout\";\n// import \"./styles.css\";\n\n// import { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\n// import { getSender, getSenderFull } from \"../config/ChatLogics\";\n// import { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import { ArrowBackIcon } from \"@chakra-ui/icons\";\n// import ProfileModal from \"./miscellaneous/ProfileModal\";\n// import ScrollableChat from \"./ScrollableChat\";\n// import Lottie from \"react-lottie\";\n// import animationData from \"../animations/typing.json\";\n// import io from \"socket.io-client\";\n// import UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\n// import { ChatState } from \"../Context/ChatProvider\";\n// import ReminderSidebar from \"../components/reminders/ReminderSidebar\"; // Sidebar component\n// import ReminderButton from \"../components/reminders/ReminderButton.js\"\n// const ENDPOINT = \"http://localhost:5000\";\n// var socket, selectedChatCompare;\n\n// const SingleChat = ({ fetchAgain, setFetchAgain }) => {\n//   const [messages, setMessages] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [newMessage, setNewMessage] = useState(\"\");\n//   const [socketConnected, setSocketConnected] = useState(false);\n//   const [typing, setTyping] = useState(false);\n//   const [istyping, setIsTyping] = useState(false);\n//   const toast = useToast();\n\n//   const defaultOptions = {\n//     loop: true,\n//     autoplay: true,\n//     animationData: animationData,\n//     rendererSettings: {\n//       preserveAspectRatio: \"xMidYMid slice\",\n//     },\n//   };\n\n//   const { selectedChat, setSelectedChat, user, notification, setNotification } =\n//     ChatState();\n\n//   const fetchMessages = async () => {\n//     if (!selectedChat) return;\n\n//     try {\n//       const config = {\n//         headers: {\n//           Authorization: `Bearer ${user.token}`,\n//         },\n//       };\n\n//       setLoading(true);\n//       const { data } = await axios.get(\n//         `/api/message/${selectedChat._id}`,\n//         config\n//       );\n//       setMessages(data);\n//       setLoading(false);\n//       socket.emit(\"join chat\", selectedChat._id);\n//     } catch (error) {\n//       toast({\n//         title: \"Error Occured!\",\n//         description: \"Failed to Load the Messages\",\n//         status: \"error\",\n//         duration: 5000,\n//         isClosable: true,\n//         position: \"bottom\",\n//       });\n//     }\n//   };\n\n//   const sendMessage = async (event) => {\n//     if (event.key === \"Enter\" && newMessage) {\n//       socket.emit(\"stop typing\", selectedChat._id);\n//       try {\n//         const config = {\n//           headers: {\n//             \"Content-type\": \"application/json\",\n//             Authorization: `Bearer ${user.token}`,\n//           },\n//         };\n//         setNewMessage(\"\");\n//         const { data } = await axios.post(\n//           \"/api/message\",\n//           {\n//             content: newMessage,\n//             chatId: selectedChat,\n//           },\n//           config\n//         );\n//         socket.emit(\"new message\", data);\n//         setMessages([...messages, data]);\n//       } catch (error) {\n//         toast({\n//           title: \"Error Occured!\",\n//           description: \"Failed to send the Message\",\n//           status: \"error\",\n//           duration: 5000,\n//           isClosable: true,\n//           position: \"bottom\",\n//         });\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     socket = io(ENDPOINT);\n//     socket.emit(\"setup\", user);\n//     socket.on(\"connected\", () => setSocketConnected(true));\n//     socket.on(\"typing\", () => setIsTyping(true));\n//     socket.on(\"stop typing\", () => setIsTyping(false));\n//   }, []);\n\n//   useEffect(() => {\n//     fetchMessages();\n//     selectedChatCompare = selectedChat;\n//   }, [selectedChat]);\n\n//   useEffect(() => {\n//     socket.on(\"message recieved\", (newMessageRecieved) => {\n//       console.log(\"Received message in real time:\", newMessageRecieved);\n//       if (\n//         !selectedChatCompare ||\n//         selectedChatCompare._id !== newMessageRecieved.chat._id\n//       ) {\n//         if (!notification.includes(newMessageRecieved)) {\n//           setNotification([newMessageRecieved, ...notification]);\n//           setFetchAgain(!fetchAgain);\n//         }\n//       } else {\n//         setMessages([...messages, newMessageRecieved]);\n//       }\n//     });\n//   });\n\n//   const typingHandler = (e) => {\n//     setNewMessage(e.target.value);\n//     if (!socketConnected) return;\n//     if (!typing) {\n//       setTyping(true);\n//       socket.emit(\"typing\", selectedChat._id);\n//     }\n//     let lastTypingTime = new Date().getTime();\n//     var timerLength = 3000;\n//     setTimeout(() => {\n//       var timeNow = new Date().getTime();\n//       var timeDiff = timeNow - lastTypingTime;\n//       if (timeDiff >= timerLength && typing) {\n//         socket.emit(\"stop typing\", selectedChat._id);\n//         setTyping(false);\n//       }\n//     }, timerLength);\n//   };\n\n//   return (\n//     <>\n//       {selectedChat ? (\n//         <Box display=\"flex\" w=\"100%\" h=\"100%\">\n//           {/* Chat Section */}\n//           <Box flex=\"1\" display=\"flex\" flexDirection=\"column\">\n//             <Text\n//               fontSize={{ base: \"25px\", md: \"30px\" }}\n//               pb={3}\n//               px={2}\n//               fontFamily=\"Work sans\"\n//               d=\"flex\"\n//               justifyContent={{ base: \"space-between\" }}\n//               alignItems=\"center\"\n//             >\n//               <IconButton\n//                 d={{ base: \"flex\", md: \"none\" }}\n//                 icon={<ArrowBackIcon />}\n//                 onClick={() => setSelectedChat(\"\")}\n//               />\n//               {messages &&\n//                 (!selectedChat.isGroupChat ? (\n//                   <>\n//                     {getSender(user, selectedChat.users)}\n//                     <ProfileModal\n//                       user={getSenderFull(user, selectedChat.users)}\n//                     />\n//                     <ReminderButton message={null} />\n//                   </>\n//                 ) : (\n//                   <>\n//                     {selectedChat.chatName.toUpperCase()}\n//                     <UpdateGroupChatModal\n//                       fetchMessages={fetchMessages}\n//                       fetchAgain={fetchAgain}\n//                       setFetchAgain={setFetchAgain}\n//                     />\n//                     <ReminderButton message={null} />\n//                   </>\n//                 ))}\n//             </Text>\n\n//             <Box\n//               d=\"flex\"\n//               flexDir=\"column\"\n//               justifyContent=\"flex-end\"\n//               p={3}\n//               bg=\"#E8E8E8\"\n//               w=\"100%\"\n//               h=\"100%\"\n//               borderRadius=\"lg\"\n//               overflowY=\"hidden\"\n//             >\n//               {loading ? (\n//                 <Spinner\n//                   size=\"xl\"\n//                   w={20}\n//                   h={20}\n//                   alignSelf=\"center\"\n//                   margin=\"auto\"\n//                 />\n//               ) : (\n//                 <div className=\"messages\">\n//                   <ScrollableChat messages={messages} />\n//                 </div>\n//               )}\n\n//               <FormControl\n//                 onKeyDown={sendMessage}\n//                 id=\"first-name\"\n//                 isRequired\n//                 mt={3}\n//               >\n//                 {istyping && (\n//                   <div>\n//                     <Lottie\n//                       options={defaultOptions}\n//                       width={70}\n//                       style={{ marginBottom: 15, marginLeft: 0 }}\n//                     />\n//                   </div>\n//                 )}\n//                 <Input\n//                   variant=\"filled\"\n//                   bg=\"#E0E0E0\"\n//                   placeholder=\"Enter a message..\"\n//                   value={newMessage}\n//                   onChange={typingHandler}\n//                 />\n//               </FormControl>\n//             </Box>\n//           </Box>\n\n//           {/* Group Reminder Sidebar */}\n//           {selectedChat.isGroupChat && <ReminderSidebar />}\n//         </Box>\n//       ) : (\n//         <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n//           <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n//             Click on a user to start chatting\n//           </Text>\n//         </Box>\n//       )}\n//     </>\n//   );\n// };\n\n// export default SingleChat;\n// SingleChat.js\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\n\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon, BellIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport ReminderSidebar from \"../components/reminders/ReminderSidebar\"; // Sidebar component\nimport ReminderButton from \"../components/reminders/ReminderButton.js\"\n\nconst ENDPOINT = \"http://localhost:5000\";\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false); // 🆕 sidebar toggle\n\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n\n  const { selectedChat, setSelectedChat, user, notification, setNotification } = ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: { Authorization: `Bearer ${user.token}` },\n      };\n      setLoading(true);\n      const { data } = await axios.get(`/api/message/${selectedChat._id}`, config);\n      setMessages(data);\n      setLoading(false);\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: \"Failed to load messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occurred!\",\n          description: \"Failed to send message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n    selectedChatCompare = selectedChat;\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (!selectedChatCompare || selectedChatCompare._id !== newMessageRecieved.chat._id) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    let timerLength = 3000;\n    setTimeout(() => {\n      let timeNow = new Date().getTime();\n      let timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <Box\n  display=\"flex\"\n  w=\"100%\"\n  h=\"100%\"\n  position=\"relative\"\n  bg=\"rgba(255, 255, 255, 0.05)\" // glassy base\n  backdropFilter=\"blur(14px) saturate(180%)\"\n  WebkitBackdropFilter=\"blur(14px) saturate(180%)\"\n  borderRadius=\"lg\"\n  border=\"1px solid rgba(255, 255, 255, 0.1)\"\n  boxShadow=\"0 8px 32px 0 rgba(31, 38, 135, 0.37)\"\n>\n          {/* Chat Section */}\n          <Box flex=\"1\" display=\"flex\" flexDirection=\"column\">\n            <Text\n              fontSize={{ base: \"25px\", md: \"30px\" }}\n              pb={3}\n              px={2}\n              fontFamily=\"Work sans\"\n              d=\"flex\"\n              justifyContent={{ base: \"space-between\" }}\n              alignItems=\"center\"\n            >\n              <IconButton\n                d={{ base: \"flex\", md: \"none\" }}\n                icon={<ArrowBackIcon />}\n                onClick={() => setSelectedChat(\"\")}\n              />\n              {messages &&\n                (!selectedChat.isGroupChat ? (\n                  <>\n                    {getSender(user, selectedChat.users)}\n                    <ProfileModal user={getSenderFull(user, selectedChat.users)} />\n                    <ReminderButton message={null} />\n                  </>\n                ) : (\n                  <>\n                  {selectedChat.chatName.toUpperCase()}\n\n<IconButton\n  icon={<span role=\"img\" aria-label=\"brain\">🧠</span>}\n  size=\"sm\"\n  variant=\"ghost\"\n  ml={2}\n  onClick={() => setIsSidebarOpen(!isSidebarOpen)}\n  aria-label=\"Brain\"\n/>\n\n<UpdateGroupChatModal\n  fetchMessages={fetchMessages}\n  fetchAgain={fetchAgain}\n  setFetchAgain={setFetchAgain}\n/>\n\n<ReminderButton message={null} />\n\n                  </>\n                ))}\n            </Text>\n\n            <Box\n              d=\"flex\"\n  flexDir=\"column\"\n  justifyContent=\"flex-end\"\n  p={3}\n  w=\"100%\"\n  h=\"100%\"\n  bg=\"rgba(255, 255, 255, 0.1)\"\n  backdropFilter=\"blur(10px)\"\n  borderRadius=\"lg\"\n  border=\"1px solid rgba(255, 255, 255, 0.1)\"\n  overflowY=\"hidden\"\n  boxShadow=\"sm\"\n            >\n              {loading ? (\n                <Spinner size=\"xl\" w={20} h={20} alignSelf=\"center\" margin=\"auto\" />\n              ) : (\n                <div className=\"messages\">\n                  <ScrollableChat messages={messages} />\n                </div>\n              )}\n\n              <FormControl onKeyDown={sendMessage} id=\"first-name\" isRequired mt={3} >\n                {istyping && (\n                  <div>\n                    <Lottie options={defaultOptions} width={70} style={{ marginBottom: 15, marginLeft: 0 }} />\n                  </div>\n                )}\n                <Input \n                  variant=\"filled\"\n  bg=\"rgba(255, 255, 255, 0.2)\"\n  color=\"white\"\n  _placeholder={{ color: \"gray.300\" }}\n  placeholder=\"Enter a message...\"\n  value={newMessage}\n  onChange={typingHandler}\n                />\n              </FormControl>\n            </Box>\n          </Box>\n\n          {/* 🛎️ Toggle Button to open Sidebar */}\n         \n          {/* Group Reminder Sidebar (conditionally rendered) */}\n          {selectedChat.isGroupChat && isSidebarOpen && (\n  <ReminderSidebar\n    onClose={() => setIsSidebarOpen(false)}\n    selectedChat={selectedChat}\n    token={user.token}\n  />\n)}\n\n        </Box>\n      ) : (\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n   <Box\n  display={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n  gap={3}\n  alignItems=\"center\"\n  flexDir=\"column\"\n  p={3}\n  w={{ base: \"100%\", md: \"68%\" }}\n  h=\"100%\"\n  borderRadius=\"10px\"\n  background=\"rgba(255, 255, 255, 0.1)\"\n  backdropFilter=\"blur(12px)\"\n \n//   border=\"1px solid rgba(255, 255, 255, 0.2)\"\n>\n  <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n</Box>\n\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n//   const handleSearch = async (query) => {\n//     setSearch(query);\n//     if (!query) {\n//       return;\n//     }\n\n//     try {\n//       setLoading(true);\n//       const config = {\n//         headers: {\n//           Authorization: `Bearer ${user.token}`,\n//         },\n//       };\n//       const { data } = await axios.get(`/api/user?search=${search}`, config);\n//       console.log(data);\n//       setLoading(false);\n//       setSearchResult(data);\n//     } catch (error) {\n//       toast({\n//         title: \"Error Occured!\",\n//         description: \"Failed to Load the Search Results\",\n//         status: \"error\",\n//         duration: 5000,\n//         isClosable: true,\n//         position: \"bottom-left\",\n//       });\n//     }\n//   };\n// const handleSearch = async (query) => {\n//   setSearch(query);\n//   if (!query) {\n//     setSearchResult([]);\n//     return;\n//   }\n\n//   try {\n//     setLoading(true);\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${user.token}`,\n//       },\n//     };\n\n//     const { data } = await axios.get(`/api/user?search=${query}`, config);\n\n//     // 🔍 Filter results strictly: match only names/emails that START with the query\n//     const refinedResults = data.filter((user) =>\n//       user.name.toLowerCase().startsWith(query.toLowerCase()) ||\n//       user.email.toLowerCase().startsWith(query.toLowerCase())\n//     );\n\n//     setSearchResult(refinedResults);\n//     setLoading(false);\n//   } catch (error) {\n//  toast({\n//       title: \"Error Occurred!\",\n//       description: error?.response?.data?.message || \"Failed to load the search results\",\n//       status: \"error\",\n//       duration: 5000,\n//       isClosable: true,\n//       position: \"bottom-left\",\n//     });\n//     setLoading(false);\n//   }\n// };\n\nconst handleSearch = async (query) => {\n  setSearch(query);\n  if (!query) return;\n\n  try {\n    setLoading(true);\n    const config = {\n      headers: {\n        Authorization: `Bearer ${user.token}`,\n      },\n    };\n\n    const { data } = await axios.get(`/api/user?search=${query}`, config);\n\n    // 🧠 Optional: Filter results to only those starting with the search\n    const refinedResults = data.filter((user) =>\n      user.name.toLowerCase().startsWith(query.toLowerCase()) ||\n      user.email.toLowerCase().startsWith(query.toLowerCase())\n    );\n\n    setSearchResult(refinedResults);\n    setLoading(false);\n  } catch (error) {\n    toast({\n      title: \"Error Occurred!\",\n      description:\n        error?.response?.data?.message || \"Failed to load the search results.\",\n      status: \"error\",\n      duration: 5000,\n      isClosable: true,\n      position: \"bottom-left\",\n    });\n    setLoading(false);\n  }\n};\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} width=\"90%\" w=\"90%\" isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent   bg=\"rgba(255, 255, 255, 0.1)\"\n      backdropFilter=\"blur(20px)\"\n      border=\"1px solid rgba(255, 255, 255, 0.2)\"\n      boxShadow=\"0 8px 32px rgba(0, 0, 0, 0.2)\"\n      borderRadius=\"lg\"\n\t  w=\"94%\"\n      color=\"white\">\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n\t\t\t textAlign=\"center\"\n        color=\"white\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group \n          </ModalHeader>\n          <ModalCloseButton color=\"white\" />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\" w=\"100%\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n\t\t\t\tbg=\"rgba(255,255,255,0.1)\"\n\t\t\t\t _placeholder={{ color: \"gray.300\" }}\n\t\t\t\t  border=\"1px solid rgba(255, 255, 255, 0.2)\"\n\t\t\t\tcolor=\"white\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users \"\n\t\t\t\tbg=\"rgba(255,255,255,0.1)\"\n\t\t\t\t _placeholder={{ color: \"gray.300\" }}\n\t\t\t\t  border=\"1px solid rgba(255, 255, 255, 0.2)\"\n\t\t\t\tcolor=\"white\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" borderRadius=\"50px\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\" borderRadius=\"25px\" >\n              Create \n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { io } from \"socket.io-client\";\r\n\r\nexport const socket = io(\"http://localhost:5000\", {\r\n  transports: [\"websocket\"], // 🚀 only use websocket transport\r\n});","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text, HStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { socket } from \"../config/socket\";\nimport { Avatar } from \"@chakra-ui/avatar\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: \"Failed to load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setLoggedUser(userInfo);\n    fetchChats();\n\n    socket.emit(\"setup\", user);\n    socket.on(\"message received\", () => {\n      fetchChats();\n    });\n\n    return () => {\n      socket.off(\"message received\");\n    };\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={1}\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      bg=\"rgba(255, 255, 255, 0.1)\"\n      boxShadow=\"0 8px 32px 0 rgba(31, 38, 135, 0.37)\"\n      backdropFilter=\"blur(10px)\"\n      WebkitBackdropFilter=\"blur(10px)\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        color=\"white\"\n      >\n        All Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            borderRadius=\"25px\"\n            bg=\"rgba(255, 255, 255, 0.7)\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group\n          </Button>\n        </GroupChatModal>\n      </Box>\n\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={2}\n        w=\"100%\"\n        h=\"100%\"\n        overflowY=\"hidden\"\n      >\n        {chats && loggedUser ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => {\n              const otherUser = !chat.isGroupChat\n                ? chat.users.find((u) => u._id !== loggedUser._id)\n                : null;\n\n              return (\n                <Box\n                  onClick={() => setSelectedChat(chat)}\n                  cursor=\"pointer\"\n                  bg={\n                    selectedChat === chat\n                      ? \"rgba(56, 178, 172, 0.4)\"\n                      : \"rgba(255, 255, 255, 0.1)\"\n                  }\n                  color={selectedChat === chat ? \"white\" : \"blackAlpha.900\"}\n                  px={2}\n                  py={2}\n                  borderRadius=\"lg\"\n                  key={chat._id}\n                >\n                  <HStack align=\"flex-start\" spacing={3}>\n                    <Avatar\n                      boxSize=\"50px\"\n                      src={!chat.isGroupChat ? otherUser?.pic : \"\"}\n                      name={!chat.isGroupChat ? otherUser?.name : chat.chatName}\n                      border=\"2px solid rgba(255,255,255,0.3)\"\n                      boxShadow=\"0 0 10px rgba(255,255,255,0.1)\"\n                    />\n\n                    <Box>\n                      <Text fontWeight=\"bold\" fontSize=\"md\" color=\"white\">\n                        {!chat.isGroupChat\n                          ? otherUser?.name\n                          : chat.chatName}\n                      </Text>\n\n                      {chat.latestMessage && (\n                        <Text fontSize=\"sm\" noOfLines={1} color=\"gray.300\">\n                          {chat.isGroupChat && (\n                            <Text as=\"span\" fontWeight=\"bold\" color=\"teal.200\">\n                              {chat.latestMessage.sender.name}:{\" \"}\n                            </Text>\n                          )}\n                          <Text as=\"span\" color=\"white\">\n                            {chat.latestMessage.content.length > 50\n                              ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                              : chat.latestMessage.content}\n                          </Text>\n                        </Text>\n                      )}\n                    </Box>\n                  </HStack>\n                </Box>\n              );\n            })}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n\n// import { AddIcon } from \"@chakra-ui/icons\";\n// import { Box, Stack, Text, HStack } from \"@chakra-ui/layout\";\n// import { useToast } from \"@chakra-ui/toast\";\n// import axios from \"axios\";\n// import { useEffect, useState } from \"react\";\n// import { getSender } from \"../config/ChatLogics\";\n// import ChatLoading from \"./ChatLoading\";\n// import GroupChatModal from \"./miscellaneous/GroupChatModal\";\n// import { Button } from \"@chakra-ui/react\";\n// import { ChatState } from \"../Context/ChatProvider\";\n// import { socket } from \"../config/socket\";\n// import { Avatar } from \"@chakra-ui/avatar\";\n// const MyChats = ({ fetchAgain }) => {\n//   const [loggedUser, setLoggedUser] = useState();\n\n//   const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n//   const toast = useToast();\n\n//   const fetchChats = async () => {\n//     try {\n//       const config = {\n//         headers: {\n//           Authorization: `Bearer ${user.token}`,\n//         },\n//       };\n\n//       const { data } = await axios.get(\"/api/chat\", config);\n//       setChats(data);\n//     } catch (error) {\n//       toast({\n//         title: \"Error Occured!\",\n//         description: \"Failed to Load the chats\",\n//         status: \"error\",\n//         duration: 5000,\n//         isClosable: true,\n//         position: \"bottom-left\",\n//       });\n//     }\n//   };\n\n//   useEffect(() => {\n// \tconst userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n//   setLoggedUser(userInfo);\n//     setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n//     fetchChats();\n\n//     // Connect to socket with user info\n//     socket.emit(\"setup\", user);\n\n//     // Listen for new messages and refresh chats\n//     socket.on(\"message received\", (newMessageReceived) => {\n//       fetchChats();\n//     });\n\n//     // Cleanup on unmount\n//     return () => {\n//       socket.off(\"message received\");\n//     };\n\n//     // eslint-disable-next-line\n//   }, [fetchAgain]);\n\n//   return (\n//    <Box\n//   d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n//   flexDir=\"column\"\n//   alignItems=\"center\"\n//   p={1}\n//   w={{ base: \"100%\", md: \"31%\" }}\n//   borderRadius=\"lg\"\n//   bg=\"rgba(255, 255, 255, 0.1)\" // semi-transparent background\n//   boxShadow=\"0 8px 32px 0 rgba(31, 38, 135, 0.37)\" // frosted shadow\n//   backdropFilter=\"blur(10px)\" // frosted blur\n//   WebkitBackdropFilter=\"blur(10px)\" // Safari fallback\n \n// >\n\n//       <Box\n//         pb={3}\n//         px={3}\n//         fontSize={{ base: \"28px\", md: \"30px\" }}\n//         fontFamily=\"Work sans\"\n//         d=\"flex\"\n//         w=\"100%\"\n//         justifyContent=\"space-between\"\n//         alignItems=\"center\"\n//       >\n//         All Chats\n//         <GroupChatModal>\n//           <Button\n//             d=\"flex\"\n// \t\t\tborderRadius=\"25px\"\n// \t\t\tbg=\"rgba(255, 255, 255, 0.7)\"\n//             fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n//             rightIcon={<AddIcon />}\n\t\t\t\n//           >\n//             New Group \n//           </Button>\n//         </GroupChatModal>\n//       </Box>\n//       <Box\n//         d=\"flex\"\n//         flexDir=\"column\"\n//         p={2}\n//         bg=\"#F8F8F8.alpha\"\n//         w=\"100%\"\n//         h=\"100%\"\n        \n//         overflowY=\"hidden\"\n//       >\n//         {/* {chats ? (\n//           <Stack overflowY=\"scroll\">\n//             {chats.map((chat) => (\n//               <Box\n//                 onClick={() => setSelectedChat(chat)}\n//                 cursor=\"pointer\"\n//                 bg={selectedChat === chat ?\"rgba(56, 178, 172, 0.4)\" : \"rgba(255, 255, 255, 0.1)\"}\n//                 color={selectedChat === chat ? \"white\" :\"blackAlpha.900\"}\n//                 px={2}\n//                 py={2}\n//                 borderRadius=\"lg\"\n//                 key={chat._id}\n//               >\n//                 <Text>\n//                   {!chat.isGroupChat\n//                     ? getSender(loggedUser, chat.users)\n//                     : chat.chatName}\n//                 </Text>\n//                 {chat.latestMessage && (\n//                   <Text fontSize=\"xs\">\n//                     <b>{chat.latestMessage.sender.name} : </b>\n//                     {chat.latestMessage.content.length > 50\n//                       ? chat.latestMessage.content.substring(0, 51) + \"...\"\n//                       : chat.latestMessage.content}\n//                   </Text>\n//                 )}\n//               </Box>\n//             ))}\n//           </Stack>\n//         ) : (\n//           <ChatLoading />\n//         )} */}\n// \t\t{chats ? (\n//   <Stack overflowY=\"scroll\">\n//     {chats.map((chat) => {\n//       const otherUser = !chat.isGroupChat\n//         ? chat.users.find((u) => u._id !== loggedUser._id)\n//         : null;\n\n//       return (\n//       <Box\n//   onClick={() => setSelectedChat(chat)}\n//   cursor=\"pointer\"\n//   bg={\n//     selectedChat === chat\n//       ? \"rgba(56, 178, 172, 0.4)\"\n//       : \"rgba(255, 255, 255, 0.1)\"\n//   }\n//   color={selectedChat === chat ? \"white\" : \"blackAlpha.900\"}\n//   px={2}\n//   py={2}\n//   borderRadius=\"lg\"\n//   key={chat._id}\n// >\n//   <HStack align=\"flex-start\" spacing={3}>\n//     <Avatar\n//       boxSize=\"50px\"\n//       src={!chat.isGroupChat ? otherUser?.pic : \"\"}\n//       name={!chat.isGroupChat ? otherUser?.name : chat.chatName}\n//       border=\"2px solid rgba(255,255,255,0.3)\"\n//       boxShadow=\"0 0 10px rgba(255,255,255,0.1)\"\n//     />\n\n//     <Box>\n//       {/* 🧠 Chat Name */}\n//       <Text fontWeight=\"bold\" fontSize=\"md\">\n//         {!chat.isGroupChat ? otherUser?.name : chat.chatName}\n//       </Text>\n\n//       {/* 💬 Latest Message */}\n//       {chat.latestMessage && (\n//         <Text fontSize=\"sm\" color=\"white.600\" noOfLines={1}>\n//           {chat.isGroupChat && (\n//             <Text as=\"span\" fontWeight=\"bold\" color=\"teal.600\">\n//               {chat.latestMessage.sender.name}:{\" \"}\n//             </Text>\n//           )}\n//           <Text as=\"span\" color=\"white.800\">\n//             {chat.latestMessage.content.length > 50\n//               ? chat.latestMessage.content.substring(0, 51) + \"...\"\n//               : chat.latestMessage.content}\n//           </Text>\n//         </Text>\n//       )}\n//     </Box>\n//   </HStack>\n// </Box>\n\n//       );\n//     })}\n//   </Stack>\n// ) : (\n//   <ChatLoading />\n// )}\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default MyChats;\n","// components/reminder/ReminderSnoozeModal.js\r\nimport {\r\n\tModal,\r\n\tModalOverlay,\r\n\tModalContent,\r\n\tModalHeader,\r\n\tModalBody,\r\n\tModalCloseButton,\r\n\tButton,\r\n\tVStack,\r\n  } from \"@chakra-ui/react\";\r\n  import axios from \"axios\";\r\n  import { useToast } from \"@chakra-ui/react\";\r\n  \r\n  const snoozeOptions = [5, 15, 30]; // in minutes\r\n  \r\n  const ReminderSnoozeModal = ({ isOpen, onClose, reminder, onResnooze }) => {\r\n\tconst toast = useToast();\r\n  \r\n\tconst handleSnooze = async (minutes) => {\r\n\t  const newDueAt = new Date(Date.now() + minutes * 60 * 1000);\r\n\t  try {\r\n\t\tawait axios.put(\r\n\t\t  `/api/reminders/${reminder._id}/reschedule`,\r\n\t\t  { dueAt: newDueAt },\r\n\t\t  {\r\n\t\t\theaders: {\r\n\t\t\t  Authorization: `Bearer ${reminder.token}`,\r\n\t\t\t},\r\n\t\t  }\r\n\t\t);\r\n\t\ttoast({\r\n\t\t  title: `Snoozed for ${minutes} min`,\r\n\t\t  status: \"success\",\r\n\t\t  duration: 2000,\r\n\t\t  isClosable: true,\r\n\t\t});\r\n\t\tonResnooze();\r\n\t  } catch (error) {\r\n\t\ttoast({\r\n\t\t  title: \"Failed to snooze reminder\",\r\n\t\t  status: \"error\",\r\n\t\t  duration: 2000,\r\n\t\t  isClosable: true,\r\n\t\t});\r\n\t  }\r\n\t};\r\n  \r\n\treturn (\r\n\t  <Modal isOpen={isOpen} onClose={onClose} isCentered>\r\n\t\t<ModalOverlay />\r\n\t\t<ModalContent>\r\n\t\t  <ModalHeader>Snooze Reminder</ModalHeader>\r\n\t\t  <ModalCloseButton />\r\n\t\t  <ModalBody pb={4}>\r\n\t\t\t<VStack spacing={3}>\r\n\t\t\t  {snoozeOptions.map((min) => (\r\n\t\t\t\t<Button key={min} onClick={() => handleSnooze(min)} width=\"100%\">\r\n\t\t\t\t  Snooze for {min} min\r\n\t\t\t\t</Button>\r\n\t\t\t  ))}\r\n\t\t\t</VStack>\r\n\t\t  </ModalBody>\r\n\t\t</ModalContent>\r\n\t  </Modal>\r\n\t);\r\n  };\r\n  \r\n  export default ReminderSnoozeModal;\r\n  \r\n//college\r\n// // components/reminder/ReminderSnoozeModal.js\r\n\r\n// import {\r\n// \tModal,\r\n// \tModalOverlay,\r\n// \tModalContent,\r\n// \tModalHeader,\r\n// \tModalBody,\r\n// \tModalCloseButton,\r\n// \tButton,\r\n// \tVStack,\r\n// \tuseToast,\r\n//   } from \"@chakra-ui/react\";\r\n//   import axios from \"axios\";\r\n//   import { ChatState } from \"../../Context/ChatProvider\";\r\n  \r\n//   const ReminderSnoozeModal = ({ isOpen, onClose, reminder, onResnooze }) => {\r\n// \tconst toast = useToast();\r\n// \tconst { user } = ChatState();\r\n  \r\n// \tconst handleSnooze = async (minutes) => {\r\n// \t  try {\r\n// \t\tconst newDueAt = new Date(Date.now() + minutes * 60000);\r\n// \t\tawait axios.put(\r\n// \t\t  `/api/reminders/${reminder._id}/reschedule`,\r\n// \t\t  { dueAt: newDueAt },\r\n// \t\t  { headers: { Authorization: `Bearer ${user.token}` } }\r\n// \t\t);\r\n  \r\n// \t\ttoast({\r\n// \t\t  title: `Snoozed for ${minutes} min`,\r\n// \t\t  status: \"success\",\r\n// \t\t  duration: 3000,\r\n// \t\t  isClosable: true,\r\n// \t\t});\r\n  \r\n// \t\tif (onResnooze) onResnooze();\r\n// \t  } catch (err) {\r\n// \t\ttoast({\r\n// \t\t  title: \"Failed to snooze reminder\",\r\n// \t\t  status: \"error\",\r\n// \t\t  duration: 3000,\r\n// \t\t  isClosable: true,\r\n// \t\t});\r\n// \t  }\r\n// \t};\r\n  \r\n// \treturn (\r\n// \t  <Modal isOpen={isOpen} onClose={onClose} size=\"xs\">\r\n// \t\t<ModalOverlay />\r\n// \t\t<ModalContent>\r\n// \t\t  <ModalHeader>Snooze Reminder</ModalHeader>\r\n// \t\t  <ModalCloseButton />\r\n// \t\t  <ModalBody>\r\n// \t\t\t<VStack spacing={3} pb={4}>\r\n// \t\t\t  <Button colorScheme=\"blue\" onClick={() => handleSnooze(5)}>\r\n// \t\t\t\tSnooze 5 mins\r\n// \t\t\t  </Button>\r\n// \t\t\t  <Button colorScheme=\"yellow\" onClick={() => handleSnooze(15)}>\r\n// \t\t\t\tSnooze 15 mins\r\n// \t\t\t  </Button>\r\n// \t\t\t  <Button colorScheme=\"orange\" onClick={() => handleSnooze(30)}>\r\n// \t\t\t\tSnooze 30 mins\r\n// \t\t\t  </Button>\r\n// \t\t\t</VStack>\r\n// \t\t  </ModalBody>\r\n// \t\t</ModalContent>\r\n// \t  </Modal>\r\n// \t);\r\n//   };\r\n  \r\n//   export default ReminderSnoozeModal;\r\n  \r\n// import {\r\n// \tModal,\r\n// \tModalOverlay,\r\n// \tModalContent,\r\n// \tModalHeader,\r\n// \tModalBody,\r\n// \tModalFooter,\r\n// \tModalCloseButton,\r\n// \tButton,\r\n// \tInput,\r\n//   } from \"@chakra-ui/react\";\r\n//   import { useState } from \"react\";\r\n  \r\n//   const ReminderSnoozeModal = ({ isOpen, onClose, onSubmit }) => {\r\n// \tconst [customTime, setCustomTime] = useState(\"\");\r\n  \r\n// \tconst handleSubmit = () => {\r\n// \t  onSubmit(customTime);\r\n// \t};\r\n  \r\n// \treturn (\r\n// \t  <Modal isOpen={isOpen} onClose={onClose} isCentered>\r\n// \t\t<ModalOverlay />\r\n// \t\t<ModalContent>\r\n// \t\t  <ModalHeader>Snooze to Custom Time</ModalHeader>\r\n// \t\t  <ModalCloseButton />\r\n// \t\t  <ModalBody>\r\n// \t\t\t<Input\r\n// \t\t\t  type=\"datetime-local\"\r\n// \t\t\t  value={customTime}\r\n// \t\t\t  onChange={(e) => setCustomTime(e.target.value)}\r\n// \t\t\t/>\r\n// \t\t  </ModalBody>\r\n// \t\t  <ModalFooter>\r\n// \t\t\t<Button onClick={handleSubmit} colorScheme=\"blue\">Snooze</Button>\r\n// \t\t  </ModalFooter>\r\n// \t\t</ModalContent>\r\n// \t  </Modal>\r\n// \t);\r\n//   };\r\n  \r\n//   export default ReminderSnoozeModal;","import {\r\n\tModal,\r\n\tModalOverlay,\r\n\tModalContent,\r\n\tModalHeader,\r\n\tModalBody,\r\n\tModalCloseButton,\r\n\tButton,\r\n\tVStack,\r\n\tHStack,\r\n\tText,\r\n\tIconButton,\r\n\tuseDisclosure,\r\n\tuseToast,\r\n\tBox,\r\n\tDivider,\r\n  } from \"@chakra-ui/react\";\r\n  import { DeleteIcon, RepeatClockIcon, CheckIcon } from \"@chakra-ui/icons\";\r\n  import { useEffect, useState } from \"react\";\r\n  import axios from \"axios\";\r\n  import { ChatState } from \"../../Context/ChatProvider\";\r\n  import ReminderSnoozeModal from \"./ReminderSnoozeModal\";\r\n  \r\n  const ReminderListModal = ({ isOpen, onClose }) => {\r\n\tconst { user } = ChatState();\r\n\tconst [reminders, setReminders] = useState([]);\r\n\tconst toast = useToast();\r\n  \r\n\tconst {\r\n\t  isOpen: isSnoozeOpen,\r\n\t  onOpen: onSnoozeOpen,\r\n\t  onClose: onSnoozeClose,\r\n\t} = useDisclosure();\r\n\tconst [selectedReminder, setSelectedReminder] = useState(null);\r\n  \r\n\tconst fetchReminders = async () => {\r\n\t  try {\r\n\t\tconst config = {\r\n\t\t  headers: { Authorization: `Bearer ${user.token}` },\r\n\t\t};\r\n\t\tconst { data } = await axios.get(\"/api/reminders\", config);\r\n\t\tsetReminders(data);\r\n\t  } catch (error) {\r\n\t\ttoast({\r\n\t\t  title: \"Error fetching reminders\",\r\n\t\t  status: \"error\",\r\n\t\t  duration: 3000,\r\n\t\t  isClosable: true,\r\n\t\t});\r\n\t  }\r\n\t};\r\n  \r\n\tconst handleDelete = async (id) => {\r\n\t  try {\r\n\t\tawait axios.delete(`/api/reminders/${id}`, {\r\n\t\t  headers: { Authorization: `Bearer ${user.token}` },\r\n\t\t});\r\n\t\tsetReminders(reminders.filter((r) => r._id !== id));\r\n\t  } catch (error) {\r\n\t\ttoast({\r\n\t\t  title: \"Error deleting reminder\",\r\n\t\t  status: \"error\",\r\n\t\t  duration: 3000,\r\n\t\t  isClosable: true,\r\n\t\t});\r\n\t  }\r\n\t};\r\n  \r\n\tconst handleMarkAsDone = async (id) => {\r\n\t  try {\r\n\t\tawait axios.put(\r\n\t\t  `/api/reminders/${id}/done`,\r\n\t\t  {},\r\n\t\t  {\r\n\t\t\theaders: { Authorization: `Bearer ${user.token}` },\r\n\t\t  }\r\n\t\t);\r\n\t\tfetchReminders();\r\n\t  } catch (error) {\r\n\t\ttoast({\r\n\t\t  title: \"Error marking reminder as done\",\r\n\t\t  status: \"error\",\r\n\t\t  duration: 3000,\r\n\t\t  isClosable: true,\r\n\t\t});\r\n\t  }\r\n\t};\r\n  \r\n\tconst handleSnoozeClick = (reminder) => {\r\n\t  setSelectedReminder(reminder);\r\n\t  onSnoozeOpen();\r\n\t};\r\n  \r\n\tuseEffect(() => {\r\n\t  if (isOpen) fetchReminders();\r\n\t}, [isOpen]);\r\n  \r\n\tconst activeReminders = reminders\r\n\t  .filter((r) => !r.isDone)\r\n\t  .sort((a, b) => new Date(a.dueAt) - new Date(b.dueAt));\r\n  \r\n\tconst doneReminders = reminders\r\n\t  .filter((r) => r.isDone)\r\n\t  .sort((a, b) => new Date(b.dueAt) - new Date(a.dueAt));\r\n  \r\n\treturn (\r\n\t  <>\r\n\t\t<Modal isOpen={isOpen} onClose={onClose} size=\"lg\">\r\n\t\t  <ModalOverlay />\r\n\t\t  <ModalContent>\r\n\t\t\t<ModalHeader>🧠 My Reminders</ModalHeader>\r\n\t\t\t<ModalCloseButton />\r\n\t\t\t<ModalBody>\r\n\t\t\t  {activeReminders.length === 0 ? (\r\n\t\t\t\t<Text>No upcoming private reminders</Text>\r\n\t\t\t  ) : (\r\n\t\t\t\t<VStack align=\"stretch\" spacing={3}>\r\n\t\t\t\t  {activeReminders.map((reminder) => (\r\n\t\t\t\t\t<Box\r\n\t\t\t\t\t  key={reminder._id}\r\n\t\t\t\t\t  p={3}\r\n\t\t\t\t\t  borderWidth=\"1px\"\r\n\t\t\t\t\t  borderRadius=\"lg\"\r\n\t\t\t\t\t  bg=\"gray.50\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t  <Text fontWeight=\"bold\">{reminder.content}</Text>\r\n\t\t\t\t\t  <Text fontSize=\"sm\">\r\n\t\t\t\t\t\t🕒 {new Date(reminder.dueAt).toLocaleString()}\r\n\t\t\t\t\t  </Text>\r\n\t\t\t\t\t  <Text fontSize=\"xs\" color=\"gray.500\">\r\n\t\t\t\t\t\t⏰ Snoozed {reminder.remindAgainCount || 0} times\r\n\t\t\t\t\t  </Text>\r\n\t\t\t\t\t  <HStack mt={2}>\r\n\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t  icon={<RepeatClockIcon />}\r\n\t\t\t\t\t\t  size=\"sm\"\r\n\t\t\t\t\t\t  aria-label=\"Snooze\"\r\n\t\t\t\t\t\t  onClick={() => handleSnoozeClick(reminder)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t  icon={<CheckIcon />}\r\n\t\t\t\t\t\t  size=\"sm\"\r\n\t\t\t\t\t\t  aria-label=\"Mark as Done\"\r\n\t\t\t\t\t\t  colorScheme=\"green\"\r\n\t\t\t\t\t\t  onClick={() => handleMarkAsDone(reminder._id)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t  icon={<DeleteIcon />}\r\n\t\t\t\t\t\t  size=\"sm\"\r\n\t\t\t\t\t\t  aria-label=\"Delete\"\r\n\t\t\t\t\t\t  onClick={() => handleDelete(reminder._id)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t  </HStack>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t  ))}\r\n\t\t\t\t</VStack>\r\n\t\t\t  )}\r\n  \r\n\t\t\t  {doneReminders.length > 0 && (\r\n\t\t\t\t<>\r\n\t\t\t\t  <Divider my={4} />\r\n\t\t\t\t  <Text fontSize=\"md\" fontWeight=\"semibold\">\r\n\t\t\t\t\t✅ Completed Reminders\r\n\t\t\t\t  </Text>\r\n\t\t\t\t  <VStack align=\"stretch\" spacing={3} mt={2}>\r\n\t\t\t\t\t{doneReminders.map((reminder) => (\r\n\t\t\t\t\t  <Box\r\n\t\t\t\t\t\tkey={reminder._id}\r\n\t\t\t\t\t\tp={3}\r\n\t\t\t\t\t\tbg=\"gray.100\"\r\n\t\t\t\t\t\tborderRadius=\"md\"\r\n\t\t\t\t\t\tborderWidth=\"1px\"\r\n\t\t\t\t\t\tborderColor=\"gray.200\"\r\n\t\t\t\t\t  >\r\n\t\t\t\t\t\t<Text fontWeight=\"semibold\" color=\"gray.700\">\r\n\t\t\t\t\t\t  {reminder.content}\r\n\t\t\t\t\t\t</Text>\r\n\t\t\t\t\t\t<Text fontSize=\"xs\" color=\"gray.500\">\r\n\t\t\t\t\t\t  Completed at {new Date(reminder.dueAt).toLocaleString()}\r\n\t\t\t\t\t\t</Text>\r\n\t\t\t\t\t\t<Text fontSize=\"xs\" color=\"gray.400\">\r\n\t\t\t\t\t\t  Snoozed {reminder.remindAgainCount || 0} times\r\n\t\t\t\t\t\t</Text>\r\n\t\t\t\t\t  </Box>\r\n\t\t\t\t\t))}\r\n\t\t\t\t  </VStack>\r\n\t\t\t\t</>\r\n\t\t\t  )}\r\n\t\t\t</ModalBody>\r\n\t\t  </ModalContent>\r\n\t\t</Modal>\r\n  \r\n\t\t{selectedReminder && (\r\n\t\t  <ReminderSnoozeModal\r\n\t\t\tisOpen={isSnoozeOpen}\r\n\t\t\tonClose={onSnoozeClose}\r\n\t\t\treminder={selectedReminder}\r\n\t\t\tonResnooze={() => {\r\n\t\t\t  onSnoozeClose();\r\n\t\t\t  fetchReminders();\r\n\t\t\t}}\r\n\t\t  />\r\n\t\t)}\r\n\t  </>\r\n\t);\r\n  };\r\n  \r\n  export default ReminderListModal;\r\n  \r\n   \r\n// // components/reminder/ReminderListModal.js\r\n\r\n// import {\r\n// \tModal,\r\n// \tModalOverlay,\r\n// \tModalContent,\r\n// \tModalHeader,\r\n// \tModalBody,\r\n// \tModalCloseButton,\r\n// \tVStack,\r\n// \tHStack,\r\n// \tText,\r\n// \tIconButton,\r\n// \tuseDisclosure,\r\n// \tuseToast,\r\n// \tBox,\r\n//   } from \"@chakra-ui/react\";\r\n//   import { DeleteIcon, RepeatClockIcon } from \"@chakra-ui/icons\";\r\n//   import { useEffect, useState } from \"react\";\r\n//   import axios from \"axios\";\r\n//   import { ChatState } from \"../../Context/ChatProvider\";\r\n//   import ReminderSnoozeModal from \"./ReminderSnoozeModal\";\r\n  \r\n//   const ReminderListModal = ({ isOpen, onClose }) => {\r\n// \tconst { user } = ChatState();\r\n// \tconst [reminders, setReminders] = useState([]);\r\n// \tconst toast = useToast();\r\n  \r\n// \tconst {\r\n// \t  isOpen: isSnoozeOpen,\r\n// \t  onOpen: onSnoozeOpen,\r\n// \t  onClose: onSnoozeClose,\r\n// \t} = useDisclosure();\r\n// \tconst [selectedReminder, setSelectedReminder] = useState(null);\r\n  \r\n// \tconst fetchReminders = async () => {\r\n// \t  try {\r\n// \t\tconst config = {\r\n// \t\t  headers: { Authorization: `Bearer ${user.token}` },\r\n// \t\t};\r\n// \t\tconst { data } = await axios.get(\"/api/reminders\", config);\r\n  \r\n// \t\tconst filtered = data.filter(\r\n// \t\t  (r) => r.type === \"us\" && !r.notificationSent\r\n// \t\t);\r\n  \r\n// \t\tsetReminders(filtered);\r\n// \t  } catch (error) {\r\n// \t\ttoast({\r\n// \t\t  title: \"Error fetching reminders\",\r\n// \t\t  status: \"error\",\r\n// \t\t  duration: 3000,\r\n// \t\t  isClosable: true,\r\n// \t\t});\r\n// \t  }\r\n// \t};\r\n  \r\n// \tconst handleDelete = async (id) => {\r\n// \t  try {\r\n// \t\tawait axios.delete(`/api/reminders/${id}`, {\r\n// \t\t  headers: { Authorization: `Bearer ${user.token}` },\r\n// \t\t});\r\n// \t\tsetReminders((prev) => prev.filter((r) => r._id !== id));\r\n// \t  } catch (error) {\r\n// \t\ttoast({\r\n// \t\t  title: \"Error deleting reminder\",\r\n// \t\t  status: \"error\",\r\n// \t\t  duration: 3000,\r\n// \t\t  isClosable: true,\r\n// \t\t});\r\n// \t  }\r\n// \t};\r\n  \r\n// \tconst handleSnoozeClick = (reminder) => {\r\n// \t  setSelectedReminder(reminder);\r\n// \t  onSnoozeOpen();\r\n// \t};\r\n  \r\n// \tuseEffect(() => {\r\n// \t  if (isOpen) fetchReminders();\r\n// \t}, [isOpen]);\r\n  \r\n// \treturn (\r\n// \t  <>\r\n// \t\t<Modal isOpen={isOpen} onClose={onClose} size=\"lg\">\r\n// \t\t  <ModalOverlay />\r\n// \t\t  <ModalContent>\r\n// \t\t\t<ModalHeader>My Reminders</ModalHeader>\r\n// \t\t\t<ModalCloseButton />\r\n// \t\t\t<ModalBody>\r\n// \t\t\t  {reminders.length === 0 ? (\r\n// \t\t\t\t<Text>No upcoming private reminders</Text>\r\n// \t\t\t  ) : (\r\n// \t\t\t\t<VStack align=\"stretch\" spacing={3}>\r\n// \t\t\t\t  {reminders.map((reminder) => (\r\n// \t\t\t\t\t<Box\r\n// \t\t\t\t\t  key={reminder._id}\r\n// \t\t\t\t\t  p={3}\r\n// \t\t\t\t\t  borderWidth=\"1px\"\r\n// \t\t\t\t\t  borderRadius=\"lg\"\r\n// \t\t\t\t\t  bg=\"gray.50\"\r\n// \t\t\t\t\t>\r\n// \t\t\t\t\t  <Text fontWeight=\"bold\">{reminder.content}</Text>\r\n// \t\t\t\t\t  <Text fontSize=\"sm\">\r\n// \t\t\t\t\t\t🕒 {new Date(reminder.dueAt).toLocaleString()}\r\n// \t\t\t\t\t  </Text>\r\n// \t\t\t\t\t  <Text fontSize=\"xs\" color=\"gray.500\">\r\n// \t\t\t\t\t\t⏰ Snoozed {reminder.remindAgainCount || 0} times\r\n// \t\t\t\t\t  </Text>\r\n// \t\t\t\t\t  <HStack mt={2}>\r\n// \t\t\t\t\t\t<IconButton\r\n// \t\t\t\t\t\t  icon={<RepeatClockIcon />}\r\n// \t\t\t\t\t\t  size=\"sm\"\r\n// \t\t\t\t\t\t  aria-label=\"Snooze\"\r\n// \t\t\t\t\t\t  onClick={() => handleSnoozeClick(reminder)}\r\n// \t\t\t\t\t\t/>\r\n// \t\t\t\t\t\t<IconButton\r\n// \t\t\t\t\t\t  icon={<DeleteIcon />}\r\n// \t\t\t\t\t\t  size=\"sm\"\r\n// \t\t\t\t\t\t  aria-label=\"Delete\"\r\n// \t\t\t\t\t\t  onClick={() => handleDelete(reminder._id)}\r\n// \t\t\t\t\t\t/>\r\n// \t\t\t\t\t  </HStack>\r\n// \t\t\t\t\t</Box>\r\n// \t\t\t\t  ))}\r\n// \t\t\t\t</VStack>\r\n// \t\t\t  )}\r\n// \t\t\t</ModalBody>\r\n// \t\t  </ModalContent>\r\n// \t\t</Modal>\r\n  \r\n// \t\t{selectedReminder && (\r\n// \t\t  <ReminderSnoozeModal\r\n// \t\t\tisOpen={isSnoozeOpen}\r\n// \t\t\tonClose={onSnoozeClose}\r\n// \t\t\treminder={selectedReminder}\r\n// \t\t\tonResnooze={() => {\r\n// \t\t\t  onSnoozeClose();\r\n// \t\t\t  fetchReminders(); // Refresh after snooze\r\n// \t\t\t}}\r\n// \t\t  />\r\n// \t\t)}\r\n// \t  </>\r\n// \t);\r\n//   };\r\n  \r\n//   export default ReminderListModal;\r\n  \r\n//college\r\n// // components/reminder/ReminderListModal.js\r\n\r\n// import {\r\n// \tModal,\r\n// \tModalOverlay,\r\n// \tModalContent,\r\n// \tModalHeader,\r\n// \tModalBody,\r\n// \tModalCloseButton,\r\n// \tButton,\r\n// \tVStack,\r\n// \tHStack,\r\n// \tText,\r\n// \tIconButton,\r\n// \tuseDisclosure,\r\n// \tuseToast,\r\n// \tBox,\r\n//   } from \"@chakra-ui/react\";\r\n//   import { DeleteIcon, RepeatClockIcon } from \"@chakra-ui/icons\";\r\n//   import { useEffect, useState } from \"react\";\r\n//   import axios from \"axios\";\r\n//   import { ChatState } from \"../../Context/ChatProvider\";\r\n//   import ReminderSnoozeModal from \"./ReminderSnoozeModal\";\r\n  \r\n//   const ReminderListModal = ({ isOpen, onClose }) => {\r\n// \tconst { user } = ChatState();\r\n// \tconst [reminders, setReminders] = useState([]);\r\n// \tconst toast = useToast();\r\n  \r\n// \tconst {\r\n// \t  isOpen: isSnoozeOpen,\r\n// \t  onOpen: onSnoozeOpen,\r\n// \t  onClose: onSnoozeClose,\r\n// \t} = useDisclosure();\r\n// \tconst [selectedReminder, setSelectedReminder] = useState(null);\r\n  \r\n// \tconst fetchReminders = async () => {\r\n// \t  try {\r\n// \t\tconst config = {\r\n// \t\t  headers: { Authorization: `Bearer ${user.token}` },\r\n// \t\t};\r\n// \t\tconst { data } = await axios.get(\"/api/reminders\", config);\r\n// \t\t// const filtered = data.filter(//college\r\n// \t\t//   (r) => r.type === \"private\" && r.notificationSent === false\r\n// \t\t// );\r\n// \t\tconst filtered = data.filter(\r\n// \t\t\t(r) =>\r\n// \t\t\t  r.type === \"us\" &&\r\n// \t\t\t  r.chat._id === currentChatId &&\r\n// \t\t\t  new Date(r.dueAt) <= new Date()\r\n// \t\t  );\r\n// \t\tsetReminders(filtered);\r\n// \t  } catch (error) {\r\n// \t\ttoast({\r\n// \t\t  title: \"Error fetching reminders\",\r\n// \t\t  status: \"error\",\r\n// \t\t  duration: 3000,\r\n// \t\t  isClosable: true,\r\n// \t\t});\r\n// \t  }\r\n// \t};\r\n  \r\n// \tconst handleDelete = async (id) => {\r\n// \t  try {\r\n// \t\tawait axios.delete(`/api/reminders/${id}`, {\r\n// \t\t  headers: { Authorization: `Bearer ${user.token}` },\r\n// \t\t});\r\n// \t\tsetReminders(reminders.filter((r) => r._id !== id));\r\n// \t  } catch (error) {\r\n// \t\ttoast({\r\n// \t\t  title: \"Error deleting reminder\",\r\n// \t\t  status: \"error\",\r\n// \t\t  duration: 3000,\r\n// \t\t  isClosable: true,\r\n// \t\t});\r\n// \t  }\r\n// \t};\r\n  \r\n// \tconst handleSnoozeClick = (reminder) => {\r\n// \t  setSelectedReminder(reminder);\r\n// \t  onSnoozeOpen();\r\n// \t};\r\n  \r\n// \tuseEffect(() => {\r\n// \t  if (isOpen) fetchReminders();\r\n// \t}, [isOpen]);\r\n  \r\n// \treturn (\r\n// \t  <>\r\n// \t\t<Modal isOpen={isOpen} onClose={onClose} size=\"lg\">\r\n// \t\t  <ModalOverlay />\r\n// \t\t  <ModalContent>\r\n// \t\t\t<ModalHeader>My Reminders</ModalHeader>\r\n// \t\t\t<ModalCloseButton />\r\n// \t\t\t<ModalBody>\r\n// \t\t\t  {reminders.length === 0 ? (\r\n// \t\t\t\t<Text>No upcoming private reminders</Text>\r\n// \t\t\t  ) : (\r\n// \t\t\t\t<VStack align=\"stretch\" spacing={3}>\r\n// \t\t\t\t  {reminders.map((reminder) => (\r\n// \t\t\t\t\t<Box\r\n// \t\t\t\t\t  key={reminder._id}\r\n// \t\t\t\t\t  p={3}\r\n// \t\t\t\t\t  borderWidth=\"1px\"\r\n// \t\t\t\t\t  borderRadius=\"lg\"\r\n// \t\t\t\t\t  bg=\"gray.50\"\r\n// \t\t\t\t\t>\r\n// \t\t\t\t\t  <Text fontWeight=\"bold\">{reminder.content}</Text>\r\n// \t\t\t\t\t  <Text fontSize=\"sm\">\r\n// \t\t\t\t\t\t🕒 {new Date(reminder.dueAt).toLocaleString()}\r\n// \t\t\t\t\t  </Text>\r\n// \t\t\t\t\t  <Text fontSize=\"xs\" color=\"gray.500\">\r\n// \t\t\t\t\t\t⏰ Snoozed {reminder.remindAgainCount || 0} times\r\n// \t\t\t\t\t  </Text>\r\n// \t\t\t\t\t  <HStack mt={2}>\r\n// \t\t\t\t\t\t<IconButton\r\n// \t\t\t\t\t\t  icon={<RepeatClockIcon />}\r\n// \t\t\t\t\t\t  size=\"sm\"\r\n// \t\t\t\t\t\t  aria-label=\"Snooze\"\r\n// \t\t\t\t\t\t  onClick={() => handleSnoozeClick(reminder)}\r\n// \t\t\t\t\t\t/>\r\n// \t\t\t\t\t\t<IconButton\r\n// \t\t\t\t\t\t  icon={<DeleteIcon />}\r\n// \t\t\t\t\t\t  size=\"sm\"\r\n// \t\t\t\t\t\t  aria-label=\"Delete\"\r\n// \t\t\t\t\t\t  onClick={() => handleDelete(reminder._id)}\r\n// \t\t\t\t\t\t/>\r\n// \t\t\t\t\t  </HStack>\r\n// \t\t\t\t\t</Box>\r\n// \t\t\t\t  ))}\r\n// \t\t\t\t</VStack>\r\n// \t\t\t  )}\r\n// \t\t\t</ModalBody>\r\n// \t\t  </ModalContent>\r\n// \t\t</Modal>\r\n  \r\n// \t\t{selectedReminder && (\r\n// \t\t  <ReminderSnoozeModal\r\n// \t\t\tisOpen={isSnoozeOpen}\r\n// \t\t\tonClose={onSnoozeClose}\r\n// \t\t\treminder={selectedReminder}\r\n// \t\t\tonResnooze={() => {\r\n// \t\t\t  onSnoozeClose();\r\n// \t\t\t  fetchReminders(); // Refresh\r\n// \t\t\t}}\r\n// \t\t  />\r\n// \t\t)}\r\n// \t  </>\r\n// \t);\r\n//   };\r\n  \r\n//   export default ReminderListModal;\r\n  \r\n// import {\r\n// \tModal,\r\n// \tModalOverlay,\r\n// \tModalContent,\r\n// \tModalHeader,\r\n// \tModalBody,\r\n// \tModalCloseButton,\r\n// \tuseDisclosure,\r\n// \tBox,\r\n// \tText,\r\n// \tStack,\r\n//   } from \"@chakra-ui/react\";\r\n//   import { useEffect, useState } from \"react\";\r\n//   import axios from \"axios\";\r\n//   import { ChatState } from \"../../Context/ChatProvider\";\r\n  \r\n//   const ReminderListModal = () => {\r\n// \tconst { isOpen, onOpen, onClose } = useDisclosure();\r\n// \tconst { user } = ChatState();\r\n// \tconst [reminders, setReminders] = useState([]);\r\n  \r\n// \tconst fetchReminders = async () => {\r\n// \t  try {\r\n// \t\tconst config = {\r\n// \t\t  headers: { Authorization: `Bearer ${user.token}` },\r\n// \t\t};\r\n// \t\tconst { data } = await axios.get(\"/api/reminders/user\", config);\r\n// \t\tconst filtered = data.filter((r) => !r.notificationSent);\r\n// \t\tsetReminders(filtered);\r\n// \t  } catch (error) {\r\n// \t\tconsole.error(\"Error fetching reminders\", error);\r\n// \t  }\r\n// \t};\r\n  \r\n// \tuseEffect(() => {\r\n// \t  if (isOpen) fetchReminders();\r\n// \t}, [isOpen]);\r\n  \r\n// \treturn (\r\n// \t  <Modal isOpen={isOpen} onClose={onClose} size=\"md\" isCentered>\r\n// \t\t<ModalOverlay />\r\n// \t\t<ModalContent>\r\n// \t\t  <ModalHeader>My Reminders</ModalHeader>\r\n// \t\t  <ModalCloseButton />\r\n// \t\t  <ModalBody>\r\n// \t\t\t<Stack spacing={3}>\r\n// \t\t\t  {reminders.length === 0 ? (\r\n// \t\t\t\t<Text>No reminders found</Text>\r\n// \t\t\t  ) : (\r\n// \t\t\t\treminders.map((r) => (\r\n// \t\t\t\t  <Box key={r._id} p={3} borderWidth=\"1px\" borderRadius=\"md\">\r\n// \t\t\t\t\t<Text fontWeight=\"bold\">{r.message}</Text>\r\n// \t\t\t\t\t<Text fontSize=\"sm\" color=\"gray.500\">\r\n// \t\t\t\t\t  {new Date(r.dueAt).toLocaleString()} · {r.type === \"me\" ? \"Private\" : \"Group\"}\r\n// \t\t\t\t\t</Text>\r\n// \t\t\t\t\t<Text fontSize=\"sm\" color=\"gray.600\">Snoozed {r.remindAgainCount || 0} times</Text>\r\n// \t\t\t\t  </Box>\r\n// \t\t\t\t))\r\n// \t\t\t  )}\r\n// \t\t\t</Stack>\r\n// \t\t  </ModalBody>\r\n// \t\t</ModalContent>\r\n// \t  </Modal>\r\n// \t);\r\n//   };\r\n  \r\n//   export default ReminderListModal;\r\n  \r\n//abhi\r\n// import {\r\n// \tModal,\r\n// \tModalOverlay,\r\n// \tModalContent,\r\n// \tModalHeader,\r\n// \tModalBody,\r\n// \tModalCloseButton,\r\n// \tuseDisclosure,\r\n// \tButton,\r\n// \tBox,\r\n// \tText,\r\n// \tStack,\r\n// \tDivider,\r\n//   } from \"@chakra-ui/react\";\r\n//   import { useEffect, useState } from \"react\";\r\n//   import axios from \"axios\";\r\n//   import { ChatState } from \"../../Context/ChatProvider\";\r\n  \r\n//   const ReminderListModal = () => {\r\n// \tconst { isOpen, onOpen, onClose } = useDisclosure();\r\n// \tconst { user } = ChatState();\r\n// \tconst [reminders, setReminders] = useState([]);\r\n  \r\n// \tconst fetchReminders = async () => {\r\n// \t  try {\r\n// \t\tconst config = {\r\n// \t\t  headers: { Authorization: `Bearer ${user.token}` },\r\n// \t\t};\r\n// \t\tconst { data } = await axios.get(\"/api/reminders/user\", config);\r\n// \t\tsetReminders(data);\r\n// \t  } catch (error) {\r\n// \t\tconsole.error(\"Error fetching reminders\", error);\r\n// \t  }\r\n// \t};\r\n  \r\n// \tuseEffect(() => {\r\n// \t  if (isOpen) fetchReminders();\r\n// \t}, [isOpen]);\r\n  \r\n// \treturn (\r\n// \t  <>\r\n\t\t\r\n  \r\n// \t\t<Modal isOpen={isOpen} onClose={onClose} size=\"md\" isCentered>\r\n// \t\t  <ModalOverlay />\r\n// \t\t  <ModalContent>\r\n// \t\t\t<ModalHeader>My Reminders</ModalHeader>\r\n// \t\t\t<ModalCloseButton />\r\n// \t\t\t<ModalBody>\r\n// \t\t\t  <Stack spacing={3}>\r\n// \t\t\t\t{reminders.length === 0 ? (\r\n// \t\t\t\t  <Text>No reminders found</Text>\r\n// \t\t\t\t) : (\r\n// \t\t\t\t  reminders.map((reminder) => (\r\n// \t\t\t\t\t<Box\r\n// \t\t\t\t\t  key={reminder._id}\r\n// \t\t\t\t\t  p={3}\r\n// \t\t\t\t\t  borderWidth=\"1px\"\r\n// \t\t\t\t\t  borderRadius=\"md\"\r\n// \t\t\t\t\t>\r\n// \t\t\t\t\t  <Text fontWeight=\"bold\">{reminder.message}</Text>\r\n// \t\t\t\t\t  <Text fontSize=\"sm\" color=\"gray.500\">\r\n// \t\t\t\t\t\t{new Date(reminder.dueAt).toLocaleString()} ·{\" \"}\r\n// \t\t\t\t\t\t{reminder.type === \"me\" ? \"Private\" : \"Group\"}\r\n// \t\t\t\t\t  </Text>\r\n// \t\t\t\t\t</Box>\r\n// \t\t\t\t  ))\r\n// \t\t\t\t)}\r\n// \t\t\t  </Stack>\r\n// \t\t\t</ModalBody>\r\n// \t\t  </ModalContent>\r\n// \t\t</Modal>\r\n// \t  </>\r\n// \t);\r\n//   };\r\n  \r\n//   export default ReminderListModal;\r\n  ","// // // // import { Button } from \"@chakra-ui/button\";\n// // // // import { useDisclosure } from \"@chakra-ui/hooks\";\n// // // // import { Input } from \"@chakra-ui/input\";\n// // // // import { Box, Text } from \"@chakra-ui/layout\";\n\n// // // // import {\n// // // //   Menu,\n// // // //   MenuButton,\n// // // //   MenuDivider,\n// // // //   MenuItem,\n// // // //   MenuList,\n// // // // } from \"@chakra-ui/menu\";\n// // // // import {\n// // // //   Drawer,\n// // // //   DrawerBody,\n// // // //   DrawerContent,\n// // // //   DrawerHeader,\n// // // //   DrawerOverlay,\n// // // // } from \"@chakra-ui/modal\";\n// // // // import { Tooltip } from \"@chakra-ui/tooltip\";\n// // // // import { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\n// // // // import { Avatar } from \"@chakra-ui/avatar\";\n// // // // import { useHistory } from \"react-router-dom\";\n// // // // import { useState } from \"react\";\n// // // // import axios from \"axios\";\n// // // // import { useToast } from \"@chakra-ui/toast\";\n// // // // import ChatLoading from \"../ChatLoading\";\n// // // // import { Spinner } from \"@chakra-ui/spinner\";\n// // // // import ProfileModal from \"./ProfileModal\";\n// // // // import NotificationBadge from \"react-notification-badge\";\n// // // // import { Effect } from \"react-notification-badge\";\n// // // // import { getSender } from \"../../config/ChatLogics\";\n// // // // \n// // // // import { ChatState } from \"../../Context/ChatProvider\";\n\n// // // // function SideDrawer() {\n// // // //   const [search, setSearch] = useState(\"\");\n// // // //   const [searchResult, setSearchResult] = useState([]);\n// // // //   const [loading, setLoading] = useState(false);\n// // // //   const [loadingChat, setLoadingChat] = useState(false);\n\n// // // //   const {\n// // // //     setSelectedChat,\n// // // //     user,\n// // // //     notification,\n// // // //     setNotification,\n// // // //     chats,\n// // // //     setChats,\n// // // //   } = ChatState();\n\n// // // //   const toast = useToast();\n// // // //   const { isOpen, onOpen, onClose } = useDisclosure();\n// // // //   const history = useHistory();\n\n// // // //   const logoutHandler = () => {\n// // // //     localStorage.removeItem(\"userInfo\");\n// // // //     history.push(\"/\");\n// // // //   };\n\n// // // //   const handleSearch = async () => {\n// // // //     if (!search) {\n// // // //       toast({\n// // // //         title: \"Please Enter something in search\",\n// // // //         status: \"warning\",\n// // // //         duration: 5000,\n// // // //         isClosable: true,\n// // // //         position: \"top-left\",\n// // // //       });\n// // // //       return;\n// // // //     }\n\n// // // //     try {\n// // // //       setLoading(true);\n\n// // // //       const config = {\n// // // //         headers: {\n// // // //           Authorization: `Bearer ${user.token}`,\n// // // //         },\n// // // //       };\n\n// // // //       const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n// // // //       setLoading(false);\n// // // //       setSearchResult(data);\n// // // //     } catch (error) {\n// // // //       toast({\n// // // //         title: \"Error Occured!\",\n// // // //         description: \"Failed to Load the Search Results\",\n// // // //         status: \"error\",\n// // // //         duration: 5000,\n// // // //         isClosable: true,\n// // // //         position: \"bottom-left\",\n// // // //       });\n// // // //     }\n// // // //   };\n\n// // // //   const accessChat = async (userId) => {\n// // // //     console.log(userId);\n\n// // // //     try {\n// // // //       setLoadingChat(true);\n// // // //       const config = {\n// // // //         headers: {\n// // // //           \"Content-type\": \"application/json\",\n// // // //           Authorization: `Bearer ${user.token}`,\n// // // //         },\n// // // //       };\n// // // //       const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n// // // //       if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n// // // //       setSelectedChat(data);\n// // // //       setLoadingChat(false);\n// // // //       onClose();\n// // // //     } catch (error) {\n// // // //       toast({\n// // // //         title: \"Error fetching the chat\",\n// // // //         description: error.message,\n// // // //         status: \"error\",\n// // // //         duration: 5000,\n// // // //         isClosable: true,\n// // // //         position: \"bottom-left\",\n// // // //       });\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <>\n// // // //       <Box\n// // // //         d=\"flex\"\n// // // //         justifyContent=\"space-between\"\n// // // //         alignItems=\"center\"\n// // // //         bg=\"white\"\n// // // //         w=\"100%\"\n// // // //         p=\"5px 10px 5px 10px\"\n// // // //         borderWidth=\"5px\"\n// // // //       >\n// // // //         <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n// // // //           <Button variant=\"ghost\" onClick={onOpen}>\n// // // //             <i className=\"fas fa-search\"></i>\n// // // //             <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n// // // //               Search User\n// // // //             </Text>\n// // // //           </Button>\n// // // //         </Tooltip>\n// // // //         <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n// // // //           sawCollab\n// // // //         </Text>\n// // // //         <div>\n// // // //           <Menu>\n// // // //             <MenuButton p={1}>\n// // // //               <NotificationBadge\n// // // //                 count={notification.length}\n// // // //                 effect={Effect.SCALE}\n// // // //               />\n// // // //               <BellIcon fontSize=\"2xl\" m={1} />\n// // // //             </MenuButton>\n// // // //             <MenuList pl={2}>\n// // // //               {!notification.length && \"No New Messages\"}\n// // // //               {notification.map((notif) => (\n// // // //                 <MenuItem\n// // // //                   key={notif._id}\n// // // //                   onClick={() => {\n// // // //                     setSelectedChat(notif.chat);\n// // // //                     setNotification(notification.filter((n) => n !== notif));\n// // // //                   }}\n// // // //                 >\n// // // //                   {notif.chat.isGroupChat\n// // // //                     ? `New Message in ${notif.chat.chatName}`\n// // // //                     : `New Message from ${getSender(user, notif.chat.users)}`}\n// // // //                 </MenuItem>\n// // // //               ))}\n// // // //             </MenuList>\n// // // //           </Menu>\n// // // //           <Menu>\n// // // //             <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n// // // //               <Avatar\n// // // //                 size=\"sm\"\n// // // //                 cursor=\"pointer\"\n// // // //                 name={user.name}\n// // // //                 src={user.pic}\n// // // //               />\n// // // //             </MenuButton>\n// // // //             <MenuList>\n// // // //               <ProfileModal user={user}>\n// // // //                 <MenuItem>My Profile</MenuItem>{\" \"}\n// // // //               </ProfileModal>\n// // // //               <MenuDivider />\n// // // //               <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n// // // //             </MenuList>\n// // // //           </Menu>\n// // // //         </div>\n// // // //       </Box>\n\n// // // //       <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n// // // //         <DrawerOverlay />\n// // // //         <DrawerContent>\n// // // //           <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n// // // //           <DrawerBody>\n// // // //             <Box d=\"flex\" pb={2}>\n// // // //               <Input\n// // // //                 placeholder=\"Search by name or email\"\n// // // //                 mr={2}\n// // // //                 value={search}\n// // // //                 onChange={(e) => setSearch(e.target.value)}\n// // // //               />\n// // // //               <Button onClick={handleSearch}>Go</Button>\n// // // //             </Box>\n// // // //             {loading ? (\n// // // //               <ChatLoading />\n// // // //             ) : (\n// // // //               searchResult?.map((user) => (\n// // // //                 <UserListItem\n// // // //                   key={user._id}\n// // // //                   user={user}\n// // // //                   handleFunction={() => accessChat(user._id)}\n// // // //                 />\n// // // //               ))\n// // // //             )}\n// // // //             {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n// // // //           </DrawerBody>\n// // // //         </DrawerContent>\n// // // //       </Drawer>\n// // // //     </>\n// // // //   );\n// // // // }\n\n// // // // export default SideDrawer;\n// // // import { Button } from \"@chakra-ui/button\";\n// // // import { useDisclosure } from \"@chakra-ui/hooks\";\n// // // import { Input } from \"@chakra-ui/input\";\n// // // import { Box, Text, Flex } from \"@chakra-ui/layout\";\n// // // import { AddIcon, BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\n// // // import { FaBrain } from \"react-icons/fa\";\n// // // import { IconButton } from \"@chakra-ui/react\";\n// // // import ReminderSidebar from \"../reminders/ReminderSidebar\";\n// // // import ReminderModal from \"../reminders/ReminderModal\";\n// // // import {\n// // //   Menu,\n// // //   MenuButton,\n// // //   MenuDivider,\n// // //   MenuItem,\n// // //   MenuList,\n// // // } from \"@chakra-ui/menu\";\n// // // import {\n// // //   Drawer,\n// // //   DrawerBody,\n// // //   DrawerContent,\n// // //   DrawerHeader,\n// // //   DrawerOverlay,\n// // // } from \"@chakra-ui/modal\";\n// // // import { Tooltip } from \"@chakra-ui/tooltip\";\n// // // import { Avatar } from \"@chakra-ui/avatar\";\n// // // import { useHistory } from \"react-router-dom\";\n// // // import { useState } from \"react\";\n// // // import axios from \"axios\";\n// // // import { useToast } from \"@chakra-ui/toast\";\n// // // import ChatLoading from \"../ChatLoading\";\n// // // import { Spinner } from \"@chakra-ui/spinner\";\n// // // import ProfileModal from \"./ProfileModal\";\n// // // import NotificationBadge from \"react-notification-badge\";\n// // // import { Effect } from \"react-notification-badge\";\n// // // import { getSender } from \"../../config/ChatLogics\";\n// // // import UserListItem from \"../userAvatar/UserListItem\";\n// // // import { ChatState } from \"../../Context/ChatProvider\";\n\n// // // function SideDrawer() {\n// // //   const [search, setSearch] = useState(\"\");\n// // //   const [searchResult, setSearchResult] = useState([]);\n// // //   const [loading, setLoading] = useState(false);\n// // //   const [loadingChat, setLoadingChat] = useState(false);\n// // //   const [showReminderSidebar, setShowReminderSidebar] = useState(false);\n\n// // //   const {\n// // //     setSelectedChat,\n// // //     user,\n// // //     notification,\n// // //     setNotification,\n// // //     chats,\n// // //     setChats,\n// // //   } = ChatState();\n\n// // //   const toast = useToast();\n// // //   const { isOpen, onOpen, onClose } = useDisclosure();\n// // //   const history = useHistory();\n\n// // //   const logoutHandler = () => {\n// // //     localStorage.removeItem(\"userInfo\");\n// // //     history.push(\"/\");\n// // //   };\n\n// // //   const handleSearch = async () => {\n// // //     if (!search) {\n// // //       toast({\n// // //         title: \"Please Enter something in search\",\n// // //         status: \"warning\",\n// // //         duration: 5000,\n// // //         isClosable: true,\n// // //         position: \"top-left\",\n// // //       });\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       setLoading(true);\n// // //       const config = {\n// // //         headers: {\n// // //           Authorization: `Bearer ${user.token}`,\n// // //         },\n// // //       };\n// // //       const { data } = await axios.get(`/api/user?search=${search}`, config);\n// // //       setSearchResult(data);\n// // //       setLoading(false);\n// // //     } catch (error) {\n// // //       toast({\n// // //         title: \"Error Occured!\",\n// // //         description: \"Failed to Load the Search Results\",\n// // //         status: \"error\",\n// // //         duration: 5000,\n// // //         isClosable: true,\n// // //         position: \"bottom-left\",\n// // //       });\n// // //     }\n// // //   };\n\n// // //   const accessChat = async (userId) => {\n// // //     try {\n// // //       setLoadingChat(true);\n// // //       const config = {\n// // //         headers: {\n// // //           \"Content-type\": \"application/json\",\n// // //           Authorization: `Bearer ${user.token}`,\n// // //         },\n// // //       };\n// // //       const { data } = await axios.post(`/api/chat`, { userId }, config);\n// // //       if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n// // //       setSelectedChat(data);\n// // //       setLoadingChat(false);\n// // //       onClose();\n// // //     } catch (error) {\n// // //       toast({\n// // //         title: \"Error fetching the chat\",\n// // //         description: error.message,\n// // //         status: \"error\",\n// // //         duration: 5000,\n// // //         isClosable: true,\n// // //         position: \"bottom-left\",\n// // //       });\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <>\n// // //       <Box\n// // //         d=\"flex\"\n// // //         justifyContent=\"space-between\"\n// // //         alignItems=\"center\"\n// // //         bg=\"white\"\n// // //         w=\"100%\"\n// // //         p=\"5px 10px\"\n// // //         borderWidth=\"5px\"\n// // //       >\n// // //         <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n// // //           <Button variant=\"ghost\" onClick={onOpen}>\n// // //             <i className=\"fas fa-search\"></i>\n// // //             <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n// // //               Search User\n// // //             </Text>\n// // //           </Button>\n// // //         </Tooltip>\n\n// // //         <Flex alignItems=\"center\" gap={2}>\n          \n\n// // //           {/* 🧠 Brain Button */}\n// // //           <IconButton\n// // //             icon={<FaBrain />}\n// // //             variant=\"ghost\"\n// // //             onClick={() => setShowReminderSidebar(!showReminderSidebar)}\n// // //             aria-label=\"Show Reminders\"\n// // //           />\n\n// // //           {/* ➕ Plus Button inside ReminderModal */}\n// // //           <ReminderModal>\n// // //             <IconButton\n// // //               icon={<AddIcon />}\n// // //               variant=\"ghost\"\n// // //               aria-label=\"Add Reminder\"\n// // //             />\n// // //           </ReminderModal>\n\n// // //           {/* 🔔 Notification Bell */}\n// // //           <Menu>\n// // //             <MenuButton p={1}>\n// // //               <NotificationBadge count={notification.length} effect={Effect.SCALE} />\n// // //               <BellIcon fontSize=\"2xl\" m={1} />\n// // //             </MenuButton>\n// // //             <MenuList pl={2}>\n// // //               {!notification.length && \"No New Messages\"}\n// // //               {notification.map((notif) => (\n// // //                 <MenuItem\n// // //                   key={notif._id}\n// // //                   onClick={() => {\n// // //                     setSelectedChat(notif.chat);\n// // //                     setNotification(notification.filter((n) => n !== notif));\n// // //                   }}\n// // //                 >\n// // //                   {notif.chat.isGroupChat\n// // //                     ? `New Message in ${notif.chat.chatName}`\n// // //                     : `New Message from ${getSender(user, notif.chat.users)}`}\n// // //                 </MenuItem>\n// // //               ))}\n// // //             </MenuList>\n// // //           </Menu>\n\n// // //           {/* 👤 Profile Dropdown */}\n// // //           <Menu>\n// // //             <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n// // //               <Avatar size=\"sm\" cursor=\"pointer\" name={user.name} src={user.pic} />\n// // //             </MenuButton>\n// // //             <MenuList>\n// // //               <ProfileModal user={user}>\n// // //                 <MenuItem>My Profile</MenuItem>\n// // //               </ProfileModal>\n// // //               <MenuDivider />\n// // //               <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n// // //             </MenuList>\n// // //           </Menu>\n// // //         </Flex>\n// // //       </Box>\n\n// // //       {/* Search Drawer */}\n// // //       <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n// // //         <DrawerOverlay />\n// // //         <DrawerContent>\n// // //           <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n// // //           <DrawerBody>\n// // //             <Box d=\"flex\" pb={2}>\n// // //               <Input\n// // //                 placeholder=\"Search by name or email\"\n// // //                 mr={2}\n// // //                 value={search}\n// // //                 onChange={(e) => setSearch(e.target.value)}\n// // //               />\n// // //               <Button onClick={handleSearch}>Go</Button>\n// // //             </Box>\n// // //             {loading ? (\n// // //               <ChatLoading />\n// // //             ) : (\n// // //               searchResult?.map((user) => (\n// // //                 <UserListItem\n// // //                   key={user._id}\n// // //                   user={user}\n// // //                   handleFunction={() => accessChat(user._id)}\n// // //                 />\n// // //               ))\n// // //             )}\n// // //             {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n// // //           </DrawerBody>\n// // //         </DrawerContent>\n// // //       </Drawer>\n\n// // //       {/* 🧠 Reminder Sidebar */}\n// // //       {showReminderSidebar && (\n// // //         <ReminderSidebar onClose={() => setShowReminderSidebar(false)} />\n// // //       )}\n// // //     </>\n// // //   );\n// // // }\n\n// // // export default SideDrawer;\n// // import { Button } from \"@chakra-ui/button\";\n// // import { useDisclosure } from \"@chakra-ui/hooks\";\n// // import { Input } from \"@chakra-ui/input\";\n// // import { Box, Text, Flex } from \"@chakra-ui/layout\";\n// // import { AddIcon, BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\n// // import { FaBrain } from \"react-icons/fa\";\n// // import { IconButton } from \"@chakra-ui/react\";\n// // import ReminderSidebar from \"../reminders/ReminderSidebar\";\n// // import ReminderModal from \"../reminders/ReminderModal\";\n// // import ReminderButton from \"../reminders/ReminderButton copy\";\n// // import {\n// //   Menu,\n// //   MenuButton,\n// //   MenuDivider,\n// //   MenuItem,\n// //   MenuList,\n// // } from \"@chakra-ui/menu\";\n// // import {\n// //   Drawer,\n// //   DrawerBody,\n// //   DrawerContent,\n// //   DrawerHeader,\n// //   DrawerOverlay,\n// // } from \"@chakra-ui/modal\";\n// // import { Tooltip } from \"@chakra-ui/tooltip\";\n// // import { Avatar } from \"@chakra-ui/avatar\";\n// // import { useHistory } from \"react-router-dom\";\n// // import { useState } from \"react\";\n// // import axios from \"axios\";\n// // import { useToast } from \"@chakra-ui/toast\";\n// // import ChatLoading from \"../ChatLoading\";\n// // import { Spinner } from \"@chakra-ui/spinner\";\n// // import ProfileModal from \"./ProfileModal\";\n// // import NotificationBadge from \"react-notification-badge\";\n// // import { Effect } from \"react-notification-badge\";\n// // import { getSender } from \"../../config/ChatLogics\";\n// // import UserListItem from \"../userAvatar/UserListItem\";\n// // import { ChatState } from \"../../Context/ChatProvider\";\n\n// // function SideDrawer() {\n// //   const [search, setSearch] = useState(\"\");\n// //   const [searchResult, setSearchResult] = useState([]);\n// //   const [loading, setLoading] = useState(false);\n// //   const [loadingChat, setLoadingChat] = useState(false);\n// //   const [showReminderSidebar, setShowReminderSidebar] = useState(false);\n\n// //   const {\n// //     setSelectedChat,\n// //     user,\n// //     notification,\n// //     setNotification,\n// //     chats,\n// //     setChats,\n// //   } = ChatState();\n\n// //   const toast = useToast();\n// //   const { isOpen, onOpen, onClose } = useDisclosure();\n// //   const history = useHistory();\n\n// //   const logoutHandler = () => {\n// //     localStorage.removeItem(\"userInfo\");\n// //     history.push(\"/\");\n// //   };\n\n\n// //   const accessChat = async (userId) => {\n// //     try {\n// //       setLoadingChat(true);\n// //       const config = {\n// //         headers: {\n// //           \"Content-type\": \"application/json\",\n// //           Authorization: `Bearer ${user.token}`,\n// //         },\n// //       };\n// //       const { data } = await axios.post(`/api/chat`, { userId }, config);\n// //       if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n// //       setSelectedChat(data);\n// //       setLoadingChat(false);\n// //       onClose();\n// //     } catch (error) {\n// //       toast({\n// //         title: \"Error fetching the chat\",\n// //         description: error.message,\n// //         status: \"error\",\n// //         duration: 5000,\n// //         isClosable: true,\n// //         position: \"bottom-left\",\n// //       });\n// //     }\n// //   };\n\n// //   return (\n// //     <>\n// //       <Box\n// //         d=\"flex\"\n// //         justifyContent=\"space-between\"\n// //         alignItems=\"center\"\n// //         bg=\"white\"\n// //         w=\"100%\"\n// //         p=\"5px 10px\"\n// //         borderWidth=\"5px\"\n// //       >\n// //         <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n// //           <Button variant=\"ghost\" onClick={onOpen}>\n// //             <i className=\"fas fa-search\"></i>\n// //             <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n// //               Search User\n// //             </Text>\n// //           </Button>\n// //         </Tooltip>\n\n// //         {/* 🧠 sawCollab with Reminder Buttons */}\n// //         <Flex alignItems=\"center\" gap={2}>\n// //           <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n// //             sawCollab\n// //           </Text>\n\t\t  \n// //         </Flex>\n\n// //         {/* 🔔 Notifications and 👤 Profile */}\n// //         <Flex alignItems=\"center\" gap={2}>\n// // \t\t\t{/* 🧠 Brain Button */}\n// // \t\t\t<IconButton\n// //             icon={<FaBrain />}\n// //             variant=\"ghost\"\n// //             onClick={() => setShowReminderSidebar(!showReminderSidebar)}\n// //             aria-label=\"Show Reminders\"\n// //           />\n\n// //           {/* ➕ Plus Button inside ReminderModal */}\n// //           <ReminderButton>\n// //             <IconButton\n// //               icon={<AddIcon color=\"black\" />}\n// //               variant=\"ghost\"\n// //               aria-label=\"Add Reminder\"\n// //             />\n// //           </ReminderButton>\n// //           <Menu>\n// //             <MenuButton p={1}>\n// //               <NotificationBadge count={notification.length} effect={Effect.SCALE} />\n// //               <BellIcon fontSize=\"2xl\" m={1} />\n// //             </MenuButton>\n// //             <MenuList pl={2}>\n// //               {!notification.length && \"No New Messages\"}\n// //               {notification.map((notif) => (\n// //                 <MenuItem\n// //                   key={notif._id}\n// //                   onClick={() => {\n// //                     setSelectedChat(notif.chat);\n// //                     setNotification(notification.filter((n) => n !== notif));\n// //                   }}\n// //                 >\n// //                   {notif.chat.isGroupChat\n// //                     ? `New Message in ${notif.chat.chatName}`\n// //                     : `New Message from ${getSender(user, notif.chat.users)}`}\n// //                 </MenuItem>\n// //               ))}\n// //             </MenuList>\n// //           </Menu>\n\n// //           <Menu>\n// //             <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n// //               <Avatar size=\"sm\" cursor=\"pointer\" name={user.name} src={user.pic} />\n// //             </MenuButton>\n// //             <MenuList>\n// //               <ProfileModal user={user}>\n// //                 <MenuItem>My Profile</MenuItem>\n// //               </ProfileModal>\n// //               <MenuDivider />\n// //               <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n// //             </MenuList>\n// //           </Menu>\n// //         </Flex>\n// //       </Box>\n\n// //       {/* 🔍 Search Drawer */}\n// //       <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n// //         <DrawerOverlay />\n// //         <DrawerContent>\n// //           <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n// //           <DrawerBody>\n// //             <Box d=\"flex\" pb={2}>\n// //               <Input\n// //                 placeholder=\"Search by name or email\"\n// //                 mr={2}\n// //                 value={search}\n// //                 onChange={(e) => setSearch(e.target.value)}\n// //               />\n// //               <Button onClick={handleSearch}>Go</Button>\n// //             </Box>\n// //             {loading ? (\n// //               <ChatLoading />\n// //             ) : (\n// //               searchResult?.map((user) => (\n// //                 <UserListItem\n// //                   key={user._id}\n// //                   user={user}\n// //                   handleFunction={() => accessChat(user._id)}\n// //                 />\n// //               ))\n// //             )}\n// //             {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n// //           </DrawerBody>\n// //         </DrawerContent>\n// //       </Drawer>\n\n// //       {/* 🧠 Reminder Sidebar */}\n// //       {showReminderSidebar && (\n// //         <ReminderSidebar onClose={() => setShowReminderSidebar(false)} />\n// //       )}\n// //     </>\n// //   );\n// // }\n\n// // export default SideDrawer;\n// // import { useState ,useEffect} from \"react\";\n// // import axios from \"axios\";\n// // import {\n// // \tButton,\n// // \tInput,\n// // \tBox,\n// // \tText,\n// // \tFlex,\n// // \tIconButton,\n// // \tuseDisclosure,\n// // \tTabs,\n// // \tTabList,\n// // \tTabPanels,\n// // \tTab,\n// // \tTabPanel,\n// // \tVStack,\n// // \tSpinner,\n// // \tTooltip,\n// // \tuseToast,\n// // \tAvatar\n// // } from \"@chakra-ui/react\";\n// // import { AddIcon, BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\n// // import { FaBrain } from \"react-icons/fa\";\n// // import { ChatState } from \"../../Context/ChatProvider\";\n// // import ReminderModal from \"../reminders/ReminderModal\";\n// // import ReminderListModal from \"../reminders/ReminderListModal\";\n// // import ProfileModal from \"./ProfileModal\";\n\n// // function SideDrawer() {\n// //   const [showReminderSidebar, setShowReminderSidebar] = useState(false);\n// //   const [reminderType, setReminderType] = useState(\"private\"); // 'private' or 'public'\n// //   const { user } = ChatState();\n// //   const toast = useToast();\n\n// //   // For the + button modal\n// //   const { isOpen, onOpen, onClose } = useDisclosure();\n\n// //   // For the reminder list modal\n// //   const {\n// //     isOpen: isReminderListOpen,\n// //     onOpen: onReminderListOpen,\n// //     onClose: onReminderListClose,\n// //   } = useDisclosure();\n\n// //   // Fetch reminders based on type\n// //   const fetchReminders = async (type) => {\n// //     try {\n// //       const config = {\n// //         headers: { Authorization: `Bearer ${user.token}` },\n// //       };\n// //       const endpoint = type === \"private\" \n// //         ? \"/api/reminders/user\" \n// //         : \"/api/chat\";\n// //       const { data } = await axios.get(endpoint, config);\n// //       return data;\n// //     } catch (error) {\n// //       toast({\n// //         title: \"Error fetching reminders\",\n// //         status: \"error\",\n// //         duration: 3000,\n// //         isClosable: true,\n// //       });\n// //       return [];\n// //     }\n// //   };\n\n// //   return (\n// //     <>\n// //       <Flex\n// //         justifyContent=\"space-between\"\n// //         alignItems=\"center\"\n// //         bg=\"white\"\n// //         w=\"100%\"\n// //         p=\"5px 10px\"\n// //         borderWidth=\"5px\"\n// //       >\n// //         {/* Search Input */}\n// //         <Box flex=\"1\">\n// //           <Input placeholder=\"Search...\" />\n// //         </Box>\n\n// //         {/* App Name and Reminder Controls */}\n// //         <Flex alignItems=\"center\" gap={4}>\n// //           <Text fontSize=\"2xl\" fontFamily=\"Work sans\" fontWeight=\"bold\">\n// //             sawCollab\n// //           </Text>\n\n// //           {/* Brain Button - Toggles Reminder Sidebar */}\n// //           <Tooltip label=\"Show Reminders\">\n// //             <IconButton\n// //               icon={<FaBrain />}\n// //               variant=\"ghost\"\n// //               onClick={() => setShowReminderSidebar(!showReminderSidebar)}\n// //               aria-label=\"Show Reminders\"\n// //             />\n// //           </Tooltip>\n\n// //           {/* Plus Button - Creates New Reminder */}\n// //           <Tooltip label=\"Create Reminder\">\n// //             <IconButton\n// //               icon={<AddIcon />}\n// //               variant=\"ghost\"\n// //               onClick={onOpen}\n// //               aria-label=\"Add Reminder\"\n// //             />\n// //           </Tooltip>\n// //         </Flex>\n\n// //         {/* Notifications and Profile */}\n// //         <Flex alignItems=\"center\" gap={2}>\n// //           <IconButton\n// //             icon={<BellIcon />}\n// //             variant=\"ghost\"\n// //             onClick={onReminderListOpen}\n// //             aria-label=\"Notifications\"\n// //           />\n// //           <ProfileModal user={user}>\n// //             <Button rightIcon={<ChevronDownIcon />}>\n// //               <Avatar size=\"sm\" name={user.name} src={user.pic} />\n// //             </Button>\n// //           </ProfileModal>\n// //         </Flex>\n// //       </Flex>\n\n// //       {/* Reminder Modal (for + button) */}\n// //       <ReminderModal isOpen={isOpen} onClose={onClose} />\n\n// //       {/* Reminder List Modal (for bell icon) */}\n// //       <ReminderListModal \n// //         isOpen={isReminderListOpen} \n// //         onClose={onReminderListClose} \n// //       />\n\n// //       {/* Reminder Sidebar (for brain icon)\n// //       {showReminderSidebar && (\n// //         <Box\n// //           position=\"fixed\"\n// //           top=\"0\"\n// //           right=\"0\"\n// //           height=\"100vh\"\n// //           width=\"300px\"\n// //           bg=\"white\"\n// //           boxShadow=\"lg\"\n// //           zIndex=\"30\"\n// //           p={5}\n// //         >\n// //           <Flex justify=\"space-between\" align=\"center\" mb={4}>\n// //             <Text fontSize=\"xl\" fontWeight=\"bold\">\n// //               🔔 Reminders\n// //             </Text>\n// //             <IconButton\n// //               icon={<ChevronDownIcon />}\n// //               size=\"sm\"\n// //               onClick={() => setShowReminderSidebar(false)}\n// //               aria-label=\"Close sidebar\"\n// //             />\n// //           </Flex>\n\n// //           <Tabs isFitted variant=\"enclosed\">\n// //             <TabList mb=\"1em\">\n// //               <Tab onClick={() => setReminderType(\"private\")}>Private</Tab>\n// //               <Tab onClick={() => setReminderType(\"public\")}>Public</Tab>\n// //             </TabList>\n// //             <TabPanels>\n// //               <TabPanel>\n// //                 <ReminderList type=\"private\" />\n// //               </TabPanel>\n// //               <TabPanel>\n// //                 <ReminderList type=\"public\" />\n// //               </TabPanel>\n// //             </TabPanels>\n// //           </Tabs>\n// //         </Box>\n// //       )} */}\n// // \t  {/* Reminder Sidebar (for brain icon) */}\n// // {showReminderSidebar && (\n// //   <Box\n// //     position=\"fixed\"\n// //     top=\"0\"\n// //     right=\"0\"\n// //     height=\"100vh\"\n// //     width=\"300px\"\n// //     bg=\"white\"\n// //     boxShadow=\"lg\"\n// //     zIndex=\"30\"\n// //     p={0} // Remove outer padding to make scroll area better controlled\n// //     display=\"flex\"\n// //     flexDirection=\"column\"\n// //   >\n// //     <Box p={5} flexShrink={0}>\n// //       <Flex justify=\"space-between\" align=\"center\" mb={4}>\n// //         <Text fontSize=\"xl\" fontWeight=\"bold\">\n// //           🔔 Reminders\n// //         </Text>\n// //         <IconButton\n// //           icon={<ChevronDownIcon />}\n// //           size=\"sm\"\n// //           onClick={() => setShowReminderSidebar(false)}\n// //           aria-label=\"Close sidebar\"\n// //         />\n// //       </Flex>\n// //     </Box>\n\n// //     {/* Scrollable content */}\n// //     <Box\n// //       flex=\"1\"\n// //       overflowY=\"auto\"\n// //       px={5} // horizontal padding for scroll area\n// //       pb={5} // extra padding at bottom\n// //     >\n// //       <Tabs isFitted variant=\"enclosed\">\n// //         <TabList mb=\"1em\">\n// //           <Tab onClick={() => setReminderType(\"private\")}>Private</Tab>\n// //           <Tab onClick={() => setReminderType(\"public\")}>Public</Tab>\n// //         </TabList>\n// //         <TabPanels>\n// //           <TabPanel>\n// //             <ReminderList type=\"private\" />\n// //           </TabPanel>\n// //           <TabPanel>\n// //             <ReminderList type=\"public\" />\n// //           </TabPanel>\n// //         </TabPanels>\n// //       </Tabs>\n// //     </Box>\n// //   </Box>\n// // )}\n\n// //     </>\n// //   );\n// // }\n\n// // // Separate component for rendering reminders\n// // function ReminderList({ type }) {\n// //   const [reminders, setReminders] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const { user } = ChatState();\n\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       setLoading(true);\n// //       try {\n// //         const config = {\n// //           headers: { Authorization: `Bearer ${user.token}` },\n// //         };\n// //         const endpoint = type === \"private\" \n// //           ? \"/api/reminders/user\" \n// //           : \"/api/reminders/public\";\n// //         const { data } = await axios.get(endpoint, config);\n// //         setReminders(data);\n// //       } catch (error) {\n// //         console.error(\"Error fetching reminders\", error);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     fetchData();\n// //   }, [type, user]);\n\n// //   if (loading) return <Spinner />;\n// //   if (reminders.length === 0) return <Text>No {type} reminders</Text>;\n\n// //   return (\n// //     <VStack spacing={3} align=\"stretch\">\n// //       {reminders.map((reminder) => (\n// //         <Box\n// //           key={reminder._id}\n// //           p={3}\n// //           borderWidth=\"1px\"\n// //           borderRadius=\"md\"\n// //           bg=\"gray.50\"\n// //         >\n// //           <Text fontWeight=\"semibold\">{reminder.message}</Text>\n// //           <Text fontSize=\"sm\" color=\"gray.500\">\n// //             Due: {new Date(reminder.dueAt).toLocaleString()}\n// //           </Text>\n// //           {type === \"public\" && (\n// //             <Text fontSize=\"xs\" color=\"gray.400\">\n// //               From: {reminder.sender.name || \"Unknown\"}\n// //             </Text>\n// //           )}\n// //         </Box>\n// //       ))}\n// //     </VStack>\n// //   );\n// // }\n\n// // export default SideDrawer;\n// // import { useState, useEffect } from \"react\";\n// // import axios from \"axios\";\n// // import {\n// //   Button,\n// //   Input,\n// //   Box,\n// //   Text,\n// //   Flex,\n// //   IconButton,\n// //   useDisclosure,\n// //   Tabs,\n// //   TabList,\n// //   TabPanels,\n// //   Tab,\n// //   TabPanel,\n// //   VStack,\n// //   Spinner,\n// //   Tooltip,\n// //   useToast,\n// //   Avatar,\n// //   Menu,\n// //   MenuButton,\n// //   MenuList,\n// //   MenuItem,\n// //   MenuDivider\n// // } from \"@chakra-ui/react\";\n// // import { AddIcon, BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\n// // import { FaBrain } from \"react-icons/fa\";\n// // import { useHistory } from \"react-router-dom\";\n// // import { ChatState } from \"../../Context/ChatProvider\";\n// // import ReminderModal from \"../reminders/ReminderModal\";\n// // import ReminderListModal from \"../reminders/ReminderListModal\";\n// // import ProfileModal from \"./ProfileModal\";\n\n// // function SideDrawer() {\n// //   const [showReminderSidebar, setShowReminderSidebar] = useState(false);\n// //   const [reminderType, setReminderType] = useState(\"private\");\n// //   const { user } = ChatState();\n// //   const toast = useToast();\n// //   const history = useHistory();\n\n// //   const { isOpen, onOpen, onClose } = useDisclosure();\n// //   const {\n// //     isOpen: isReminderListOpen,\n// //     onOpen: onReminderListOpen,\n// //     onClose: onReminderListClose,\n// //   } = useDisclosure();\n\n// //   const logoutHandler = () => {\n// //     localStorage.removeItem(\"userInfo\");\n// //     history.push(\"/\");\n// //   };\n// //   const handleSearch = async () => {\n// //     if (!search) {\n// //       toast({\n// //         title: \"Please Enter something in search\",\n// //         status: \"warning\",\n// //         duration: 5000,\n// //         isClosable: true,\n// //         position: \"top-left\",\n// //       });\n// //       return;\n// //     }\n\n// //     try {\n// //       setLoading(true);\n// //       const config = {\n// //         headers: {\n// //           Authorization: `Bearer ${user.token}`,\n// //         },\n// //       };\n// //       const { data } = await axios.get(`/api/user?search=${search}`, config);\n// //       setSearchResult(data);\n// //       setLoading(false);\n// //     } catch (error) {\n// //       toast({\n// //         title: \"Error Occurred!\",\n// //         description: \"Failed to Load the Search Results\",\n// //         status: \"error\",\n// //         duration: 5000,\n// //         isClosable: true,\n// //         position: \"bottom-left\",\n// //       });\n// //     }\n// //   };\n\n// //   return (\n// //     <>\n// //       <Flex\n// //         justifyContent=\"space-between\"\n// //         alignItems=\"center\"\n// //         bg=\"white\"\n// //         w=\"100%\"\n// //         p=\"5px 10px\"\n// //         borderWidth=\"5px\"\n// //       >\n// //         {/* Search Input */}\n// //         <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n// //          <DrawerOverlay />\n// //          <DrawerContent>\n// //            <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n// //            <DrawerBody>\n// //             <Box d=\"flex\" pb={2}>\n\n// //                <Input\n\n// //                 placeholder=\"Search by name or email\"\n// //                 mr={2}\n// //                 value={search}\n// //                 onChange={(e) => setSearch(e.target.value)}\n// //               />\n// //               <Button onClick={handleSearch}>Go</Button>\n// //             </Box>\n// //             {loading ? (\n// //               <ChatLoading />\n// //             ) : (\n// //               searchResult?.map((user) => (\n// //                 <UserListItem\n// //                   key={user._id}\n// //                   user={user}\n// //                   handleFunction={() => accessChat(user._id)}\n// //                 />\n// //               ))\n// //             )}\n// //             {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n// //           </DrawerBody>\n// //         </DrawerContent>\n// //       </Drawer>\n\n\n// //         {/* App Name and Reminder Controls */}\n// //         <Flex alignItems=\"center\" gap={4}>\n// //           <Text fontSize=\"2xl\" fontFamily=\"Work sans\" fontWeight=\"bold\">\n// //             sawCollab\n// //           </Text>\n\n// //           <Tooltip label=\"Show Reminders\">\n// //             <IconButton\n// //               icon={<FaBrain />}\n// //               variant=\"ghost\"\n// //               onClick={() => setShowReminderSidebar(!showReminderSidebar)}\n// //               aria-label=\"Show Reminders\"\n// //             />\n// //           </Tooltip>\n\n// //           <Tooltip label=\"Create Reminder\">\n// //             <IconButton\n// //               icon={<AddIcon />}\n// //               variant=\"ghost\"\n// //               onClick={onOpen}\n// //               aria-label=\"Add Reminder\"\n// //             />\n// //           </Tooltip>\n// //         </Flex>\n\n// //         {/* Notifications and Profile Menu */}\n// //         <Flex alignItems=\"center\" gap={2}>\n// //           <IconButton\n// //             icon={<BellIcon />}\n// //             variant=\"ghost\"\n// //             onClick={onReminderListOpen}\n// //             aria-label=\"Notifications\"\n// //           />\n// //           <Menu>\n// //             <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n// //               <Avatar size=\"sm\" cursor=\"pointer\" name={user.name} src={user.pic} />\n// //             </MenuButton>\n// //             <MenuList>\n// //               <ProfileModal user={user}>\n// //                 <MenuItem>My Profile</MenuItem>\n// //               </ProfileModal>\n// //               <MenuDivider />\n// //               <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n// //             </MenuList>\n// //           </Menu>\n// //         </Flex>\n// //       </Flex>\n\n// //       <ReminderModal isOpen={isOpen} onClose={onClose} />\n// //       <ReminderListModal isOpen={isReminderListOpen} onClose={onReminderListClose} />\n\n// //       {/* Scrollable Reminder Sidebar */}\n// //       {showReminderSidebar && (\n// //         <Box\n// //           position=\"fixed\"\n// //           top=\"0\"\n// //           right=\"0\"\n// //           height=\"100vh\"\n// //           width=\"300px\"\n// //           bg=\"white\"\n// //           boxShadow=\"lg\"\n// //           zIndex=\"30\"\n// //           p={0}\n// //           display=\"flex\"\n// //           flexDirection=\"column\"\n// //         >\n// //           <Box p={5} flexShrink={0}>\n// //             <Flex justify=\"space-between\" align=\"center\" mb={4}>\n// //               <Text fontSize=\"xl\" fontWeight=\"bold\">\n// //                 🔔 Reminders\n// //               </Text>\n// //               <IconButton\n// //                 icon={<ChevronDownIcon />}\n// //                 size=\"sm\"\n// //                 onClick={() => setShowReminderSidebar(false)}\n// //                 aria-label=\"Close sidebar\"\n// //               />\n// //             </Flex>\n// //           </Box>\n\n// //           <Box flex=\"1\" overflowY=\"auto\" px={5} pb={5}>\n// //             <Tabs isFitted variant=\"enclosed\">\n// //               <TabList mb=\"1em\">\n// //                 <Tab onClick={() => setReminderType(\"private\")}>Private</Tab>\n// //                 <Tab onClick={() => setReminderType(\"public\")}>Public</Tab>\n// //               </TabList>\n// //               <TabPanels>\n// //                 <TabPanel>\n// //                   <ReminderList type=\"private\" />\n// //                 </TabPanel>\n// //                 <TabPanel>\n// //                   <ReminderList type=\"public\" />\n// //                 </TabPanel>\n// //               </TabPanels>\n// //             </Tabs>\n// //           </Box>\n// //         </Box>\n// //       )}\n// //     </>\n// //   );\n// // }\n\n// // // ReminderList Component (unchanged)\n// // function ReminderList({ type }) {\n// //   const [reminders, setReminders] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const { user } = ChatState();\n\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       setLoading(true);\n// //       try {\n// //         const config = {\n// //           headers: { Authorization: `Bearer ${user.token}` },\n// //         };\n// //         const endpoint =\n// //           type === \"private\" ? \"/api/reminders/user\" : \"/api/reminders/public\";\n// //         const { data } = await axios.get(endpoint, config);\n// //         setReminders(data);\n// //       } catch (error) {\n// //         console.error(\"Error fetching reminders\", error);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n// //     fetchData();\n// //   }, [type, user]);\n\n// //   if (loading) return <Spinner />;\n// //   if (reminders.length === 0) return <Text>No {type} reminders</Text>;\n\n// //   return (\n// //     <VStack spacing={3} align=\"stretch\">\n// //       {reminders.map((reminder) => (\n// //         <Box\n// //           key={reminder._id}\n// //           p={3}\n// //           borderWidth=\"1px\"\n// //           borderRadius=\"md\"\n// //           bg=\"gray.50\"\n// //         >\n// //           <Text fontWeight=\"semibold\">{reminder.message}</Text>\n// //           <Text fontSize=\"sm\" color=\"gray.500\">\n// //             Due: {new Date(reminder.dueAt).toLocaleString()}\n// //           </Text>\n// //           {type === \"public\" && (\n// //             <Text fontSize=\"xs\" color=\"gray.400\">\n// //               From: {reminder.sender.name || \"Unknown\"}\n// //             </Text>\n// //           )}\n// //         </Box>\n// //       ))}\n// //     </VStack>\n// //   );\n// // }\n\n\n// import { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { CheckIcon, RepeatIcon, DeleteIcon } from \"@chakra-ui/icons\";\n// import {\n//   Button,\n//   Input,\n//   Box,\n//   Text,\n//   Flex,\n//   IconButton,\n//   useDisclosure,\n//   Tabs,\n//   TabList,\n//   TabPanels,\n//   Tab,\n//   TabPanel,\n//   VStack,\n//   Spinner,\n//   Tooltip,\n//   useToast,\n//   Avatar,\n//   Menu,\n//   MenuButton,\n//   MenuList,\n//   MenuItem,\n//   MenuDivider,\n//   Drawer,\n//   DrawerOverlay,\n//   DrawerContent,\n//   DrawerHeader,\n//   DrawerBody\n// } from \"@chakra-ui/react\";\n// import { SearchIcon, AddIcon } from \"@chakra-ui/icons\";\n// import { FaBrain } from \"react-icons/fa\";\n// import { useHistory } from \"react-router-dom\";\n// import { ChatState } from \"../../Context/ChatProvider\";\n// import ReminderModal from \"../reminders/ReminderModal\";\n// import ReminderListModal from \"../reminders/ReminderListModal\";\n// import ProfileModal from \"./ProfileModal\";\n// import ChatLoading from \"../ChatLoading\";\n// import UserListItem from \"../userAvatar/UserListItem\";\n// import { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\n// import NotificationBadge from \"react-notification-badge\";\n// import { Effect } from \"react-notification-badge\";\n// function SideDrawer() {\n//   const [showReminderSidebar, setShowReminderSidebar] = useState(false);\n//   const [reminderType, setReminderType] = useState(\"private\");\n//   const [search, setSearch] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [loadingChat, setLoadingChat] = useState(false);\n//   const [searchResult, setSearchResult] = useState([]);\n\n//   const { isOpen: isSearchOpen, onOpen: onSearchOpen, onClose: onSearchClose } = useDisclosure();\n//   const { isOpen: isReminderModalOpen, onOpen: onReminderModalOpen, onClose: onReminderModalClose } = useDisclosure();\n//   const { isOpen: isReminderListOpen, onOpen: onReminderListOpen, onClose: onReminderListClose } = useDisclosure();\n\n//   const { user, chats, setChats, selectedChat, setSelectedChat } = ChatState();\n//   const toast = useToast();\n//   const history = useHistory();\n\n//   const logoutHandler = () => {\n//     localStorage.removeItem(\"userInfo\");\n//     history.push(\"/\");\n//   };\n\n//   const accessChat = async (userId) => {\n//     try {\n//       setLoadingChat(true);\n//       const config = {\n//         headers: {\n//           \"Content-type\": \"application/json\",\n//           Authorization: `Bearer ${user.token}`,\n//         },\n//       };\n\n//       const { data } = await axios.post(\"/api/chat\", { userId }, config);\n\n//       if (!chats.find((c) => c._id === data._id)) {\n//         setChats([data, ...chats]);\n//       }\n\n//       setSelectedChat(data);  // ✅ correctly update context\n//       setLoadingChat(false);\n//       onSearchClose();\n//     } catch (error) {\n//       toast({\n//         title: \"Error fetching the chat\",\n//         description: error.message,\n//         status: \"error\",\n//         duration: 5000,\n//         isClosable: true,\n//         position: \"bottom-left\",\n//       });\n//       setLoadingChat(false);\n//     }\n//   };\n\n//   const handleSearch = async () => {\n//     if (!search.trim()) {\n//       toast({\n//         title: \"Please enter something in search\",\n//         status: \"warning\",\n//         duration: 5000,\n//         isClosable: true,\n//         position: \"top-left\",\n//       });\n//       return;\n//     }\n\n//     try {\n//       setLoading(true);\n//       const config = {\n//         headers: {\n//           Authorization: `Bearer ${user.token}`,\n//         },\n//       };\n//       const { data } = await axios.get(`/api/user?search=${search}`, config);\n//       const filteredResults = data.filter((u) => u._id !== user._id);\n//       setSearchResult(filteredResults);\n//       setLoading(false);\n//     } catch (error) {\n//       toast({\n//         title: \"Error Occurred!\",\n//         description: \"Failed to load the search results\",\n//         status: \"error\",\n//         duration: 5000,\n//         isClosable: true,\n//         position: \"bottom-left\",\n//       });\n//     }\n//   };\n\n//   return (\n//     <>\n//       <Flex justifyContent=\"space-between\" alignItems=\"center\" bg=\"white\" w=\"100%\" p=\"5px 10px\" borderWidth=\"5px\">\n//         {/* Search Drawer */}\n//         <Drawer placement=\"left\" onClose={onSearchClose} isOpen={isSearchOpen}>\n//           <DrawerOverlay />\n//           <DrawerContent>\n//             <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n//             <DrawerBody>\n//               <Box display=\"flex\" pb={2}>\n//                 <Input\n//                   placeholder=\"Search by name or email\"\n//                   mr={2}\n//                   value={search}\n//                   onChange={(e) => setSearch(e.target.value)}\n//                 />\n//                 <Button onClick={handleSearch}>Go</Button>\n//               </Box>\n//               {loading ? (\n//                 <ChatLoading />\n//               ) : (\n//                 searchResult?.map((searchUser) => (\n//                   <UserListItem\n//                     key={searchUser._id}\n//                     user={searchUser}\n//                     handleFunction={() => accessChat(searchUser._id)}\n//                   />\n//                 ))\n//               )}\n//               {loadingChat && <Spinner ml=\"auto\" display=\"flex\" />}\n//             </DrawerBody>\n//           </DrawerContent>\n//         </Drawer>\n\n//         {/* Title and Actions */}\n//         <Flex alignItems=\"center\" gap={4}>\n//           <Text fontSize=\"2xl\" fontFamily=\"Work sans\" fontWeight=\"bold\">\t&nbsp;\t&nbsp;\t&nbsp;sawCollab  \t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;   </Text>\n//           <Tooltip label=\"Search Users\" \t>\n\t\t\t\n//             <IconButton \t icon={<SearchIcon />} variant=\"ghost\" onClick={onSearchOpen} aria-label=\"Search Users\" />\n//           </Tooltip>\n//           <Tooltip label=\"Show Reminders\">\n//             <IconButton icon={<FaBrain />} variant=\"ghost\" onClick={() => setShowReminderSidebar(!showReminderSidebar)} aria-label=\"Show Reminders\" />\n//           </Tooltip>\n//           <Tooltip label=\"Create Reminder\">\n//             <IconButton icon={<AddIcon />} variant=\"ghost\" onClick={onReminderModalOpen} aria-label=\"Add Reminder\" />\n//           </Tooltip>\n//         </Flex>\n\n//         {/* Notifications and Profile */}\n//         <Flex alignItems=\"center\" gap={2}>\n// \t\t<Menu>\n//     <MenuButton p={1}>\n//       <NotificationBadge count={notification.length} effect={Effect.SCALE} />\n//       <BellIcon fontSize=\"2xl\" m={1} />\n//     </MenuButton>\n//     <MenuList pl={2}>\n//       {!notification.length && \"No New Messages\"}\n//       {notification.map((notif) => (\n//         <MenuItem\n//           key={notif._id}\n//           onClick={() => {\n//             setSelectedChat(notif.chat);\n//             setNotification(notification.filter((n) => n !== notif));\n//           }}\n//         >\n//           {notif.chat.isGroupChat\n//             ? `New Message in ${notif.chat.chatName}`\n//             : `New Message from ${getSender(user, notif.chat.users)}`}\n//         </MenuItem>\n//       ))}\n//     </MenuList>\n//   </Menu>\n//           <Menu>\n//             <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n//               <Avatar size=\"sm\" cursor=\"pointer\" name={user.name} src={user.pic} />\n//             </MenuButton>\n//             <MenuList>\n//               <ProfileModal user={user}>\n//                 <MenuItem>My Profile</MenuItem>\n//               </ProfileModal>\n//               <MenuDivider />\n//               <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n//             </MenuList>\n//           </Menu>\n//         </Flex>\n//       </Flex>\n\n//       {/* Modals */}\n//       <ReminderModal isOpen={isReminderModalOpen} onClose={onReminderModalClose} />\n//       <ReminderListModal isOpen={isReminderListOpen} onClose={onReminderListClose} />\n\n//       {/* Reminder Sidebar */}\n//       {showReminderSidebar && (\n//         <Box position=\"fixed\" top=\"0\" right=\"0\" height=\"100vh\" width=\"300px\" bg=\"white\" boxShadow=\"lg\" zIndex=\"30\" p={0} display=\"flex\" flexDirection=\"column\">\n//           <Box p={5} flexShrink={0}>\n//             <Flex justify=\"space-between\" align=\"center\" mb={4}>\n//               <Text fontSize=\"xl\" fontWeight=\"bold\">🔔 Reminders</Text>\n//               <IconButton icon={<ChevronDownIcon />} size=\"sm\" onClick={() => setShowReminderSidebar(false)} aria-label=\"Close sidebar\" />\n//             </Flex>\n//           </Box>\n//           <Box flex=\"1\" overflowY=\"auto\" px={5} pb={5}>\n//             <Tabs isFitted variant=\"enclosed\">\n//               <TabList mb=\"1em\">\n//                 <Tab onClick={() => setReminderType(\"private\")}>Private</Tab>\n//                 <Tab onClick={() => setReminderType(\"public\")}>Public</Tab>\n//               </TabList>\n//               <TabPanels>\n//                 <TabPanel>\n//                   <ReminderList type=\"private\" />\n//                 </TabPanel>\n//                 <TabPanel>\n//                   <ReminderList type=\"public\" />\n//                 </TabPanel>\n//               </TabPanels>\n//             </Tabs>\n//           </Box>\n//         </Box>\n//       )}\n//     </>\n//   );\n// }\n\n// // function ReminderList({ type }) {\n// //   const [reminders, setReminders] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const { user } = ChatState();\n\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       setLoading(true);\n// //       try {\n// //         const config = {\n// //           headers: { Authorization: `Bearer ${user.token}` },\n// //         };\n// //         const endpoint = type === \"private\" ? \"/api/reminders/user\" : \"/api/reminders/public\";\n// //         const { data } = await axios.get(endpoint, config);\n// //         setReminders(data);\n// //       } catch (error) {\n// //         console.error(\"Error fetching reminders\", error);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n// //     fetchData();\n// //   }, [type, user]);\n\n// //   if (loading) return <Spinner />;\n// //   if (reminders.length === 0) return <Text>No {type} reminders</Text>;\n\n// //   return (\n// //     <VStack spacing={3} align=\"stretch\">\n// //       {reminders.map((reminder) => (\n// //         <Box key={reminder._id} p={3} borderWidth=\"1px\" borderRadius=\"md\" bg=\"gray.50\">\n// //           <Text fontWeight=\"semibold\">{reminder.message}</Text>\n// //           <Text fontSize=\"sm\" color=\"gray.500\">\n// //             Due: {new Date(reminder.dueAt).toLocaleString()}\n// //           </Text>\n// //           {type === \"public\" && (\n// //             <Text fontSize=\"xs\" color=\"gray.400\">\n// //               From: {reminder.sender?.name || \"Unknown\"}\n// //             </Text>\n// //           )}\n// //         </Box>\n// //       ))}\n// //     </VStack>\n// //   );\n// // }\n// // function ReminderList({ type }) {\n// // \tconst [reminders, setReminders] = useState([]);\n// // \tconst [loading, setLoading] = useState(true);\n// // \tconst { user } = ChatState();\n// // \tconst toast = useToast();\n  \n// // \tconst fetchReminders = async () => {\n// // \t  setLoading(true);\n// // \t  try {\n// // \t\tconst config = {\n// // \t\t  headers: { Authorization: `Bearer ${user.token}` },\n// // \t\t};\n// // \t\tconst endpoint = type === \"private\" ? \"/api/reminders/user\" : \"/api/reminders/public\";\n// // \t\tconst { data } = await axios.get(endpoint, config);\n// // \t\tsetReminders(data);\n// // \t  } catch (error) {\n// // \t\tconsole.error(\"Error fetching reminders\", error);\n// // \t\ttoast({\n// // \t\t  title: \"Failed to load reminders\",\n// // \t\t  status: \"error\",\n// // \t\t  duration: 3000,\n// // \t\t  isClosable: true,\n// // \t\t});\n// // \t  } finally {\n// // \t\tsetLoading(false);\n// // \t  }\n// // \t};\n  \n// // \tuseEffect(() => {\n// // \t  fetchReminders();\n// // \t}, [type, user]);\n  \n// // \tconst handleMarkAsDone = async (id) => {\n// // \t\ttry {\n// // \t\t  await axios.put(`/api/reminders/${id}/done`, {}, {\n// // \t\t\theaders: { Authorization: `Bearer ${user.token}` },\n// // \t\t  });\n// // \t\t  toast({ title: \"Marked as done!\", status: \"success\", isClosable: true });\n// // \t\t  fetchReminders();\n// // \t\t} catch (err) {\n// // \t\t  console.error(err);\n// // \t\t  toast({ title: \"Failed to mark as done\", status: \"error\", isClosable: true });\n// // \t\t}\n// // \t  };\n\t  \n// // \t  const handleRemindAgain = async (id) => {\n// // \t\ttry {\n// // \t\t  await axios.put(`/api/reminders/${id}/reschedule`, {}, {\n// // \t\t\theaders: { Authorization: `Bearer ${user.token}` },\n// // \t\t  });\n// // \t\t  toast({ title: \"Reminder snoozed!\", status: \"info\", isClosable: true });\n// // \t\t  fetchReminders();\n// // \t\t} catch (err) {\n// // \t\t  console.error(err);\n// // \t\t  toast({ title: \"Failed to snooze reminder\", status: \"error\", isClosable: true });\n// // \t\t}\n// // \t  };\n\t  \n// // \t  const handleDelete = async (id) => {\n// // \t\ttry {\n// // \t\t  await axios.delete(`/api/reminders/${id}`, {\n// // \t\t\theaders: { Authorization: `Bearer ${user.token}` },\n// // \t\t  });\n// // \t\t  toast({ title: \"Reminder deleted\", status: \"warning\", isClosable: true });\n// // \t\t  fetchReminders();\n// // \t\t} catch (err) {\n// // \t\t  console.error(err);\n// // \t\t  toast({ title: \"Failed to delete reminder\", status: \"error\", isClosable: true });\n// // \t\t}\n// // \t  };\n// // \tif (loading) return <Spinner />;\n// // \tif (reminders.length === 0) return <Text>No {type} reminders</Text>;\n  \n// // \treturn (\n// // \t  <VStack spacing={3} align=\"stretch\">\n// // \t\t{reminders.map((reminder) => (\n// // \t\t  <Box\n// // \t\t\tkey={reminder._id}\n// // \t\t\tp={3}\n// // \t\t\tborderWidth=\"1px\"\n// // \t\t\tborderRadius=\"md\"\n// // \t\t\tbg=\"gray.50\"\n// // \t\t  >\n// // \t\t\t<Text fontWeight=\"semibold\">{reminder.message}</Text>\n// // \t\t\t<Text fontSize=\"sm\" color=\"gray.500\">\n// // \t\t\t  Due: {new Date(reminder.dueAt).toLocaleString()}\n// // \t\t\t</Text>\n// // \t\t\t{type === \"public\" && (\n// // \t\t\t  <Text fontSize=\"xs\" color=\"gray.400\">\n// // \t\t\t\tFrom: {reminder.sender?.name || \"Unknown\"}\n// // \t\t\t  </Text>\n// // \t\t\t)}\n  \n// // \t\t\t{/* Action Buttons */}\n// // \t\t\t<Flex mt={2} gap={2}>\n// // \t\t\t  <Tooltip label=\"Mark as Done\">\n// // \t\t\t\t<IconButton\n// // \t\t\t\t  size=\"sm\"\n// // \t\t\t\t  colorScheme=\"green\"\n// // \t\t\t\t  icon={<CheckIcon />}\n// // \t\t\t\t  onClick={() => handleMarkAsDone(reminder._id)}\n// // \t\t\t\t  aria-label=\"Mark as Done\"\n// // \t\t\t\t/>\n// // \t\t\t  </Tooltip>\n// // \t\t\t  <Tooltip label=\"Remind Me Again\">\n// // \t\t\t\t<IconButton\n// // \t\t\t\t  size=\"sm\"\n// // \t\t\t\t  colorScheme=\"blue\"\n// // \t\t\t\t  icon={<RepeatIcon />}\n// // \t\t\t\t  onClick={() => handleRemindAgain(reminder._id)}\n// // \t\t\t\t  aria-label=\"Snooze Reminder\"\n// // \t\t\t\t/>\n// // \t\t\t  </Tooltip>\n// // \t\t\t  <Tooltip label=\"Delete\">\n// // \t\t\t\t<IconButton\n// // \t\t\t\t  size=\"sm\"\n// // \t\t\t\t  colorScheme=\"red\"\n// // \t\t\t\t  icon={<DeleteIcon />}\n// // \t\t\t\t  onClick={() => handleDelete(reminder._id)}\n// // \t\t\t\t  aria-label=\"Delete Reminder\"\n// // \t\t\t\t/>\n// // \t\t\t  </Tooltip>\n// // \t\t\t</Flex>\n// // \t\t  </Box>\n// // \t\t))}\n// // \t  </VStack>\n// // \t);\n// //   }\n  \n// function ReminderList({ type }) {\n// \tconst [reminders, setReminders] = useState([]);\n// \tconst [loading, setLoading] = useState(true);\n// \tconst { user } = ChatState();\n// \tconst toast = useToast();\n  \n// \tconst fetchReminders = async () => {\n// \t  setLoading(true);\n// \t  try {\n// \t\tconst config = {\n// \t\t  headers: { Authorization: `Bearer ${user.token}` },\n// \t\t};\n// \t\tconst endpoint =\n// \t\t  type === \"private\" ? \"/api/reminders/user\" : \"/api/reminders/public\";\n// \t\tconst { data } = await axios.get(endpoint, config);\n// \t\tsetReminders(data);\n// \t  } catch (error) {\n// \t\tconsole.error(\"Error fetching reminders\", error);\n// \t\ttoast({\n// \t\t  title: \"Failed to load reminders\",\n// \t\t  description: error?.response?.data?.message || error.message,\n// \t\t  status: \"error\",\n// \t\t  duration: 3000,\n// \t\t  isClosable: true,\n// \t\t});\n// \t  } finally {\n// \t\tsetLoading(false);\n// \t  }\n// \t};\n  \n// \tuseEffect(() => {\n// \t  fetchReminders();\n// \t}, [type]);\n  \n// \tconst handleMarkAsDone = async (id) => {\n// \t  try {\n// \t\tawait axios.put(\n// \t\t  `/api/reminders/${id}/done`,\n// \t\t  {},\n// \t\t  {\n// \t\t\theaders: { Authorization: `Bearer ${user.token}` },\n// \t\t  }\n// \t\t);\n// \t\ttoast({\n// \t\t  title: \"Marked as done!\",\n// \t\t  status: \"success\",\n// \t\t  isClosable: true,\n// \t\t});\n// \t\tfetchReminders();\n// \t  } catch (err) {\n// \t\tconsole.error(\"Mark as done failed\", err);\n// \t\ttoast({\n// \t\t  title: \"Failed to mark as done\",\n// \t\t  description: err?.response?.data?.message || err.message,\n// \t\t  status: \"error\",\n// \t\t  isClosable: true,\n// \t\t});\n// \t  }\n// \t};\n  \n// \tconst handleRemindAgain = async (id) => {\n// \t  try {\n// \t\tconst newDueAt = new Date(Date.now() +5* 1000); // 10 mins later\n//     await axios.put(\n//       `/api/reminders/${id}/reschedule`,\n//       { dueAt: newDueAt },\n//       {\n//         headers: { Authorization: `Bearer ${user.token}` },\n//       }\n//     );\n// \t\ttoast({\n// \t\t  title: \"Reminder snoozed!\",\n// \t\t  status: \"info\",\n// \t\t  isClosable: true,\n// \t\t});\n// \t\tfetchReminders();\n// \t  } catch (err) {\n// \t\tconsole.error(\"Snooze failed\", err);\n// \t\ttoast({\n// \t\t  title: \"Failed to snooze reminder\",\n// \t\t  description: err?.response?.data?.message || err.message,\n// \t\t  status: \"error\",\n// \t\t  isClosable: true,\n// \t\t});\n// \t  }\n// \t};\n  \n// \tconst handleDelete = async (id) => {\n// \t  try {\n// \t\tawait axios.delete(`/api/reminders/${id}`, {\n// \t\t  headers: { Authorization: `Bearer ${user.token}` },\n// \t\t});\n// \t\ttoast({\n// \t\t  title: \"Reminder deleted\",\n// \t\t  status: \"warning\",\n// \t\t  isClosable: true,\n// \t\t});\n// \t\tfetchReminders();\n// \t  } catch (err) {\n// \t\tconsole.error(\"Delete failed\", err);\n// \t\ttoast({\n// \t\t  title: \"Failed to delete reminder\",\n// \t\t  description: err?.response?.data?.message || err.message,\n// \t\t  status: \"error\",\n// \t\t  isClosable: true,\n// \t\t});\n// \t  }\n// \t};\n  \n// \tif (loading) return <Spinner />;\n// \tif (reminders.length === 0) return <Text>No {type} reminders</Text>;\n  \n// \treturn (\n// \t  <VStack spacing={3} align=\"stretch\">\n// \t\t{reminders.map((reminder) => (\n// \t\t  <Box\n// \t\t\tkey={reminder._id}\n// \t\t\tp={3}\n// \t\t\tborderWidth=\"1px\"\n// \t\t\tborderRadius=\"md\"\n// \t\t\tbg=\"gray.50\"\n// \t\t  >\n// \t\t\t<Text fontWeight=\"semibold\">{reminder.title || reminder.message}</Text>\n// \t\t\t<Text fontSize=\"sm\" color=\"gray.500\">\n// \t\t\t  Due: {new Date(reminder.dueAt).toLocaleString()}\n// \t\t\t</Text>\n// \t\t\t{type === \"public\" && (\n// \t\t\t  <Text fontSize=\"xs\" color=\"gray.400\">\n// \t\t\t\tFrom: {reminder.sender?.name || \"Unknown\"}\n// \t\t\t  </Text>\n// \t\t\t)}\n  \n// \t\t\t<Flex mt={2} gap={2}>\n// \t\t\t  <Tooltip label=\"Mark as Done\">\n// \t\t\t\t<IconButton\n// \t\t\t\t  size=\"sm\"\n// \t\t\t\t  colorScheme=\"green\"\n// \t\t\t\t  icon={<CheckIcon />}\n// \t\t\t\t  onClick={() => handleMarkAsDone(reminder._id)}\n// \t\t\t\t  aria-label=\"Mark as Done\"\n// \t\t\t\t/>\n// \t\t\t  </Tooltip>\n// \t\t\t  <Tooltip label=\"Remind Me Again\">\n// \t\t\t\t<IconButton\n// \t\t\t\t  size=\"sm\"\n// \t\t\t\t  colorScheme=\"blue\"\n// \t\t\t\t  icon={<RepeatIcon />}\n// \t\t\t\t  onClick={() => handleRemindAgain(reminder._id)}\n// \t\t\t\t  aria-label=\"Snooze Reminder\"\n// \t\t\t\t/>\n// \t\t\t  </Tooltip>\n// \t\t\t  <Tooltip label=\"Delete\">\n// \t\t\t\t<IconButton\n// \t\t\t\t  size=\"sm\"\n// \t\t\t\t  colorScheme=\"red\"\n// \t\t\t\t  icon={<DeleteIcon />}\n// \t\t\t\t  onClick={() => handleDelete(reminder._id)}\n// \t\t\t\t  aria-label=\"Delete Reminder\"\n// \t\t\t\t/>\n// \t\t\t  </Tooltip>\n// \t\t\t</Flex>\n// \t\t  </Box>\n// \t\t))}\n// \t  </VStack>\n// \t);\n//   }\n  \n// export default SideDrawer;\n// Updated: SideDrawer.js with Glossy Blue Glassmorphism UI for Reminders Sidebar\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Button,\n  Input,\n  Box,\n  Text,\n  Flex,\n  IconButton,\n  useDisclosure,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  VStack,\n  Spinner,\n  Tooltip,\n  useToast,\n  Avatar,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  MenuDivider,\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerHeader,\n  DrawerBody,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport {\n  SearchIcon,\n  AddIcon,\n  BellIcon,\n  ChevronDownIcon,\n  CheckIcon,\n  RepeatIcon,\n  DeleteIcon,\n} from \"@chakra-ui/icons\";\nimport { FaBrain } from \"react-icons/fa\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport ReminderModal from \"../reminders/ReminderModal\";\nimport ReminderListModal from \"../reminders/ReminderListModal\";\nimport ProfileModal from \"./ProfileModal\";\nimport ChatLoading from \"../ChatLoading\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { Portal } from \"@chakra-ui/react\";\nfunction SideDrawer() {\n  const [showReminderSidebar, setShowReminderSidebar] = useState(false);\n  const [reminderType, setReminderType] = useState(\"private\");\n  const [search, setSearch] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n  const [searchResult, setSearchResult] = useState([]);\n\n  const { isOpen: isSearchOpen, onOpen: onSearchOpen, onClose: onSearchClose } = useDisclosure();\n  const { isOpen: isReminderModalOpen, onOpen: onReminderModalOpen, onClose: onReminderModalClose } = useDisclosure();\n  const { isOpen: isReminderListOpen, onOpen: onReminderListOpen, onClose: onReminderListClose } = useDisclosure();\n\n  const { user, chats, setChats, selectedChat, setSelectedChat, notification, setNotification } = ChatState();\n  const toast = useToast();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const accessChat = async (userId) => {\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\"/api/chat\", { userId }, config);\n      if (!chats.find((c) => c._id === data._id)) {\n        setChats([data, ...chats]);\n      }\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onSearchClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoadingChat(false);\n    }\n  };\n\n  const handleSearch = async () => {\n    if (!search.trim()) {\n      toast({\n        title: \"Please enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n    try {\n      setLoading(true);\n      const config = {\n        headers: { Authorization: `Bearer ${user.token}` },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      const filteredResults = data.filter((u) => u._id !== user._id);\n      setSearchResult(filteredResults);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: \"Failed to load the search results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const glassBg = useColorModeValue(\"rgba(255, 255, 255, 0.55)\", \"rgba(0, 30, 60, 0.25)\");\n  const borderGlass = useColorModeValue(\"1px solid rgba(0, 0, 255, 0.2)\", \"1px solid rgba(200, 200, 255, 0.2)\");\n\n  return (\n    <>\n      \n\t  <Flex\n  justifyContent=\"space-between\"\n  alignItems=\"center\"\n  bg={glassBg}\n  backdropFilter=\"blur(12px) saturate(180%)\"\n  borderBottom=\"1px solid rgba(255, 255, 255, 0.2)\"\n  boxShadow=\"0 4px 30px rgba(0, 0, 0, 0.1)\"\n  px={3}\n  py={1.5}\n  borderRadius=\"md\"\n>\n  {/* Left: Logo */}\n  <Text fontSize=\"2xl\" fontWeight=\"bold\" fontFamily=\"Work Sans\" color=\"white\">\n    sawCollab\n  </Text>\n\n  {/* Center: Controls */}\n  <Flex direction=\"row\" alignItems=\"center\" gap={4}>\n  <Tooltip label=\"Search Users\" hasArrow>\n    <IconButton\n      icon={<SearchIcon />}\n      variant=\"ghost\"\n      aria-label=\"Search Users\"\n      onClick={onSearchOpen}\n      bg=\"rgba(43, 2, 2, 0.05)\"\n\t  \n      _hover={{ bg: \"rgba(255,255,255,0.15)\" }}\n    />\n  </Tooltip>\n\n  <Tooltip label=\"Brain: Show Reminders\" hasArrow>\n    <IconButton\n      icon={<FaBrain />}\n      variant=\"ghost\"\n      aria-label=\"Show Reminders\"\n      onClick={() => setShowReminderSidebar(!showReminderSidebar)}\n      bg=\"rgba(43, 2, 2, 0.05)\"\n      _hover={{ bg: \"rgba(255,255,255,0.15)\" }}\n\t   px={3}\n\t  py={5}\n    />\n  </Tooltip>\n\n  <Tooltip label=\"Create Reminder\" hasArrow>\n    <IconButton\n      icon={<AddIcon />}\n      variant=\"ghost\"\n      aria-label=\"Create Reminder\"\n      onClick={onReminderModalOpen}\n      bg=\"rgba(43, 2, 2, 0.05)\"\n      _hover={{ bg: \"rgba(255,255,255,0.15)\" }}\n    />\n  </Tooltip>\n</Flex>\n<Drawer placement=\"left\" onClose={onSearchClose} isOpen={isSearchOpen}>\n  <DrawerOverlay />\n  <DrawerContent>\n    <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n    <DrawerBody>\n      {/* Search Input */}\n      <Input\n        placeholder=\"Search by name or email\"\n        value={search}\n        onChange={(e) => setSearch(e.target.value)}\n        mb={4}\n      />\n    <Button onClick={handleSearch} colorScheme=\"blue\" mb={4}>Search</Button>\n\t {/* Show loading or results */}\n  {loading ? (\n    <ChatLoading />\n  ) : (\n    searchResult.map((searchUser) => (\n      <UserListItem\n        key={searchUser._id}\n        user={searchUser}\n        handleFunction={() => accessChat(searchUser._id)}\n      />\n    ))\n  )}\n\n  {loadingChat && <Spinner ml=\"auto\" display=\"flex\" />}\n    </DrawerBody>\n  </DrawerContent>\n</Drawer>\n\n\n  {/* Right: Notifications and Profile */}\n  <Flex gap={2} align=\"center\">\n    <Menu>\n  <MenuButton position=\"relative\" p={0} zIndex=\"popover\">\n    <NotificationBadge count={notification?.length || 0} effect={Effect.SCALE} />\n    <BellIcon fontSize=\"2xl\" color=\"white\" />\n  </MenuButton>\n\n  <Portal>\n    <MenuList zIndex=\"popover\">\n      {!notification?.length && <MenuItem>No New Messages</MenuItem>}\n      {notification?.map((notif) => (\n        <MenuItem\n          key={notif._id}\n          onClick={() => {\n            setSelectedChat(notif.chat);\n            setNotification(notification.filter((n) => n !== notif));\n          }}\n        >\n          <Box>\n            <Text fontWeight=\"bold\">\n              {notif.chat.isGroupChat\n                ? `Group: ${notif.chat.chatName}`\n                : ` ${notif.chat.users.find((u) => u._id !== user._id)?.name}`}\n            </Text>\n            <Text fontSize=\"sm\" color=\"gray.500\" noOfLines={1}>\n              {notif.content || \"New Message...\"}\n            </Text>\n          </Box>\n        </MenuItem>\n      ))}\n    </MenuList>\n  </Portal>\n</Menu>\n\n\n<Menu>\n  <MenuButton\n    as={Button}\n    bg=\"rgba(255, 255, 255, 0.1)\"\n    _hover={{ bg: \"rgba(255, 255, 255, 0.2)\" }}\n    _active={{ bg: \"rgba(255, 255, 255, 0.3)\" }}\n    backdropFilter=\"blur(12px)\"\n    borderRadius=\"full\"\n    px={2}\n    py={1}\n    minW=\"auto\"\n    rightIcon={<ChevronDownIcon />}\n    zIndex=\"popover\"\n  >\n    <Avatar size=\"sm\" name={user.name} src={user.pic} />\n  </MenuButton>\n  <Portal>\n    <MenuList zIndex=\"popover\">\n      <ProfileModal user={user}>\n        <MenuItem>My Profile</MenuItem>\n      </ProfileModal>\n      <MenuDivider />\n      <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n    </MenuList>\n  </Portal>\n</Menu>\n\n  </Flex>\n</Flex>\n\n\n      <ReminderModal isOpen={isReminderModalOpen} onClose={onReminderModalClose} />\n      <ReminderListModal isOpen={isReminderListOpen} onClose={onReminderListClose} />\n\n      {showReminderSidebar && (\n        <Box\n          position=\"fixed\"\n          top=\"0\"\n          right=\"0\"\n          height=\"100vh\"\n          width={{ base: \"100%\", md: \"350px\" }}\n          bg={glassBg}\n          backdropFilter=\"blur(14px)\"\n          borderLeft={borderGlass}\n          zIndex=\"30\"\n          p={0}\n          display=\"flex\"\n          flexDirection=\"column\"\n          borderRadius=\"md\"\n        >\n          <Box p={5} flexShrink={0}>\n            <Flex justify=\"space-between\" align=\"center\" mb={4}>\n              <Text fontSize=\"xl\" fontWeight=\"bold\" color=\"white\">🔔 Reminders</Text>\n              <IconButton icon={<ChevronDownIcon />} size=\"sm\" onClick={() => setShowReminderSidebar(false)} aria-label=\"Close sidebar\" />\n            </Flex>\n          </Box>\n          <Box flex=\"1\" overflowY=\"auto\" px={5} pb={5}>\n            <Tabs isFitted variant=\"soft-rounded\" colorScheme=\"blue\">\n              <TabList mb=\"1em\">\n                <Tab onClick={() => setReminderType(\"private\")}>Private</Tab>\n                <Tab onClick={() => setReminderType(\"public\")}>Public</Tab>\n              </TabList>\n              <TabPanels>\n                <TabPanel><ReminderList type=\"private\" /></TabPanel>\n                <TabPanel><ReminderList type=\"public\" /></TabPanel>\n              </TabPanels>\n            </Tabs>\n          </Box>\n        </Box>\n      )}\n    </>\n  );\n}\nfunction ReminderList({ type }) {\n  const [reminders, setReminders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const { user } = ChatState();\n  const toast = useToast();\n\n  const fetchReminders = async () => {\n    setLoading(true);\n    try {\n      const config = {\n        headers: { Authorization: `Bearer ${user.token}` },\n      };\n      const endpoint = type === \"private\" ? \"/api/reminders/user\" : \"/api/reminders/public\";\n      const { data } = await axios.get(endpoint, config);\n      setReminders(data);\n    } catch (error) {\n      toast({\n        title: \"Failed to load reminders\",\n        description: error?.response?.data?.message || error.message,\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchReminders();\n  }, [type]);\n\n  const handleMarkAsDone = async (id) => {\n    try {\n      await axios.put(`/api/reminders/${id}/done`, {}, {\n        headers: { Authorization: `Bearer ${user.token}` },\n      });\n      toast({ title: \"Marked as done!\", status: \"success\", isClosable: true });\n      fetchReminders();\n    } catch (err) {\n      toast({\n        title: \"Failed to mark as done\",\n        description: err?.response?.data?.message || err.message,\n        status: \"error\",\n        isClosable: true,\n      });\n    }\n  };\n\n  const handleRemindAgain = async (id) => {\n    try {\n      const newDueAt = new Date(Date.now() + 5 * 60 * 1000); // 5 mins later\n      await axios.put(`/api/reminders/${id}/reschedule`, { dueAt: newDueAt }, {\n        headers: { Authorization: `Bearer ${user.token}` },\n      });\n      toast({ title: \"Reminder snoozed!\", status: \"info\", isClosable: true });\n      fetchReminders();\n    } catch (err) {\n      toast({\n        title: \"Failed to snooze reminder\",\n        description: err?.response?.data?.message || err.message,\n        status: \"error\",\n        isClosable: true,\n      });\n    }\n  };\n\n  const handleDelete = async (id) => {\n    try {\n      await axios.delete(`/api/reminders/${id}`, {\n        headers: { Authorization: `Bearer ${user.token}` },\n      });\n      toast({ title: \"Reminder deleted\", status: \"warning\", isClosable: true });\n      fetchReminders();\n    } catch (err) {\n      toast({\n        title: \"Failed to delete reminder\",\n        description: err?.response?.data?.message || err.message,\n        status: \"error\",\n        isClosable: true,\n      });\n    }\n  };\n\n  if (loading) return <Spinner />;\n  if (reminders.length === 0) return <Text>No {type} reminders</Text>;\n\n  return (\n    <VStack spacing={3} align=\"stretch\">\n      {reminders.map((reminder) => (\n        <Box key={reminder._id} p={3} borderWidth=\"1px\" borderRadius=\"md\" bg=\"gray.50\">\n          <Text fontWeight=\"semibold\">{reminder.title || reminder.message}</Text>\n          <Text fontSize=\"sm\" color=\"gray.500\">Due: {new Date(reminder.dueAt).toLocaleString()}</Text>\n          {type === \"public\" && <Text fontSize=\"xs\" color=\"gray.400\">From: {reminder.sender?.name || \"Unknown\"}</Text>}\n          <Flex mt={2} gap={2}>\n            <Tooltip label=\"Mark as Done\">\n              <IconButton size=\"sm\" colorScheme=\"green\" icon={<CheckIcon />} onClick={() => handleMarkAsDone(reminder._id)} aria-label=\"Mark as Done\" />\n            </Tooltip>\n            <Tooltip label=\"Remind Me Again\">\n              <IconButton size=\"sm\" colorScheme=\"blue\" icon={<RepeatIcon />} onClick={() => handleRemindAgain(reminder._id)} aria-label=\"Snooze Reminder\" />\n            </Tooltip>\n            <Tooltip label=\"Delete\">\n              <IconButton size=\"sm\" colorScheme=\"red\" icon={<DeleteIcon />} onClick={() => handleDelete(reminder._id)} aria-label=\"Delete Reminder\" />\n            </Tooltip>\n          </Flex>\n        </Box>\n      ))}\n    </VStack>\n  );\n}\n\nexport default SideDrawer;\n","export const registerServiceWorker = async () => {\r\n\tif (\"serviceWorker\" in navigator) {\r\n\t\ttry {\r\n\t\t\tconst registration = await navigator.serviceWorker.register(\"/service-worker.js\");\r\n\t\t\tconsole.log(\"✅ Service Worker registered:\", registration);\r\n\t\t\treturn registration;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"❌ Service Worker registration failed:\", error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t} else {\r\n\t\tconsole.warn(\"🚫 Service workers not supported in this browser.\");\r\n\t\tthrow new Error(\"Service workers not supported\");\r\n\t}\r\n};\r\n\r\nexport const notificationHelpers = {\r\n\tisSupported: () => \"Notification\" in window && \"serviceWorker\" in navigator,\r\n};\r\n\r\nexport const requestNotificationPermission = async () => {\r\n\tif (!(\"Notification\" in window)) {\r\n\t\tconsole.warn(\"🚫 This browser does not support notifications.\");\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst currentPermission = Notification.permission;\r\n\tconsole.log(\"🔔 Notification permission currently:\", currentPermission);\r\n\r\n\tif (currentPermission === \"granted\") return true;\r\n\r\n\tif (currentPermission !== \"denied\") {\r\n\t\ttry {\r\n\t\t\tconst permission = await Notification.requestPermission();\r\n\t\t\tconsole.log(\"🔔 User responded with permission:\", permission);\r\n\t\t\treturn permission === \"granted\";\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(\"🛑 Error requesting notification permission:\", err);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tconsole.log(\"🔕 Notification permission was denied earlier.\");\r\n\treturn false;\r\n};\r\n\r\n//college\r\nexport const showReminderNotification = (reminder) => {\r\n\tif (Notification.permission !== \"granted\") return;\r\n\r\n\t// Optional fallback if title is missing\r\n\tconst title = reminder.title || \"Reminder\";\r\n\r\n\tnavigator.serviceWorker.ready.then((registration) => {\r\n\t\tregistration.showNotification(`🔔 ${title}`, {\r\n\t\t\tbody: reminder.message,\r\n\t\t\ticon: \"/favicon.ico\",\r\n\t\t\tactions: [\r\n\t\t\t\t{ action: \"mark-done\", title: \"✅ Mark Done\" },\r\n\t\t\t\t{ action: \"remind-again\", title: \"⏰ Remind Later\" },\r\n\t\t\t],\r\n\t\t\tdata: {\r\n\t\t\t\tid: reminder._id || reminder.id,\r\n\t\t\t\tmessage: reminder.message,\r\n\t\t\t\ttoken: reminder.token, // Must be passed from caller\r\n\t\t\t},\r\n\t\t\ttag: `reminder-${reminder._id || reminder.id}`,\r\n\t\t\trenotify: true,\r\n\t\t});\r\n\t});\r\n};\r\n\r\n// export const showReminderNotification = (reminder) => {\r\n// \tif (Notification.permission !== \"granted\") return;\r\n\r\n// \tnavigator.serviceWorker.ready.then((registration) => {\r\n// \t\tregistration.showNotification(`🔔 ${reminder.title}`, {\r\n// \t\t\tbody: reminder.message,\r\n// \t\t\ticon: \"/favicon.ico\",\r\n// \t\t\tactions: [\r\n// \t\t\t\t{ action: \"mark-done\", title: \"✅ Mark Done\" },\r\n// \t\t\t\t{ action: \"remind-again\", title: \"⏰ Remind Later\" },\r\n// \t\t\t],\r\n// \t\t\tdata: {\r\n// \t\t\t\tid: reminder._id,\r\n// \t\t\t\tmessage: reminder.message,\r\n// \t\t\t\ttoken: reminder.token, // Ensure you pass this\r\n// \t\t\t  },\r\n// \t\t\ttag: \"reminder-\" + reminder.id,\r\n// \t\t\trenotify: true,\r\n// \t\t});\r\n// \t});\r\n// };\r\n\r\nexport const triggerReminderNotification = (message = \"Reminder alert!\") => {\r\n\tif (Notification.permission !== \"granted\") return;\r\n\r\n\tnavigator.serviceWorker.ready.then((registration) => {\r\n\t\tregistration.showNotification(\"⏰ Reminder Due\", {\r\n\t\t\tbody: message,\r\n\t\t\ticon: \"/favicon.ico\",\r\n\t\t\ttag: \"reminder-\" + Date.now(),\r\n\t\t\trenotify: true,\r\n\t\t\tactions: [\r\n\t\t\t\t{ action: \"mark-done\", title: \"✔️ Mark as Done\" },\r\n\t\t\t\t{ action: \"remind-again\", title: \"🔁 Remind Me Again\" },\r\n\t\t\t],\r\n\t\t\tdata: {\r\n\t\t\t\tmessage,\r\n\t\t\t\tid: Date.now(),\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n};\r\n\r\n\r\n// // notificationService.js\r\n\r\n// // ✅ Register the Service Worker\r\n// export const registerServiceWorker = async () => {\r\n// \tif (\"serviceWorker\" in navigator) {\r\n// \t  try {\r\n// \t\tconst registration = await navigator.serviceWorker.register(\"/service-worker.js\");\r\n// \t\tconsole.log(\"✅ Service Worker registered:\", registration);\r\n// \t\treturn registration;\r\n// \t  } catch (error) {\r\n// \t\tconsole.error(\"❌ Service Worker registration failed:\", error);\r\n// \t\tthrow error;\r\n// \t  }\r\n// \t} else {\r\n// \t  console.warn(\"🚫 Service workers not supported in this browser.\");\r\n// \t  throw new Error(\"Service workers not supported\");\r\n// \t}\r\n//   };\r\n  \r\n//   // ✅ Utility to check support\r\n//   export const notificationHelpers = {\r\n// \tisSupported: () => \"Notification\" in window && \"serviceWorker\" in navigator,\r\n//   };\r\n  \r\n//   // ✅ Request Notification Permission\r\n//   export const requestNotificationPermission = async () => {\r\n// \tif (!(\"Notification\" in window)) {\r\n// \t  console.warn(\"🚫 This browser does not support notifications.\");\r\n// \t  return false;\r\n// \t}\r\n  \r\n// \tconst currentPermission = Notification.permission;\r\n// \tconsole.log(\"🔔 Notification permission currently:\", currentPermission);\r\n  \r\n// \tif (currentPermission === \"granted\") {\r\n// \t  return true;\r\n// \t}\r\n  \r\n// \tif (currentPermission !== \"denied\") {\r\n// \t  try {\r\n// \t\tconst permission = await Notification.requestPermission();\r\n// \t\tconsole.log(\"🔔 User responded with permission:\", permission);\r\n// \t\treturn permission === \"granted\";\r\n// \t  } catch (err) {\r\n// \t\tconsole.error(\"🛑 Error requesting notification permission:\", err);\r\n// \t\treturn false;\r\n// \t  }\r\n// \t}\r\n  \r\n// \tconsole.log(\"🔕 Notification permission was denied earlier.\");\r\n// \treturn false;\r\n//   };\r\n  \r\n//   // ✅ Show Reminder Notification (used for real reminders)\r\n//   export const showReminderNotification = (reminder) => {\r\n// \tif (Notification.permission !== \"granted\") {\r\n// \t  console.warn(\"🔕 Notifications not granted\");\r\n// \t  return;\r\n// \t}\r\n  \r\n// \tnavigator.serviceWorker.ready.then((registration) => {\r\n// \t  registration.showNotification(`🔔 ${reminder.title}`, {\r\n// \t\tbody: reminder.message,\r\n// \t\ticon: \"/favicon.ico\", // Public root path\r\n// \t\tactions: [\r\n// \t\t  { action: \"mark-done\", title: \"✅ Mark Done\" },\r\n// \t\t  { action: \"remind-again\", title: \"⏰ Remind Later\" },\r\n// \t\t],\r\n// \t\ttag: `reminder-${reminder.id}`,\r\n// \t\trenotify: true,\r\n// \t\tdata: {\r\n// \t\t  id: reminder.id,\r\n// \t\t  message: reminder.message,\r\n// \t\t},\r\n// \t  });\r\n// \t});\r\n//   };\r\n  \r\n//   // ✅ Manual Test Trigger for Development\r\n//   export const triggerReminderNotification = (message = \"Reminder alert!\") => {\r\n// \tconsole.log(\"✅ Triggering notification\");\r\n  \r\n// \tif (Notification.permission !== \"granted\") {\r\n// \t  console.warn(\"🔕 Notifications not granted\");\r\n// \t  return;\r\n// \t}\r\n  \r\n// \tnavigator.serviceWorker.ready.then((registration) => {\r\n// \t  registration.showNotification(\"⏰ Reminder Due\", {\r\n// \t\tbody: message,\r\n// \t\ticon: \"/favicon.ico\", // Use absolute path to public directory\r\n// \t\ttag: `reminder-${Date.now()}`,\r\n// \t\trenotify: true,\r\n// \t\tactions: [\r\n// \t\t  { action: \"mark-done\", title: \"✔️ Mark as Done\" },\r\n// \t\t  { action: \"remind-again\", title: \"🔁 Remind Me Again\" },\r\n// \t\t],\r\n// \t\tdata: {\r\n// \t\t  message,\r\n// \t\t  id: Date.now(),\r\n// \t\t},\r\n// \t  });\r\n// \t});\r\n//   };\r\n  \r\n\r\n// // // export const registerServiceWorker = () => {\r\n// // // \tif ('serviceWorker' in navigator) {\r\n// // // \t  return navigator.serviceWorker.register('/service-worker.js');\r\n// // // \t}\r\n// // // \treturn Promise.reject('Service workers not supported');\r\n// // //   };\r\n\r\n// // //   export const requestNotificationPermission = async () => {\r\n// // // \tif (!('Notification' in window)) return false;\r\n\t\r\n// // // \tif (Notification.permission === 'default') {\r\n// // // \t  return await Notification.requestPermission();\r\n// // // \t}\r\n// // // \treturn Notification.permission;\r\n// // //   };\r\n  \r\n// // //   export const showReminderNotification = (reminder) => {\r\n// // // \tif (Notification.permission !== 'granted') return;\r\n  \r\n// // // \tnavigator.serviceWorker?.ready.then(registration => {\r\n// // // \t  registration.showNotification(`🔔 ${reminder.title}`, {\r\n// // // \t\tbody: reminder.message,\r\n// // // \t\ticon: '/favicon.ico',\r\n// // // \t\tactions: [\r\n// // // \t\t  { action: 'mark-done', title: '✅ Mark Done' },\r\n// // // \t\t  { action: 'remind-again', title: '⏰ Remind Later' }\r\n// // // \t\t],\r\n// // // \t\tdata: { id: reminder.id }\r\n// // // \t  });\r\n// // // \t});\r\n// // //   };\r\n// // // utils/notificationService.js\r\n\r\n// // export const registerServiceWorker = async () => {\r\n// // \t// if (\"serviceWorker\" in navigator) {\r\n// // \t//   try {\r\n// // \t// \tconst registration = await navigator.serviceWorker.register(\"/service-worker.js\");\r\n// // \t// \tconsole.log(\"Service Worker registered:\", registration);\r\n// // \t// \treturn registration;\r\n// // \t//   } catch (err) {\r\n// // \t// \tconsole.error(\"Service Worker registration failed:\", err);\r\n// // \t// \tthrow err;\r\n// // \t//   }\r\n// // \t// }\r\n// // \twindow.addEventListener('load', () => {\r\n// // \t\tnavigator.serviceWorker.register('/service-worker.js').then(reg => {\r\n// // \t\t  console.log(\"✅ Service Worker registered\", reg);\r\n// // \t\t}).catch(err => {\r\n// // \t\t  console.error(\"❌ Service Worker registration failed\", err);\r\n// // \t\t});\r\n// // \t  });\r\n// //   };\r\n  \r\n// //   // Permission check helper\r\n// //   export const notificationHelpers = {\r\n// // \tisSupported: () => \"Notification\" in window && \"serviceWorker\" in navigator,\r\n// //   };\r\n  \r\n// //   // Request permission\r\n// // //   export const requestNotificationPermission = async () => {\r\n// // // \tif (!(\"Notification\" in window)) return false;\r\n  \r\n// // // \tconst permission = await Notification.requestPermission();\r\n// // // \treturn permission === \"granted\";\r\n// // //   };\r\n// // // export const requestNotificationPermission = async () => {\r\n// // // \tif (!(\"Notification\" in window)) {\r\n// // // \t  console.warn(\"🚫 Notification API not supported.\");\r\n// // // \t  return false;\r\n// // // \t}\r\n  \r\n// // // \ttry {\r\n// // // \t  const permission = await Notification.requestPermission();\r\n// // // \t  return permission === \"granted\";\r\n// // // \t} catch (err) {\r\n// // // \t  console.error(\"🛑 Error requesting notification permission:\", err);\r\n// // // \t  return false;\r\n// // // \t}\r\n// // //   };\r\n  \r\n// // export async function requestNotificationPermission() {\r\n// // \tif (!(\"Notification\" in window)) {\r\n// // \t  console.warn(\"This browser does not support notifications.\");\r\n// // \t  return false;\r\n// // \t}\r\n  \r\n// // \tconst currentPermission = Notification.permission;\r\n// // \tconsole.log(\"🔔 Notification permission currently:\", currentPermission);\r\n  \r\n// // \tif (currentPermission === \"granted\") {\r\n// // \t  return true;\r\n// // \t}\r\n  \r\n// // \tif (currentPermission !== \"denied\") {\r\n// // \t  const permission = await Notification.requestPermission();\r\n// // \t  console.log(\"🔔 User responded with permission:\", permission);\r\n// // \t  return permission === \"granted\";\r\n// // \t}\r\n  \r\n// // \tconsole.log(\"🔕 Notification permission denied previously.\");\r\n// // \treturn false;\r\n// //   }\r\n  \r\n// //   // ⏰ Trigger browser notification with action buttons\r\n// //   export const triggerReminderNotification = (message = \"Reminder alert!\") => {\r\n// // \tconsole.log(\"Triggering notification\")\r\n// // \tif (Notification.permission === \"granted\") {\r\n// // \t  navigator.serviceWorker.ready.then((registration) => {\r\n// // \t\tregistration.showNotification(\"⏰ Reminder Due\", {\r\n// // \t\t  body: message,\r\n// // \t\t  icon: \"https://cdn-icons-png.flaticon.com/512/786/786197.png\",\r\n// // \t\t  tag: \"reminder-\" + Date.now(),\r\n// // \t\t  renotify: true,\r\n// // \t\t  actions: [\r\n// // \t\t\t{ action: \"mark-done\", title: \"✔️ Mark as Done\" },\r\n// // \t\t\t{ action: \"remind-again\", title: \"🔁 Remind Me Again\" },\r\n// // \t\t  ],\r\n// // \t\t  data: {\r\n// // \t\t\tmessage,\r\n// // \t\t\tid: Date.now(),\r\n// // \t\t  },\r\n// // \t\t});\r\n// // \t  });\r\n// // \t}\r\n// //   };\r\n\r\n// // utils/notificationService.js\r\n\r\n// // ✅ Register the service worker immediately when called\r\n// export const registerServiceWorker = async () => {\r\n// \tif (\"serviceWorker\" in navigator) {\r\n// \t  try {\r\n// \t\tconst registration = await navigator.serviceWorker.register(\"/service-worker.js\");\r\n// \t\tconsole.log(\"✅ Service Worker registered:\", registration);\r\n// \t\treturn registration;\r\n// \t  } catch (error) {\r\n// \t\tconsole.error(\"❌ Service Worker registration failed:\", error);\r\n// \t\tthrow error;\r\n// \t  }\r\n// \t} else {\r\n// \t  console.warn(\"🚫 Service workers not supported in this browser.\");\r\n// \t  throw new Error(\"Service workers not supported\");\r\n// \t}\r\n//   };\r\n  \r\n//   // ✅ Check if notifications and service workers are supported\r\n//   export const notificationHelpers = {\r\n// \tisSupported: () => \"Notification\" in window && \"serviceWorker\" in navigator,\r\n//   };\r\n  \r\n//   // ✅ Request permission for showing notifications\r\n//   export const requestNotificationPermission = async () => {\r\n// \tif (!(\"Notification\" in window)) {\r\n// \t  console.warn(\"🚫 This browser does not support notifications.\");\r\n// \t  return false;\r\n// \t}\r\n  \r\n// \tconst currentPermission = Notification.permission;\r\n// \tconsole.log(\"🔔 Notification permission currently:\", currentPermission);\r\n  \r\n// \tif (currentPermission === \"granted\") {\r\n// \t  return true;\r\n// \t}\r\n  \r\n// \tif (currentPermission !== \"denied\") {\r\n// \t  try {\r\n// \t\tconst permission = await Notification.requestPermission();\r\n// \t\tconsole.log(\"🔔 User responded with permission:\", permission);\r\n// \t\treturn permission === \"granted\";\r\n// \t  } catch (err) {\r\n// \t\tconsole.error(\"🛑 Error requesting notification permission:\", err);\r\n// \t\treturn false;\r\n// \t  }\r\n// \t}\r\n  \r\n// \tconsole.log(\"🔕 Notification permission was denied earlier.\");\r\n// \treturn false;\r\n//   };\r\n  \r\n//   // ✅ Show reminder notification with passed `reminder` object\r\n//   export const showReminderNotification = (reminder) => {\r\n// \tif (Notification.permission !== \"granted\") return;\r\n  \r\n// \tnavigator.serviceWorker?.ready.then((registration) => {\r\n// \t  registration.showNotification(`🔔 ${reminder.title}`, {\r\n// \t\tbody: reminder.message,\r\n// \t\ticon: \"/favicon.ico\", // make sure this icon exists\r\n// \t\tactions: [\r\n// \t\t  { action: \"mark-done\", title: \"✅ Mark Done\" },\r\n// \t\t  { action: \"remind-again\", title: \"⏰ Remind Later\" },\r\n// \t\t],\r\n// \t\tdata: {\r\n// \t\t  id: reminder.id,\r\n// \t\t  message: reminder.message,\r\n// \t\t},\r\n// \t\ttag: \"reminder-\" + reminder.id,\r\n// \t\trenotify: true,\r\n// \t  });\r\n// \t});\r\n//   };\r\n  \r\n//   // ✅ Manually trigger a test reminder (optional use in dev)\r\n//   export const triggerReminderNotification = (message = \"Reminder alert!\") => {\r\n// \tconsole.log(\"✅ Triggering notification\"); // ← This should appear\r\n// \tif (Notification.permission === \"granted\") {\r\n// \t  navigator.serviceWorker.ready.then((registration) => {\r\n// \t\tregistration.showNotification(\"⏰ Reminder Due\", {\r\n// \t\t  body: message,\r\n// \t\t  icon: \"./favicon.ico\",\r\n// \t\t  tag: \"reminder-\" + Date.now(),\r\n// \t\t  renotify: true,\r\n// \t\t  actions: [\r\n// \t\t\t{ action: \"mark-done\", title: \"✔️ Mark as Done\" },\r\n// \t\t\t{ action: \"remind-again\", title: \"🔁 Remind Me Again\" },\r\n// \t\t  ],\r\n// \t\t  data: {\r\n// \t\t\tmessage,\r\n// \t\t\tid: Date.now(),\r\n// \t\t  },\r\n// \t\t});\r\n// \t  });\r\n// \t}\r\n//   };\r\n  \r\n  ","\n\n\n\n\n\nimport { Box } from \"@chakra-ui/layout\";\nimport { useEffect, useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport ReminderListModal from \"../components/reminders/ReminderListModal\";\n\nimport {\n\ttriggerReminderNotification,\n\tregisterServiceWorker,\n\trequestNotificationPermission,\n\tnotificationHelpers,\n  } from \"../utils/notificationService\"\n  \n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  useEffect(() => {\n\tconst initNotifications = async () => {\n\t  try {\n\t\tawait registerServiceWorker();\n  \n\t\tif (notificationHelpers.isSupported()) {\n\t\t  const isGranted = await requestNotificationPermission();\n\t\t  if (!isGranted) {\n\t\t\tconsole.warn(\"🔕 Notification permission not granted.\");\n\t\t  }\n\t\t}\n\t  } catch (error) {\n\t\tconsole.error(\"Notification setup failed:\", error);\n\t  }\n\t};\n\tconst setVh = () => {\n    const vh = window.innerHeight * 0.01;\n    document.documentElement.style.setProperty('--vh', `${vh}px`);\n  };\n  setVh();\n  window.addEventListener('resize', setVh);\n  return () => window.removeEventListener('resize', setVh);\n  \n\tinitNotifications();\n  }, []);\n  \n\n  const triggerTestReminder = () => {\n    if (!(\"Notification\" in window)) {\n      alert(\"This browser does not support notifications.\");\n      return;\n    }\n\n    if (Notification.permission === \"default\") {\n      Notification.requestPermission().then((permission) => {\n        if (permission === \"granted\") {\n          showNotification();\n        } else {\n          console.log(\"❌ Notification permission denied\");\n        }\n      });\n    } else if (Notification.permission === \"granted\") {\n      showNotification();\n    } else {\n      console.log(\"❌ Notification permission denied\");\n    }\n  };\n\n  const showNotification = () => {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.showNotification(\"🔔 Test Reminder\", {\n        body: \"This is a test reminder with actions\",\n        icon: \"/icon.png\", // ✅ Make sure it exists in public/\n        actions: [\n          { action: \"mark-done\", title: \"✅ Mark as Done\" },\n          { action: \"remind-again\", title: \"🔁 Remind Me Again\" },\n        ],\n        data: {\n          message: \"\",\n          id: \"test-id\",\n        },\n      });\n    });\n  };\n\n  return (\n    <div style={{ width: \"100vw\" ,height:\"100vh\",background: \"linear-gradient(135deg, #667eea 0%, #764ba2 100%)\",\n        display: \"flex\",\n        flexDirection: \"column\",}}>\n     \n\n      {user && <SideDrawer />}\n\t   {/* 🔘 Button to trigger a test reminder */}\n\t\n      \n\t   \n \n\n\n      <Box d=\"flex\" justifyContent=\"space-between\" bgGradient=\"linear(to-r, purple.800, blue.500)\" w=\"100%\"  p=\"10px\"     display=\"flex\" \n      \n        h=\"91.5vh\"\n       \n        sx={{\n          backdropFilter: \"blur(14px)\",\n          WebkitBackdropFilter: \"blur(14px)\",\n          background: \"rgba(255, 255, 255, 0.1)\",\n          border: \"1px solid rgba(255, 255, 255, 0.2)\",\n          borderRadius: \"10px\",\n          boxShadow: \"0 8px 32px 0 rgba(31, 38, 135, 0.37)\",\n        }} >\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />}\n        {user && <ReminderListModal />}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n\n\n\n// import { Box } from \"@chakra-ui/layout\";\n// import { useState } from \"react\";\n// import Chatbox from \"../components/Chatbox\";\n// import MyChats from \"../components/MyChats\";\n// import SideDrawer from \"../components/miscellaneous/SideDrawer\";\n// import { ChatState } from \"../Context/ChatProvider\";\n// import { showReminderNotification } from \"../utils/notificationService\";\n// const Chatpage = () => {\n//   const [fetchAgain, setFetchAgain] = useState(false);\n//   const { user } = ChatState();\n\n//   return (\n//     <div style={{ width: \"100%\" }}>\n//       {user && <SideDrawer />}\n//       <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n//         {user && <MyChats fetchAgain={fetchAgain} />}\n//         {user && (\n//           <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n//         )}\n//       </Box>\n//     </div>\n//   );\n// };\n\n// export default Chatpage;\n//chat gpt \n// import { Box } from \"@chakra-ui/layout\";\n// import { useEffect, useState } from \"react\";\n// import Chatbox from \"../components/Chatbox\";\n// import MyChats from \"../components/MyChats\";\n// import SideDrawer from \"../components/miscellaneous/SideDrawer\";\n// import { ChatState } from \"../Context/ChatProvider\";\n// import ReminderListModal from \"../components/reminders/ReminderListModal\"; // Adjust path as needed\n\t\n// import {\n//   registerServiceWorker,\n//   requestNotificationPermission,\n//   notificationHelpers,\n  \n// } from \"../utils/notificationService\";\n\n// const Chatpage = () => {\n//   const [fetchAgain, setFetchAgain] = useState(false);\n//   const { user } = ChatState();\n\n//   useEffect(() => {\n//     const initNotifications = async () => {\n\t\t\n//       try {\n//         await registerServiceWorker();\n\n//         if (notificationHelpers.isSupported()) {\n//           const { isGranted } = await requestNotificationPermission();\n//           if (!isGranted) {\n//             console.warn(\"Notification permission not granted.\");\n//             // Optionally show UI toast or badge\n//           }\n//         }\n//       } catch (error) {\n//         console.error(\"Notification setup failed:\", error);\n//       }\n//     };\n\n//     initNotifications();\n//   }, []);\n// // Add this just before your component's return\n// // const triggerTestReminder = () => {\n// //     if (Notification.permission !== \"granted\") {\n// //       Notification.requestPermission();\n// //     }\n\n// //     navigator.serviceWorker.ready.then((registration) => {\n// //       registration.showNotification(\"🔔 Test Reminder\", {\n// //         body: \"This is a test reminder with actions\",\n// //         icon: \"/icon.png\", // Make sure this exists in public/\n// //         actions: [\n// //           { action: \"mark-done\", title: \"✅ Mark as Done\" },\n// //           { action: \"remind-again\", title: \"🔁 Remind Me Again\" },\n// //         ],\n// //         data: {\n// //           message: \"Test reminder message\",\n// //           id: \"test-reminder-id\",\n// //         }\n// //       });\n// //     });\n// //   };\n// const triggerTestReminder = () => {\n// \tif (!(\"Notification\" in window)) {\n// \t  alert(\"This browser does not support notifications.\");\n// \t  return;\n// \t}\n  \n// \tif (Notification.permission === \"default\") {\n// \t  Notification.requestPermission().then((permission) => {\n// \t\tif (permission === \"granted\") {\n// \t\t  showNotification();\n// \t\t} else {\n// \t\t  console.log(\"❌ Notification permission denied\");\n// \t\t}\n// \t  });\n// \t} else if (Notification.permission === \"granted\") {\n// \t  showNotification();\n// \t} else {\n// \t  console.log(\"❌ Notification permission denied\");\n// \t}\n//   };\n  \n//   const showNotification = () => {\n// \tnavigator.serviceWorker.ready.then((registration) => {\n// \t  registration.showNotification(\"🔔 Test Reminder\", {\n// \t\tbody: \"This is a test reminder with actions\",\n// \t\ticon: \"/icon.png\", // this must be present in public/\n// \t\tactions: [\n// \t\t  { action: \"mark-done\", title: \"✅ Mark as Done\" },\n// \t\t  { action: \"remind-again\", title: \"🔁 Remind Me Again\" },\n// \t\t],\n// \t\tdata: {\n// \t\t  message: \"This is a test reminder\",\n// \t\t  id: \"test-id\",\n// \t\t},\n// \t  });\n// \t});\n//   };\n  \n//   return (\n//     <div style={{ width: \"100%\" }}>\n// \t\t<button onClick={triggerTestReminder}>🔔 Trigger Test Reminder</button>\n//       {user && <SideDrawer />}\n\t  \n//       <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n//         {user && <MyChats fetchAgain={fetchAgain} />}\n//         {user && (\n//           <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n//         )}\n// \t\t{user && <ReminderListModal />} {/* ✅ Use Modal Button Instead */}\n//       </Box>\n//     </div>\n//   );\n// };\n\n// export default Chatpage;\n","// // import \"./App.css\";\n// // import Homepage from \"./Pages/Homepage\";\n// // import { Route } from \"react-router-dom\";\n// // import Chatpage from \"./Pages/Chatpage\";\n// // import { useEffect } from \"react\";\n// // import { registerServiceWorker } from './utils/notificationService';\n// // function App() {\n// // \t// Notification permission request function\n// // \tconst requestNotificationPermission = async () => {\n// // \t\tif (\"Notification\" in window && Notification.permission !== \"granted\") {\n// // \t\t  try {\n// // \t\t\tconst permission = await Notification.requestPermission();\n// // \t\t\tif (permission === \"granted\") {\n// // \t\t\t  console.log(\"Notification permission granted.\");\n// // \t\t\t} else {\n// // \t\t\t  console.log(\"Notification permission denied.\");\n// // \t\t\t}\n// // \t\t  } catch (error) {\n// // \t\t\tconsole.error(\"Notification permission request failed\", error);\n// // \t\t  }\n// // \t\t}\n// // \t  };\n\t\n// // \t  // Call the function when component mounts\n// // \t  useEffect(() => {\n// // \t\tregisterServiceWorker().catch(console.error);\n// // \t\trequestNotificationPermission();\n// // \t  }, []);\n\t\n// //   return (\n// //     <div className=\"App\">\n// //       <Route path=\"/\" component={Homepage} exact />\n// //       <Route path=\"/chats\" component={Chatpage} />\n// //     </div>\n// //   );\n// // }\n\n// // export default App;\n// import \"./App.css\";\n// import Homepage from \"./Pages/Homepage\";\n// import { Route } from \"react-router-dom\";\n// import Chatpage from \"./Pages/Chatpage\";\n// import { useEffect } from \"react\";\n// import { triggerReminderNotification } from \"./utils/notificationService\";\n\n// // Make it available in browser console\n\n// import { registerServiceWorker, requestNotificationPermission } from \"./utils/notificationService\";\n// //import { toast } from \"react-toastify\"; \n// function App() {\n// \twindow.triggerReminderNotification = triggerReminderNotification;\n\n//   // Notification permission request function\n//   const requestNotificationPermission = async () => {\n//     if (\"Notification\" in window && Notification.permission !== \"granted\") {\n//       try {\n//         const permission = await Notification.requestPermission();\n//         if (permission === \"granted\") {\n//           console.log(\"Notification permission granted.\");\n//         } else {\n//           console.log(\"Notification permission denied.\");\n//         }\n//       } catch (error) {\n//         console.error(\"Notification permission request failed\", error);\n//       }\n//     }\n//   };\n\n// //   useEffect(() => {\n// //     // Register service worker using your utility\n// //     registerServiceWorker().catch(console.error);\n\n// //     // Request notification permission\n// //     requestNotificationPermission();\n\n// //     // OPTIONAL fallback (debug only)\n// //     if (\"serviceWorker\" in navigator) {\n// //       window.addEventListener(\"load\", () => {\n// //         navigator.serviceWorker.register(\"/service-worker.js\")\n// //           .then((reg) => {\n// //             console.log(\"Fallback: Service Worker registered!\", reg);\n// //           })\n// //           .catch((err) => {\n// //             console.error(\"Fallback: Service Worker registration failed\", err);\n// //           });\n// //       });\n// //     }\n// //   }, []);\n// // useEffect(() => {\n// //     const init = async () => {\n// //       try {\n// //         // 🔧 Register the main service worker\n// //         await registerServiceWorker();\n\n// //         // 🔔 Ask for permission\n// //         const { isGranted } = await requestNotificationPermission();\n// //         console.log(\"🔔 Notification permission:\", isGranted);\n// //       } catch (err) {\n// //         console.error(\"🛑 Init notification setup failed:\", err);\n// //       }\n// //     };\n\n// //     init();\n\n// //     // 🔄 OPTIONAL fallback (debugging)\n// //     if (\"serviceWorker\" in navigator) {\n// //       window.addEventListener(\"load\", () => {\n// //         navigator.serviceWorker\n// //           .register(\"/service-worker.js\")\n// //           .then((reg) => {\n// //             console.log(\"Fallback: Service Worker registered!\", reg);\n// //           })\n// //           .catch((err) => {\n// //             console.error(\"Fallback: Service Worker registration failed\", err);\n// //           });\n// //       });\n// //     }\n// //   }, []);\n// useEffect(() => {\n// \tconst init = async () => {\n// \t  try {\n// \t\t// ✅ Register Service Worker\n// \t\tconst registration = await navigator.serviceWorker.register(\"/service-worker.js\")\n// \t\tconsole.log(\"✅ Service Worker registered:\", registration);\n  \n// \t\t// ✅ If waiting, skipWaiting to activate new SW\n// \t\tif (registration.waiting) {\n// \t\t  console.log(\"⚠️ Service Worker waiting — activating...\");\n// \t\t  registration.waiting.postMessage({ type: \"SKIP_WAITING\" });\n// \t\t}\n  \n// \t\t// ✅ Request Notification Permission\n// \t\tconst granted = await requestNotificationPermission();\n// \t\tconsole.log(\"🔔 Notification permission granted?\", granted);\n  \n// \t\tif (!granted) {\n// \t\t  console.warn(\"🔕 Notifications not granted\");\n// \t\t}\n// \t  } catch (err) {\t\n// \t\tconsole.error(\"🛑 Init notification setup failed:\", err);\n// \t  }\n// \t};\n  \n// \t// Only run once on load\n// \tinit();\n//   }, []);\n  \n//   return (\n//     <div className=\"App\">\n//       <Route path=\"/\" component={Homepage} exact />\n//       <Route path=\"/chats\" component={Chatpage} />\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n// App.js\nimport \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\nimport { useEffect } from \"react\";\nimport { registerServiceWorker, requestNotificationPermission } from \"./utils/notificationService\";\n\nfunction App() {\n  useEffect(() => {\n    const init = async () => {\n      try {\n        // Register the service worker\n        const registration = await navigator.serviceWorker.register(\"/service-worker.js\");\n        console.log(\"✅ Service Worker registered:\", registration);\n\n        // Force activation if needed\n        if (registration.waiting) {\n          registration.waiting.postMessage({ type: \"SKIP_WAITING\" });\n        }\n\n        // Request permission for notifications\n        const granted = await requestNotificationPermission();\n        console.log(\"🔔 Notification permission granted?\", granted);\n      } catch (err) {\n        console.error(\"🛑 Notification setup failed:\", err);\n      }\n    };\n\n    init();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}